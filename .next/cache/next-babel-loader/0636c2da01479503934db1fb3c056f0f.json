{"ast":null,"code":"import connectDb from \"../middlewares/dbMiddleware.js\";\n\nconst mongoose = require(\"mongoose\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nlet Article;\n\ntry {\n  Article = mongoose.model(\"Articles\");\n} catch {\n  Article = require(\"../models/Articles\");\n}\n\nlet User;\n\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n} // const { Comment } = require(\"../models/Comments\");\n// const verify = require(\"../verification/verifyToken\");\n\n\nconst handler = async (req, res) => {\n  let user;\n  const token = req.cookies.token;\n\n  if (token) {\n    try {\n      const verified = jwt.verify(token, process.env.TOKEN_SECRET);\n      req.user = verified;\n      user = await User.findById(verified._id);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  let query;\n\n  if (user) {\n    if (user.isModerator) {\n      query = Article.find({}).select(\"_id title author date image authorId isApproved\").sort(\"-date\");\n    } else {\n      query = Article.find({\n        $or: [{\n          isApproved: true\n        }, {\n          authorId: user._id\n        }]\n      }).select(\"_id title author date image authorId isApproved\").sort(\"-date\");\n    }\n  } else {\n    query = Article.find({}).where(\"isApproved\").equals(true).select(\"_id title author date image authorId isApproved\").sort(\"-date\");\n  }\n\n  await query.exec((err, data) => {\n    if (err) {\n      res.send(err);\n    } else {\n      res.json({\n        links: data\n      });\n    }\n  });\n};\n\nexport default connectDb(handler);","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/articles/pages.js"],"names":["connectDb","mongoose","require","jwt","Article","model","User","handler","req","res","user","token","cookies","verified","verify","process","env","TOKEN_SECRET","findById","_id","err","console","log","query","isModerator","find","select","sort","$or","isApproved","authorId","where","equals","exec","data","send","json","links"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gCAAtB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAIE,OAAJ;;AACA,IAAI;AACFA,EAAAA,OAAO,GAAGH,QAAQ,CAACI,KAAT,CAAe,UAAf,CAAV;AACD,CAFD,CAEE,MAAM;AACND,EAAAA,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAAjB;AACD;;AAED,IAAII,IAAJ;;AACA,IAAI;AACFA,EAAAA,IAAI,GAAGL,QAAQ,CAACI,KAAT,CAAe,OAAf,CAAP;AACD,CAFD,CAEE,MAAM;AACNC,EAAAA,IAAI,GAAGJ,OAAO,CAAC,iBAAD,CAAd;AACD,C,CAED;AACA;;;AAEA,MAAMK,OAAO,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,MAAIC,IAAJ;AACA,QAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYD,KAA1B;;AACA,MAAIA,KAAJ,EAAW;AACT,QAAI;AACF,YAAME,QAAQ,GAAGV,GAAG,CAACW,MAAJ,CAAWH,KAAX,EAAkBI,OAAO,CAACC,GAAR,CAAYC,YAA9B,CAAjB;AACAT,MAAAA,GAAG,CAACE,IAAJ,GAAWG,QAAX;AACAH,MAAAA,IAAI,GAAG,MAAMJ,IAAI,CAACY,QAAL,CAAcL,QAAQ,CAACM,GAAvB,CAAb;AACD,KAJD,CAIE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AAED,MAAIG,KAAJ;;AACA,MAAIb,IAAJ,EAAU;AACR,QAAIA,IAAI,CAACc,WAAT,EAAsB;AACpBD,MAAAA,KAAK,GAAGnB,OAAO,CAACqB,IAAR,CAAa,EAAb,EACLC,MADK,CACE,iDADF,EAELC,IAFK,CAEA,OAFA,CAAR;AAGD,KAJD,MAIO;AACLJ,MAAAA,KAAK,GAAGnB,OAAO,CAACqB,IAAR,CAAa;AACnBG,QAAAA,GAAG,EAAE,CAAC;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAD,EAAuB;AAAEC,UAAAA,QAAQ,EAAEpB,IAAI,CAACS;AAAjB,SAAvB;AADc,OAAb,EAGLO,MAHK,CAGE,iDAHF,EAILC,IAJK,CAIA,OAJA,CAAR;AAKD;AACF,GAZD,MAYO;AACLJ,IAAAA,KAAK,GAAGnB,OAAO,CAACqB,IAAR,CAAa,EAAb,EACLM,KADK,CACC,YADD,EAELC,MAFK,CAEE,IAFF,EAGLN,MAHK,CAGE,iDAHF,EAILC,IAJK,CAIA,OAJA,CAAR;AAKD;;AAED,QAAMJ,KAAK,CAACU,IAAN,CAAW,CAACb,GAAD,EAAMc,IAAN,KAAe;AAC9B,QAAId,GAAJ,EAAS;AACPX,MAAAA,GAAG,CAAC0B,IAAJ,CAASf,GAAT;AACD,KAFD,MAEO;AACLX,MAAAA,GAAG,CAAC2B,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAEH;AAAT,OAAT;AACD;AACF,GANK,CAAN;AAOD,CAzCD;;AA0CA,eAAelC,SAAS,CAACO,OAAD,CAAxB","sourcesContent":["import connectDb from \"../middlewares/dbMiddleware.js\";\nconst mongoose = require(\"mongoose\");\nconst jwt = require(\"jsonwebtoken\");\nlet Article;\ntry {\n  Article = mongoose.model(\"Articles\");\n} catch {\n  Article = require(\"../models/Articles\");\n}\n\nlet User;\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n}\n\n// const { Comment } = require(\"../models/Comments\");\n// const verify = require(\"../verification/verifyToken\");\n\nconst handler = async (req, res) => {\n  let user;\n  const token = req.cookies.token;\n  if (token) {\n    try {\n      const verified = jwt.verify(token, process.env.TOKEN_SECRET);\n      req.user = verified;\n      user = await User.findById(verified._id);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  let query;\n  if (user) {\n    if (user.isModerator) {\n      query = Article.find({})\n        .select(\"_id title author date image authorId isApproved\")\n        .sort(\"-date\");\n    } else {\n      query = Article.find({\n        $or: [{ isApproved: true }, { authorId: user._id }],\n      })\n        .select(\"_id title author date image authorId isApproved\")\n        .sort(\"-date\");\n    }\n  } else {\n    query = Article.find({})\n      .where(\"isApproved\")\n      .equals(true)\n      .select(\"_id title author date image authorId isApproved\")\n      .sort(\"-date\");\n  }\n\n  await query.exec((err, data) => {\n    if (err) {\n      res.send(err);\n    } else {\n      res.json({ links: data });\n    }\n  });\n};\nexport default connectDb(handler);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const mongoose = require(\"mongoose\");\n\nconst fetch = require(\"node-fetch\");\n\nvar parser = require(\"xml2json\");\n\nimport { serialize } from \"cookie\";\n\nconst bcrypt = require(\"bcryptjs\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst {\n  loginValidation\n} = require(\"../validation/validation\");\n\nlet User;\n\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n}\n\nlet YoutubeLink;\n\ntry {\n  YoutubeLink = mongoose.model(\"YoutubeLinks\");\n} catch {\n  YoutubeLink = require(\"../models/YoutubeLinks\");\n}\n\nexport const resolvers = {\n  Query: {\n    youtubeLinks: async () => await YoutubeLink.find({}).sort(\"-date\"),\n    podcasts: async () => await fetch(`https://anchor.fm/s/333e122c/podcast/rss`).then(response => response.text()).then(data => {\n      let json = JSON.parse(parser.toJson(data, {\n        reversible: false\n      }));\n      return json.rss.channel.item.map(element => {\n        const text = element[\"description\"].replace(/<[^>]+>/g, \"\").replace(/&nbsp;/, \"\");\n        return {\n          title: element[\"title\"],\n          by: element[\"dc:creator\"],\n          link: element[\"enclosure\"][\"url\"],\n          date: element[\"pubDate\"],\n          image: element[\"itunes:image\"][\"href\"],\n          description: text.substring(0, text.indexOf(\"---\"))\n        };\n      });\n    }),\n    login: async (_, args, {\n      res\n    }) => {\n      const {\n        error\n      } = await loginValidation(args);\n\n      if (error) {\n        const toReturn = error.details[0].message.replace('\"email\"', \"Email\").replace('\"password\"', \"Password\");\n        throw Error(toReturn);\n      }\n\n      const {\n        email,\n        password\n      } = args;\n      const user = await User.findOne({\n        email: email\n      });\n      if (!user) throw Error(\"The email or password is incorrect\");\n      const validPass = await bcrypt.compare(password, user.password);\n      if (!validPass) throw Error(\"The email or password is incorrect\");\n      const token = jwt.sign({\n        _id: user._id,\n        tokenCreated: new Date()\n      }, process.env.TOKEN_SECRET);\n      console.log(res); // res.cookie(\"token\", token, { path: \"/\" }, { httpOnly: true });\n      // res.setHeader(\n      //   \"Set-Cookie\",\n      //   serialize(\"token\", token, { path: \"/\" }, { httpOnly: true })\n      // );\n\n      return {\n        token: token\n      };\n    }\n  }\n};","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/graphql/resolvers.js"],"names":["mongoose","require","fetch","parser","serialize","bcrypt","jwt","loginValidation","User","model","YoutubeLink","resolvers","Query","youtubeLinks","find","sort","podcasts","then","response","text","data","json","JSON","parse","toJson","reversible","rss","channel","item","map","element","replace","title","by","link","date","image","description","substring","indexOf","login","_","args","res","error","toReturn","details","message","Error","email","password","user","findOne","validPass","compare","token","sign","_id","tokenCreated","Date","process","env","TOKEN_SECRET","console","log"],"mappings":"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","sourcesContent":["const mongoose = require(\"mongoose\");\nconst fetch = require(\"node-fetch\");\nvar parser = require(\"xml2json\");\nimport { serialize } from \"cookie\";\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst { loginValidation } = require(\"../validation/validation\");\n\nlet User;\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n}\nlet YoutubeLink;\ntry {\n  YoutubeLink = mongoose.model(\"YoutubeLinks\");\n} catch {\n  YoutubeLink = require(\"../models/YoutubeLinks\");\n}\n\nexport const resolvers = {\n  Query: {\n    youtubeLinks: async () => await YoutubeLink.find({}).sort(\"-date\"),\n\n    podcasts: async () =>\n      await fetch(`https://anchor.fm/s/333e122c/podcast/rss`)\n        .then((response) => response.text())\n        .then((data) => {\n          let json = JSON.parse(parser.toJson(data, { reversible: false }));\n          return json.rss.channel.item.map((element) => {\n            const text = element[\"description\"]\n              .replace(/<[^>]+>/g, \"\")\n              .replace(/&nbsp;/, \"\");\n            return {\n              title: element[\"title\"],\n              by: element[\"dc:creator\"],\n              link: element[\"enclosure\"][\"url\"],\n              date: element[\"pubDate\"],\n              image: element[\"itunes:image\"][\"href\"],\n              description: text.substring(0, text.indexOf(\"---\")),\n            };\n          });\n        }),\n\n    login: async (_, args, {res}) => {\n      const { error } = await loginValidation(args);\n      if (error) {\n        const toReturn = error.details[0].message\n          .replace('\"email\"', \"Email\")\n          .replace('\"password\"', \"Password\");\n        throw Error(toReturn);\n      }\n\n      const { email, password } = args;\n      const user = await User.findOne({ email: email });\n\n      if (!user) throw Error(\"The email or password is incorrect\");\n\n      const validPass = await bcrypt.compare(password, user.password);\n      if (!validPass) throw Error(\"The email or password is incorrect\");\n\n      const token = jwt.sign(\n        { _id: user._id, tokenCreated: new Date() },\n        process.env.TOKEN_SECRET\n      );\n      console.log(res);\n      // res.cookie(\"token\", token, { path: \"/\" }, { httpOnly: true });\n      // res.setHeader(\n      //   \"Set-Cookie\",\n      //   serialize(\"token\", token, { path: \"/\" }, { httpOnly: true })\n      // );\n\n      return { token: token };\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}
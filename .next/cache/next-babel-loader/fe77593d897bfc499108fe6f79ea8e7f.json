{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport LargeCard from \"../../components/Cards/LargeCard/LargeCard.js\";\nimport Page from \"../../components/Page/Page\";\nimport styles from \"../../components/Page/Page.module.css\";\nimport Html from \"slate-html-serializer\";\nimport { getRules } from \"../../components/TextEditor/TextEditor\";\nimport CommentBar from \"../../components/Comment/CommentBar\";\nimport axios from \"axios\";\nimport { LoginContext } from \"../../contexts/reducers/loginContext\";\nimport { SocketContext } from \"../../contexts/reducers/socketContext\";\nimport { Card } from \"../../components/Cards/Card.js\";\nimport { useRouter } from \"next/router\";\nimport { initializeApollo, addApolloState } from \"../../lib/apolloClient\";\nimport { gql, useQuery, useMutation, NetworkStatus } from \"@apollo/client\";\nexport const ARTICLE_QUERY = gql`\n  query articleQuery($_id: String!) {\n    article(_id: $_id) {\n      _id\n      date\n      image\n      title\n      author\n      authorId\n      isApproved\n      content\n      comments {\n        _id\n        authorId\n        author\n        content\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\nexport const POST_COMMENT_MUTATION = gql`\n  mutation postComment($_id: String!, $content: String!) {\n    postComment(_id: $_id, content: $content) {\n      _id\n      date\n      image\n      title\n      author\n      authorId\n      isApproved\n      content\n      comments {\n        _id\n        authorId\n        author\n        content\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\n\nconst ArticlePage = props => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    loading,\n    error,\n    fetchMore,\n    data,\n    networkStatus,\n    refetch\n  } = useQuery(ARTICLE_QUERY, {\n    variables: {\n      _id: id\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  const rules = getRules(styles);\n  const html = new Html({\n    rules\n  });\n  let article;\n\n  if (loading && !loadingArticle) {\n    article = {};\n  } else {\n    article = _objectSpread(_objectSpread({}, data.article), {}, {\n      date: JSON.parse(data.article.date),\n      content: data.article.content ? html.serialize(JSON.parse(data.article.content)) : `<p></p>`,\n      comments: data.article.comments.map(comment => _objectSpread(_objectSpread({}, comment), {}, {\n        content: JSON.parse(comment.content),\n        createdAt: JSON.parse(comment.createdAt),\n        updatedAt: JSON.parse(comment.updatedAt)\n      }))\n    });\n  }\n\n  const [savePostedComments, {\n    _\n  }] = useMutation(POST_COMMENT_MUTATION); // const socket = useSelector((state) => state.network.socket);\n\n  const {\n    0: loginState,\n    1: loginDispatch\n  } = useContext(LoginContext);\n  const {\n    0: socketState,\n    1: socketDispatch\n  } = useContext(SocketContext);\n  const socket = socketState.socket;\n  const user = loginState.user;\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n  useEffect(() => {\n    if (socket) {\n      socket.on(\"comments changed\", data => {\n        console.log(\"Comments changed\");\n\n        if (data.articleId === id) {\n          refetch();\n        }\n      });\n    }\n  }, [socket]);\n\n  const postComment = comment => {\n    // const toPost = { id: id.toString(), content: comment };\n    // const options = {\n    //   headers: { \"Content-Type\": \"application/json\" },\n    // };\n    // axios\n    //   .post(\"/api/articles/postcomment\", JSON.stringify(toPost), options)\n    //   .then((res) => {\n    //     alert(\"Comment Posted\");\n    //   })\n    //   .catch((err) => {\n    //     if (err.response.status === 401 || err.response.status === 400) {\n    //       alert(err.response.data.error);\n    //     } else if (err.response.status !== 200) {\n    //       throw Error(err);\n    //     }\n    //   });\n    savePostedComments({\n      variables: {\n        _id: id.toString(),\n        content: JSON.stringify(comment)\n      }\n    });\n  };\n\n  const isEditable = user && (user.isModerator || user._id === article.authorId);\n  const isPendingApproval = !article.isApproved;\n\n  const headline = __jsx(\"div\", {\n    className: styles[\"headline\"],\n    style: isEditable || isPendingApproval ? {\n      marginTop: \"36px\"\n    } : {\n      marginTop: \"0px\"\n    }\n  }, __jsx(LargeCard, {\n    title: article.title,\n    author: article.author,\n    date: article.date,\n    isApproved: article.isApproved,\n    contentType: Card.ContentType[\"article-internal\"],\n    link: `article?id=${id}`,\n    isEditable: user && (user.isModerator || user._id === article.authorId),\n    image: article.image,\n    onClick: () => {}\n  }));\n\n  const contents = __jsx(\"div\", null, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: article.content\n    }\n  }), __jsx(\"div\", {\n    className: styles[\"main-pane-item\"]\n  }, __jsx(CommentBar, {\n    postComment: postComment,\n    comments: article.comments\n  })));\n\n  return __jsx(Page // sidebarFixTopOffset={35 + 644}\n  , {\n    sidebarFixTopOffset: 0,\n    headline: headline,\n    mainPane: contents\n  });\n};\n\nexport async function getServerSideProps({\n  query\n}) {\n  // const rules = getRules(styles);\n  // const html = new Html({ rules });\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: ARTICLE_QUERY,\n    variables: {\n      _id: query.id\n    }\n  });\n  return addApolloState(apolloClient, {\n    props: {}\n  });\n}\nexport default ArticlePage;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/article/index.js"],"names":["React","useState","useEffect","useContext","LargeCard","Page","styles","Html","getRules","CommentBar","axios","LoginContext","SocketContext","Card","useRouter","initializeApollo","addApolloState","gql","useQuery","useMutation","NetworkStatus","ARTICLE_QUERY","POST_COMMENT_MUTATION","ArticlePage","props","router","id","query","loading","error","fetchMore","data","networkStatus","refetch","variables","_id","notifyOnNetworkStatusChange","loadingArticle","rules","html","article","date","JSON","parse","content","serialize","comments","map","comment","createdAt","updatedAt","savePostedComments","_","loginState","loginDispatch","socketState","socketDispatch","socket","user","window","scrollTo","on","console","log","articleId","postComment","toString","stringify","isEditable","isModerator","authorId","isPendingApproval","isApproved","headline","marginTop","title","author","ContentType","image","contents","__html","getServerSideProps","apolloClient"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport LargeCard from \"../../components/Cards/LargeCard/LargeCard.js\";\nimport Page from \"../../components/Page/Page\";\nimport styles from \"../../components/Page/Page.module.css\";\nimport Html from \"slate-html-serializer\";\nimport { getRules } from \"../../components/TextEditor/TextEditor\";\nimport CommentBar from \"../../components/Comment/CommentBar\";\nimport axios from \"axios\";\nimport { LoginContext } from \"../../contexts/reducers/loginContext\";\nimport { SocketContext } from \"../../contexts/reducers/socketContext\";\nimport { Card } from \"../../components/Cards/Card.js\";\nimport { useRouter } from \"next/router\";\nimport { initializeApollo, addApolloState } from \"../../lib/apolloClient\";\nimport { gql, useQuery, useMutation, NetworkStatus } from \"@apollo/client\";\n\nexport const ARTICLE_QUERY = gql`\n  query articleQuery($_id: String!) {\n    article(_id: $_id) {\n      _id\n      date\n      image\n      title\n      author\n      authorId\n      isApproved\n      content\n      comments {\n        _id\n        authorId\n        author\n        content\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\n\nexport const POST_COMMENT_MUTATION = gql`\n  mutation postComment($_id: String!, $content: String!) {\n    postComment(_id: $_id, content: $content) {\n      _id\n      date\n      image\n      title\n      author\n      authorId\n      isApproved\n      content\n      comments {\n        _id\n        authorId\n        author\n        content\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\nconst ArticlePage = (props) => {\n  const router = useRouter();\n  const { id } = router.query;\n  const { loading, error, fetchMore, data, networkStatus, refetch } = useQuery(\n    ARTICLE_QUERY,\n    {\n      variables: { _id: id },\n      notifyOnNetworkStatusChange: true,\n    }\n  );\n\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  const rules = getRules(styles);\n  const html = new Html({ rules });\n  let article;\n  if (loading && !loadingArticle) {\n    article = {};\n  } else {\n    article = {\n      ...data.article,\n      date: JSON.parse(data.article.date),\n      content: data.article.content\n        ? html.serialize(JSON.parse(data.article.content))\n        : `<p></p>`,\n      comments: data.article.comments.map((comment) => ({\n        ...comment,\n        content: JSON.parse(comment.content),\n        createdAt: JSON.parse(comment.createdAt),\n        updatedAt: JSON.parse(comment.updatedAt),\n      })),\n    };\n  }\n\n  const [savePostedComments, { _ }] = useMutation(POST_COMMENT_MUTATION);\n\n  // const socket = useSelector((state) => state.network.socket);\n  const [loginState, loginDispatch] = useContext(LoginContext);\n  const [socketState, socketDispatch] = useContext(SocketContext);\n  const socket = socketState.socket;\n  const user = loginState.user;\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  useEffect(() => {\n    if (socket) {\n      socket.on(\"comments changed\", (data) => {\n        console.log(\"Comments changed\");\n        if (data.articleId === id) {\n          refetch();\n        }\n      });\n    }\n  }, [socket]);\n\n  const postComment = (comment) => {\n    // const toPost = { id: id.toString(), content: comment };\n    // const options = {\n    //   headers: { \"Content-Type\": \"application/json\" },\n    // };\n\n    // axios\n    //   .post(\"/api/articles/postcomment\", JSON.stringify(toPost), options)\n    //   .then((res) => {\n    //     alert(\"Comment Posted\");\n    //   })\n    //   .catch((err) => {\n    //     if (err.response.status === 401 || err.response.status === 400) {\n    //       alert(err.response.data.error);\n    //     } else if (err.response.status !== 200) {\n    //       throw Error(err);\n    //     }\n    //   });\n\n    savePostedComments({\n      variables: { _id: id.toString(), content: JSON.stringify(comment) },\n    });\n  };\n\n  const isEditable =\n    user && (user.isModerator || user._id === article.authorId);\n  const isPendingApproval = !article.isApproved;\n\n  const headline = (\n    <div\n      className={styles[\"headline\"]}\n      style={\n        isEditable || isPendingApproval\n          ? { marginTop: \"36px\" }\n          : { marginTop: \"0px\" }\n      }\n    >\n      <LargeCard\n        title={article.title}\n        author={article.author}\n        date={article.date}\n        isApproved={article.isApproved}\n        contentType={Card.ContentType[\"article-internal\"]}\n        link={`article?id=${id}`}\n        isEditable={user && (user.isModerator || user._id === article.authorId)}\n        image={article.image}\n        onClick={() => {}}\n      />\n    </div>\n  );\n\n  const contents = (\n    <div>\n      <div dangerouslySetInnerHTML={{ __html: article.content }}></div>\n      <div className={styles[\"main-pane-item\"]}>\n        <CommentBar postComment={postComment} comments={article.comments} />\n      </div>\n    </div>\n  );\n\n  return (\n    <Page\n      // sidebarFixTopOffset={35 + 644}\n      sidebarFixTopOffset={0}\n      headline={headline}\n      mainPane={contents}\n    />\n  );\n};\n\nexport async function getServerSideProps({ query }) {\n  // const rules = getRules(styles);\n  // const html = new Html({ rules });\n\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: ARTICLE_QUERY,\n    variables: { _id: query.id },\n  });\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default ArticlePage;\n"]},"metadata":{},"sourceType":"module"}
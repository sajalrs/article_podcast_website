{"ast":null,"code":"import { ApolloServer } from \"apollo-server-micro\";\n\nconst mongoose = require(\"mongoose\");\n\nrequire(\"dotenv/config\");\n\nimport { typeDefs } from \"../graphql/typeDefs\";\nimport { resolvers } from \"../graphql/resolvers\";\n\nconst connectDb = async () => {\n  if (mongoose.connections[0].readyState) return handler(req, res);\n  await mongoose.connect(process.env.MONGO_URL, {\n    useNewUrlParser: true,\n    useFindAndModify: true,\n    useCreateIndex: true\n  });\n};\n\nconnectDb();\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nexport default apolloServer.createHandler({\n  path: \"/api/graphql\"\n});","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/graphql/index.js"],"names":["ApolloServer","mongoose","require","typeDefs","resolvers","connectDb","connections","readyState","handler","req","res","connect","process","env","MONGO_URL","useNewUrlParser","useFindAndModify","useCreateIndex","apolloServer","createHandler","path"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACAA,OAAO,CAAC,eAAD,CAAP;;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,SAAT,QAA0B,sBAA1B;;AAEA,MAAMC,SAAS,GAAG,YAAY;AAC5B,MAAIJ,QAAQ,CAACK,WAAT,CAAqB,CAArB,EAAwBC,UAA5B,EAAwC,OAAOC,OAAO,CAACC,GAAD,EAAMC,GAAN,CAAd;AACxC,QAAMT,QAAQ,CAACU,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,SAA7B,EAAwC;AAC5CC,IAAAA,eAAe,EAAE,IAD2B;AAE5CC,IAAAA,gBAAgB,EAAE,IAF0B;AAG5CC,IAAAA,cAAc,EAAE;AAH4B,GAAxC,CAAN;AAKD,CAPD;;AASAZ,SAAS;AAET,MAAMa,YAAY,GAAG,IAAIlB,YAAJ,CAAiB;AACpCG,EAAAA,QADoC;AAEpCC,EAAAA;AAFoC,CAAjB,CAArB;AAIA,eAAec,YAAY,CAACC,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAf","sourcesContent":["import { ApolloServer } from \"apollo-server-micro\";\nconst mongoose = require(\"mongoose\");\nrequire(\"dotenv/config\");\nimport { typeDefs } from \"../graphql/typeDefs\";\nimport { resolvers } from \"../graphql/resolvers\";\n\nconst connectDb = async () => {\n  if (mongoose.connections[0].readyState) return handler(req, res);\n  await mongoose.connect(process.env.MONGO_URL, {\n    useNewUrlParser: true,\n    useFindAndModify: true,\n    useCreateIndex: true,\n  });\n};\n\nconnectDb();\n\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\nexport default apolloServer.createHandler({ path: \"/api/graphql\" });\n"]},"metadata":{},"sourceType":"module"}
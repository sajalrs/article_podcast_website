{"ast":null,"code":"import { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { concatPagination } from '@apollo/client/utilities';\nimport merge from 'deepmerge';\nimport isEqual from 'lodash/isEqual';\nexport const APOLLO_STATE_PROP_NAME = '__APOLLO_STATE__';\nlet apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: `${process.env.NEXT_PUBLIC_DOMAIN}/api/graphql`,\n      // Server URL (must be absolute)\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n\n\n    const data = merge(initialState, existingCache, {\n      // combine arrays using object equality (like in sets)\n      arrayMerge: (destinationArray, sourceArray) => [...sourceArray, ...destinationArray.filter(d => sourceArray.every(s => !isEqual(d, s)))]\n    }); // Restore the cache with the merged data\n\n    _apolloClient.cache.restore(data);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function addApolloState(client, pageProps) {\n  if (pageProps === null || pageProps === void 0 ? void 0 : pageProps.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n  }\n\n  return pageProps;\n}\nexport function useApollo(pageProps) {\n  const state = pageProps[APOLLO_STATE_PROP_NAME];\n  const store = useMemo(() => initializeApollo(state), [state]);\n  return store;\n}","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/lib/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","concatPagination","merge","isEqual","APOLLO_STATE_PROP_NAME","apolloClient","createApolloClient","ssrMode","link","uri","process","env","NEXT_PUBLIC_DOMAIN","credentials","cache","typePolicies","Query","fields","allPosts","initializeApollo","initialState","_apolloClient","existingCache","extract","data","arrayMerge","destinationArray","sourceArray","filter","d","every","s","restore","addApolloState","client","pageProps","props","useApollo","state","store"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,MAAMC,sBAAsB,GAAG,kBAA/B;AAEP,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIR,YAAJ,CAAiB;AACtBS,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIT,QAAJ,CAAa;AACjBU,MAAAA,GAAG,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,kBAAmB,cADtB;AACqC;AACtDC,MAAAA,WAAW,EAAE,aAFI,CAEW;;AAFX,KAAb,CAFgB;AAMtBC,IAAAA,KAAK,EAAE,IAAId,aAAJ,CAAkB;AACvBe,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAEjB,gBAAgB;AADpB;AADH;AADK;AADS,KAAlB;AANe,GAAjB,CAAP;AAgBD;;AAED,OAAO,SAASkB,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGhB,YAAH,2DAAmBC,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIc,YAAJ,EAAkB;AAChB;AACA,UAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFgB,CAIhB;;;AACA,UAAMC,IAAI,GAAGtB,KAAK,CAACkB,YAAD,EAAeE,aAAf,EAA8B;AAC9C;AACAG,MAAAA,UAAU,EAAE,CAACC,gBAAD,EAAmBC,WAAnB,KAAmC,CAC7C,GAAGA,WAD0C,EAE7C,GAAGD,gBAAgB,CAACE,MAAjB,CAAyBC,CAAD,IACzBF,WAAW,CAACG,KAAZ,CAAmBC,CAAD,IAAO,CAAC5B,OAAO,CAAC0B,CAAD,EAAIE,CAAJ,CAAjC,CADC,CAF0C;AAFD,KAA9B,CAAlB,CALgB,CAehB;;AACAV,IAAAA,aAAa,CAACP,KAAd,CAAoBkB,OAApB,CAA4BR,IAA5B;AACD,GAtBmD,CAuBpD;;;AACA,YAAmC,OAAOH,aAAP,CAxBiB,CAyBpD;;AACA,MAAI,CAAChB,YAAL,EAAmBA,YAAY,GAAGgB,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASY,cAAT,CAAwBC,MAAxB,EAAgCC,SAAhC,EAA2C;AAChD,MAAIA,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAEC,KAAf,EAAsB;AACpBD,IAAAA,SAAS,CAACC,KAAV,CAAgBhC,sBAAhB,IAA0C8B,MAAM,CAACpB,KAAP,CAAaS,OAAb,EAA1C;AACD;;AAED,SAAOY,SAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBF,SAAnB,EAA8B;AACnC,QAAMG,KAAK,GAAGH,SAAS,CAAC/B,sBAAD,CAAvB;AACA,QAAMmC,KAAK,GAAG1C,OAAO,CAAC,MAAMsB,gBAAgB,CAACmB,KAAD,CAAvB,EAAgC,CAACA,KAAD,CAAhC,CAArB;AACA,SAAOC,KAAP;AACD","sourcesContent":["import { useMemo } from 'react'\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\nimport { concatPagination } from '@apollo/client/utilities'\nimport merge from 'deepmerge'\nimport isEqual from 'lodash/isEqual'\n\nexport const APOLLO_STATE_PROP_NAME = '__APOLLO_STATE__'\n\nlet apolloClient\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: new HttpLink({\n      uri: `${process.env.NEXT_PUBLIC_DOMAIN}/api/graphql`, // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination(),\n          },\n        },\n      },\n    }),\n  })\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient()\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract()\n\n    // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n    const data = merge(initialState, existingCache, {\n      // combine arrays using object equality (like in sets)\n      arrayMerge: (destinationArray, sourceArray) => [\n        ...sourceArray,\n        ...destinationArray.filter((d) =>\n          sourceArray.every((s) => !isEqual(d, s))\n        ),\n      ],\n    })\n\n    // Restore the cache with the merged data\n    _apolloClient.cache.restore(data)\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient\n\n  return _apolloClient\n}\n\nexport function addApolloState(client, pageProps) {\n  if (pageProps?.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract()\n  }\n\n  return pageProps\n}\n\nexport function useApollo(pageProps) {\n  const state = pageProps[APOLLO_STATE_PROP_NAME]\n  const store = useMemo(() => initializeApollo(state), [state])\n  return store\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst mongoose = require(\"mongoose\");\n\nconst fetch = require(\"node-fetch\");\n\nvar parser = require(\"xml2json\");\n\nconst bcrypt = require(\"bcryptjs\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nrequire(\"dotenv/config\");\n\nconst sgMail = require(\"@sendgrid/mail\");\n\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\n\nconst {\n  loginValidation,\n  registerValidation,\n  resetPasswordValidation\n} = require(\"../validation/validation\");\n\nlet YoutubeLink;\n\ntry {\n  YoutubeLink = mongoose.model(\"YoutubeLinks\");\n} catch {\n  YoutubeLink = require(\"../models/YoutubeLinks\");\n}\n\nlet User;\n\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n}\n\nlet Article;\n\ntry {\n  Article = mongoose.model(\"Articles\");\n} catch {\n  Article = require(\"../models/Articles\");\n}\n\nexport const resolvers = {\n  Query: {\n    youtubeLinks: async () => await YoutubeLink.find({}).sort(\"-date\"),\n    podcasts: async () => await fetch(`https://anchor.fm/s/333e122c/podcast/rss`).then(response => response.text()).then(data => {\n      let json = JSON.parse(parser.toJson(data, {\n        reversible: false\n      }));\n      return json.rss.channel.item.map(element => {\n        const text = element[\"description\"].replace(/<[^>]+>/g, \"\").replace(/&nbsp;/, \"\");\n        return {\n          title: element[\"title\"],\n          by: element[\"dc:creator\"],\n          link: element[\"enclosure\"][\"url\"],\n          date: element[\"pubDate\"],\n          image: element[\"itunes:image\"][\"href\"],\n          description: text.substring(0, text.indexOf(\"---\"))\n        };\n      });\n    }),\n    isLoggedIn: async (parent, args, ctx) => {\n      const {\n        authData\n      } = ctx;\n\n      if (!authData) {\n        throw Error(\"Please login to proceed\");\n      }\n\n      try {\n        const user = await User.findById(authData._id);\n        return user;\n      } catch (err) {\n        throw Error(err.message);\n      }\n    },\n    login: async (parent, args, ctx) => {\n      const {\n        error\n      } = loginValidation(args);\n\n      if (error) {\n        const toReturn = error.details[0].message.replace('\"email\"', \"Email\").replace('\"password\"', \"Password\");\n        throw Error(toReturn);\n      }\n\n      const {\n        cookie\n      } = ctx;\n      const {\n        email,\n        password\n      } = args;\n      const user = await User.findOne({\n        email: email\n      });\n      if (!user) throw Error(\"The email or password is incorrect\");\n      const validPass = await bcrypt.compare(password, user.password);\n      if (!validPass) throw Error(\"The email or password is incorrect\");\n      const token = jwt.sign({\n        _id: user._id,\n        tokenCreated: new Date()\n      }, process.env.TOKEN_SECRET);\n      cookie(\"token\", token, {\n        path: \"/\",\n        httpOnly: true,\n        sameSite: \"strict\"\n      });\n      return {\n        token: token\n      };\n    },\n    logout: (parent, args, ctx) => {\n      try {\n        const {\n          cookie\n        } = ctx;\n        cookie(\"token\", \"deleted\", {\n          path: \"/\",\n          httpOnly: true,\n          maxAge: 0,\n          sameSite: \"strict\"\n        });\n      } catch {\n        return false;\n      }\n\n      return true;\n    },\n    forgotPassword: async (parent, args, ctx) => {\n      const {\n        error\n      } = resetPasswordValidation(args);\n\n      if (error) {\n        const toReturn = error.details[0].message.replace('\"email\"', \"Email\");\n        throw Error(toReturn);\n      }\n\n      await User.findOne({\n        email: args.email\n      }, async (err, user) => {\n        if (err || !user) {\n          if (err) {\n            throw Error(err.message);\n          } else if (!user) {\n            throw Error(\"Cannot find account matching given email\");\n          }\n        } else {\n          const secret = `${user.password}-${user.updatedAt}`;\n          const token = jwt.sign({\n            id: user._id,\n            email: user.email\n          }, secret);\n          const passwordResetLink = false ? `www.thefalseninepodcast.com/resetpassword?id=${user._id}&token=${token}` : `localhost:3000/resetpassword?id=${user._id}&token=${token}`;\n          const msg = {\n            from: `The False 9 Podcast <${process.env.EMAIL}>`,\n            to: user.email,\n            subject: \"Password Reset Link\",\n            text: `Password Reset Link: ${passwordResetLink}`\n          };\n          sgMail.send(msg).then(() => {\n            console.log(\"Email sent\");\n          }).catch(error => {\n            console.error(error);\n            throw Error(error.message);\n          });\n        }\n      });\n      return true;\n    },\n    articles: async (parent, args, ctx) => {\n      let user;\n      const {\n        authData\n      } = ctx;\n\n      if (authData) {\n        try {\n          user = await User.findById(authData._id);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n\n      let query;\n\n      if (user) {\n        if (user.isModerator) {\n          query = Article.find({}).select(\"_id title author date image authorId isApproved\").sort(\"-date\");\n        } else {\n          query = Article.find({\n            $or: [{\n              isApproved: true\n            }, {\n              authorId: user._id\n            }]\n          }).select(\"_id title author date image authorId isApproved\").sort(\"-date\");\n        }\n      } else {\n        query = Article.find({}).where(\"isApproved\").equals(true).select(\"_id title author date image authorId isApproved\").sort(\"-date\");\n      }\n\n      try {\n        const data = await query.exec();\n        const toReturn = data.map(item => _objectSpread(_objectSpread({}, item), {}, {\n          content: JSON.stringify(item.content.toJson())\n        }));\n        console.log(toReturn);\n        return toReturn; // return data.map(item => ({ ...item, content: JSON.stringify(item.content) }));\n      } catch (err) {\n        throw Error(err.message);\n      }\n    }\n  },\n  Mutation: {\n    register: async (parent, args, ctx) => {\n      const {\n        error\n      } = registerValidation(args);\n\n      if (error) {\n        const toReturn = error.details[0].message.replace('\"firstName\"', \"First Name\").replace('\"lastName\"', \"Last Name\").replace('\"email\"', \"Email\").replace('\"password\"', \"Password\");\n        throw Error(toReturn);\n      }\n\n      const emailExists = await User.findOne({\n        email: args.email\n      });\n      if (emailExists) throw Error(\"Email already exists\");\n      const salt = await bcrypt.genSalt(10);\n      const hashPassword = await bcrypt.hash(args.password, salt);\n      const user = new User({\n        firstName: args.firstName,\n        lastName: args.lastName,\n        email: args.email,\n        password: hashPassword,\n        isModerator: false,\n        isSubscribed: args.isSubscribed || false\n      });\n\n      try {\n        const savedUser = await user.save();\n        return savedUser;\n      } catch (err) {\n        throw Error(err.message);\n      }\n    },\n    subscribe: async (parent, args, ctx) => {\n      const {\n        authData\n      } = ctx;\n\n      if (!authData) {\n        throw Error(\"Please login to proceed\");\n      }\n\n      try {\n        const user = await User.findById(authData._id);\n        user.isSubscribed = args.isSubscribed;\n        return await user.save();\n      } catch (err) {\n        throw Error(err.message);\n      }\n    },\n    resetPassword: async (parent, args, ctx) => {\n      let savedUser;\n\n      try {\n        const user = await User.findById(args._id);\n        const secret = `${user.password}-${user.updatedAt}`;\n        const verified = jwt.verify(args.token, secret);\n\n        if (verified) {\n          const salt = await bcrypt.genSalt(10);\n          const hashPassword = await bcrypt.hash(args.password, salt);\n          user.password = hashPassword;\n          savedUser = await user.save();\n        }\n      } catch (err) {\n        throw Error(err.message);\n      }\n\n      return savedUser;\n    }\n  }\n};","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/graphql/resolvers.js"],"names":["mongoose","require","fetch","parser","bcrypt","jwt","sgMail","setApiKey","process","env","SENDGRID_API_KEY","loginValidation","registerValidation","resetPasswordValidation","YoutubeLink","model","User","Article","resolvers","Query","youtubeLinks","find","sort","podcasts","then","response","text","data","json","JSON","parse","toJson","reversible","rss","channel","item","map","element","replace","title","by","link","date","image","description","substring","indexOf","isLoggedIn","parent","args","ctx","authData","Error","user","findById","_id","err","message","login","error","toReturn","details","cookie","email","password","findOne","validPass","compare","token","sign","tokenCreated","Date","TOKEN_SECRET","path","httpOnly","sameSite","logout","maxAge","forgotPassword","secret","updatedAt","id","passwordResetLink","msg","from","EMAIL","to","subject","send","console","log","catch","articles","query","isModerator","select","$or","isApproved","authorId","where","equals","exec","content","stringify","Mutation","register","emailExists","salt","genSalt","hashPassword","hash","firstName","lastName","isSubscribed","savedUser","save","subscribe","resetPassword","verified","verify"],"mappings":"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","sourcesContent":["const mongoose = require(\"mongoose\");\nconst fetch = require(\"node-fetch\");\nvar parser = require(\"xml2json\");\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nrequire(\"dotenv/config\");\nconst sgMail = require(\"@sendgrid/mail\");\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\nconst {\n  loginValidation,\n  registerValidation,\n  resetPasswordValidation,\n} = require(\"../validation/validation\");\n\nlet YoutubeLink;\ntry {\n  YoutubeLink = mongoose.model(\"YoutubeLinks\");\n} catch {\n  YoutubeLink = require(\"../models/YoutubeLinks\");\n}\n\nlet User;\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n}\n\nlet Article;\ntry {\n  Article = mongoose.model(\"Articles\");\n} catch {\n  Article = require(\"../models/Articles\");\n}\n\nexport const resolvers = {\n  Query: {\n    youtubeLinks: async () => await YoutubeLink.find({}).sort(\"-date\"),\n\n    podcasts: async () =>\n      await fetch(`https://anchor.fm/s/333e122c/podcast/rss`)\n        .then((response) => response.text())\n        .then((data) => {\n          let json = JSON.parse(parser.toJson(data, { reversible: false }));\n          return json.rss.channel.item.map((element) => {\n            const text = element[\"description\"]\n              .replace(/<[^>]+>/g, \"\")\n              .replace(/&nbsp;/, \"\");\n            return {\n              title: element[\"title\"],\n              by: element[\"dc:creator\"],\n              link: element[\"enclosure\"][\"url\"],\n              date: element[\"pubDate\"],\n              image: element[\"itunes:image\"][\"href\"],\n              description: text.substring(0, text.indexOf(\"---\")),\n            };\n          });\n        }),\n\n    isLoggedIn: async (parent, args, ctx) => {\n      const { authData } = ctx;\n      if (!authData) {\n        throw Error(\"Please login to proceed\");\n      }\n\n      try {\n        const user = await User.findById(authData._id);\n        return user;\n      } catch (err) {\n        throw Error(err.message);\n      }\n    },\n\n    login: async (parent, args, ctx) => {\n      const { error } = loginValidation(args);\n      if (error) {\n        const toReturn = error.details[0].message\n          .replace('\"email\"', \"Email\")\n          .replace('\"password\"', \"Password\");\n        throw Error(toReturn);\n      }\n      const { cookie } = ctx;\n      const { email, password } = args;\n      const user = await User.findOne({ email: email });\n\n      if (!user) throw Error(\"The email or password is incorrect\");\n\n      const validPass = await bcrypt.compare(password, user.password);\n      if (!validPass) throw Error(\"The email or password is incorrect\");\n\n      const token = jwt.sign(\n        { _id: user._id, tokenCreated: new Date() },\n        process.env.TOKEN_SECRET\n      );\n      cookie(\"token\", token, {\n        path: \"/\",\n        httpOnly: true,\n        sameSite: \"strict\",\n      });\n      return { token: token };\n    },\n\n    logout: (parent, args, ctx) => {\n      try {\n        const { cookie } = ctx;\n        cookie(\"token\", \"deleted\", {\n          path: \"/\",\n          httpOnly: true,\n          maxAge: 0,\n          sameSite: \"strict\",\n        });\n      } catch {\n        return false;\n      }\n      return true;\n    },\n\n    forgotPassword: async (parent, args, ctx) => {\n      const { error } = resetPasswordValidation(args);\n      if (error) {\n        const toReturn = error.details[0].message.replace('\"email\"', \"Email\");\n        throw Error(toReturn);\n      }\n\n      await User.findOne({ email: args.email }, async (err, user) => {\n        if (err || !user) {\n          if (err) {\n            throw Error(err.message);\n          } else if (!user) {\n            throw Error(\"Cannot find account matching given email\");\n          }\n        } else {\n          const secret = `${user.password}-${user.updatedAt}`;\n          const token = jwt.sign({ id: user._id, email: user.email }, secret);\n          const passwordResetLink =\n            process.env.NODE_ENV === \"production\"\n              ? `www.thefalseninepodcast.com/resetpassword?id=${user._id}&token=${token}`\n              : `localhost:3000/resetpassword?id=${user._id}&token=${token}`;\n\n          const msg = {\n            from: `The False 9 Podcast <${process.env.EMAIL}>`,\n            to: user.email,\n            subject: \"Password Reset Link\",\n            text: `Password Reset Link: ${passwordResetLink}`,\n          };\n\n          sgMail\n            .send(msg)\n            .then(() => {\n              console.log(\"Email sent\");\n            })\n            .catch((error) => {\n              console.error(error);\n              throw Error(error.message);\n            });\n        }\n      });\n      return true;\n    },\n\n    articles: async (parent, args, ctx) => {\n      let user;\n      const { authData } = ctx;\n      if (authData) {\n        try {\n          user = await User.findById(authData._id);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n\n      let query;\n      if (user) {\n        if (user.isModerator) {\n          query = Article.find({})\n            .select(\"_id title author date image authorId isApproved\")\n            .sort(\"-date\");\n        } else {\n          query = Article.find({\n            $or: [{ isApproved: true }, { authorId: user._id }],\n          })\n            .select(\"_id title author date image authorId isApproved\")\n            .sort(\"-date\");\n        }\n      } else {\n        query = Article.find({})\n          .where(\"isApproved\")\n          .equals(true)\n          .select(\"_id title author date image authorId isApproved\")\n          .sort(\"-date\");\n      }\n      try {\n        const data = await query.exec();\n        const toReturn = data.map((item) => ({\n          ...item,\n          content: JSON.stringify(item.content.toJson()),\n        }));\n        console.log(toReturn);\n        return toReturn;\n        // return data.map(item => ({ ...item, content: JSON.stringify(item.content) }));\n      } catch (err) {\n        throw Error(err.message);\n      }\n    },\n  },\n\n  Mutation: {\n    register: async (parent, args, ctx) => {\n      const { error } = registerValidation(args);\n      if (error) {\n        const toReturn = error.details[0].message\n          .replace('\"firstName\"', \"First Name\")\n          .replace('\"lastName\"', \"Last Name\")\n          .replace('\"email\"', \"Email\")\n          .replace('\"password\"', \"Password\");\n        throw Error(toReturn);\n      }\n\n      const emailExists = await User.findOne({ email: args.email });\n\n      if (emailExists) throw Error(\"Email already exists\");\n\n      const salt = await bcrypt.genSalt(10);\n      const hashPassword = await bcrypt.hash(args.password, salt);\n\n      const user = new User({\n        firstName: args.firstName,\n        lastName: args.lastName,\n        email: args.email,\n        password: hashPassword,\n        isModerator: false,\n        isSubscribed: args.isSubscribed || false,\n      });\n\n      try {\n        const savedUser = await user.save();\n        return savedUser;\n      } catch (err) {\n        throw Error(err.message);\n      }\n    },\n\n    subscribe: async (parent, args, ctx) => {\n      const { authData } = ctx;\n      if (!authData) {\n        throw Error(\"Please login to proceed\");\n      }\n\n      try {\n        const user = await User.findById(authData._id);\n        user.isSubscribed = args.isSubscribed;\n        return await user.save();\n      } catch (err) {\n        throw Error(err.message);\n      }\n    },\n\n    resetPassword: async (parent, args, ctx) => {\n      let savedUser;\n      try {\n        const user = await User.findById(args._id);\n        const secret = `${user.password}-${user.updatedAt}`;\n        const verified = jwt.verify(args.token, secret);\n        if (verified) {\n          const salt = await bcrypt.genSalt(10);\n          const hashPassword = await bcrypt.hash(args.password, salt);\n          user.password = hashPassword;\n          savedUser = await user.save();\n        }\n      } catch (err) {\n        throw Error(err.message);\n      }\n      return savedUser;\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}
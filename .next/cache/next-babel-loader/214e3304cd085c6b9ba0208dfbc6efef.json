{"ast":null,"code":"import connectDb from \"../middlewares/dbMiddleware.js\";\n\nrequire(\"dotenv/config\");\n\nconst bcrypt = require(\"bcryptjs\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst mongoose = require(\"mongoose\");\n\nlet User;\n\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n}\n\nconst handler = async (req, res) => {\n  await User.findById(req.body.id, async (err, user) => {\n    if (err) {\n      res.send(err);\n    } else {\n      const secret = `${user.password}-${user.updatedAt}`;\n\n      try {\n        const verified = jwt.verify(req.body.token, secret);\n\n        if (verified) {\n          const salt = await bcrypt.genSalt(10);\n          const hashPassword = await bcrypt.hash(req.body.password, salt);\n          user.password = hashPassword;\n          await user.save((error, data) => {\n            if (error) {\n              res.send(error);\n            } else {\n              res.json(data);\n            }\n          });\n        }\n      } catch (err) {\n        res.status(400).send({\n          error: \"Invalid Token\"\n        });\n      }\n    }\n  });\n};\n\nexport default connectDb(handler);","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/auth/resetpassword.js"],"names":["connectDb","require","bcrypt","jwt","mongoose","User","model","handler","req","res","findById","body","id","err","user","send","secret","password","updatedAt","verified","verify","token","salt","genSalt","hashPassword","hash","save","error","data","json","status"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gCAAtB;;AACAC,OAAO,CAAC,eAAD,CAAP;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAII,IAAJ;;AACA,IAAI;AACFA,EAAAA,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAe,OAAf,CAAP;AACD,CAFD,CAEE,MAAM;AACND,EAAAA,IAAI,GAAGJ,OAAO,CAAC,iBAAD,CAAd;AACD;;AAED,MAAMM,OAAO,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAChC,QAAMJ,IAAI,CAACK,QAAL,CAAcF,GAAG,CAACG,IAAJ,CAASC,EAAvB,EAA2B,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AAClD,QAAID,GAAJ,EAAS;AACPJ,MAAAA,GAAG,CAACM,IAAJ,CAASF,GAAT;AACD,KAFD,MAEO;AACL,YAAMG,MAAM,GAAI,GAAEF,IAAI,CAACG,QAAS,IAAGH,IAAI,CAACI,SAAU,EAAlD;;AAEA,UAAI;AACF,cAAMC,QAAQ,GAAGhB,GAAG,CAACiB,MAAJ,CAAWZ,GAAG,CAACG,IAAJ,CAASU,KAApB,EAA2BL,MAA3B,CAAjB;;AACA,YAAIG,QAAJ,EAAc;AACZ,gBAAMG,IAAI,GAAG,MAAMpB,MAAM,CAACqB,OAAP,CAAe,EAAf,CAAnB;AACA,gBAAMC,YAAY,GAAG,MAAMtB,MAAM,CAACuB,IAAP,CAAYjB,GAAG,CAACG,IAAJ,CAASM,QAArB,EAA+BK,IAA/B,CAA3B;AACAR,UAAAA,IAAI,CAACG,QAAL,GAAgBO,YAAhB;AACA,gBAAMV,IAAI,CAACY,IAAL,CAAU,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAC/B,gBAAID,KAAJ,EAAW;AACTlB,cAAAA,GAAG,CAACM,IAAJ,CAASY,KAAT;AACD,aAFD,MAEO;AACLlB,cAAAA,GAAG,CAACoB,IAAJ,CAASD,IAAT;AACD;AACF,WANK,CAAN;AAOD;AACF,OAdD,CAcE,OAAOf,GAAP,EAAY;AACZJ,QAAAA,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB;AAAEY,UAAAA,KAAK,EAAE;AAAT,SAArB;AACD;AACF;AACF,GAxBG,CAAN;AAyBH,CA1BD;;AA4BA,eAAe3B,SAAS,CAACO,OAAD,CAAxB","sourcesContent":["import connectDb from \"../middlewares/dbMiddleware.js\";\nrequire(\"dotenv/config\");\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst mongoose = require(\"mongoose\");\nlet User;\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n}\n\nconst handler = async (req, res) => {\n    await User.findById(req.body.id, async (err, user) => {\n        if (err) {\n          res.send(err);\n        } else {\n          const secret = `${user.password}-${user.updatedAt}`;\n    \n          try {\n            const verified = jwt.verify(req.body.token, secret);\n            if (verified) {\n              const salt = await bcrypt.genSalt(10);\n              const hashPassword = await bcrypt.hash(req.body.password, salt);\n              user.password = hashPassword;\n              await user.save((error, data) => {\n                if (error) {\n                  res.send(error);\n                } else {\n                  res.json(data);\n                }\n              });\n            }\n          } catch (err) {\n            res.status(400).send({ error: \"Invalid Token\" });\n          }\n        }\n      });\n};\n\nexport default connectDb(handler);\n"]},"metadata":{},"sourceType":"module"}
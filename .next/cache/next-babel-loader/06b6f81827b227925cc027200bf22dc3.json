{"ast":null,"code":"const mongoose = require(\"mongoose\");\n\nconst fetch = require(\"node-fetch\");\n\nvar parser = require(\"xml2json\");\n\nlet YoutubeLink;\n\ntry {\n  YoutubeLink = mongoose.model(\"YoutubeLinks\");\n} catch {\n  YoutubeLink = require(\"../models/YoutubeLinks\");\n}\n\nexport const resolvers = {\n  Query: {\n    youtubeLinks: () => YoutubeLink.find({}).sort(\"-date\"),\n    podcasts: () => {\n      fetch(`https://anchor.fm/s/333e122c/podcast/rss`).then(response => response.text()).then(data => {\n        let json = JSON.parse(parser.toJson(data, {\n          reversible: false\n        }));\n        return json.rss.channel.item.map(element => {\n          const text = element[\"description\"].replace(/<[^>]+>/g, '').replace(/&nbsp;/, '');\n          return {\n            \"title\": element[\"title\"],\n            \"by\": element[\"dc:creator\"],\n            \"link\": element[\"enclosure\"][\"url\"],\n            \"date\": element[\"pubDate\"],\n            \"image\": element[\"itunes:image\"][\"href\"],\n            \"description\": text.substring(0, text.indexOf(\"---\"))\n          };\n        });\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/graphql/resolvers.js"],"names":["mongoose","require","fetch","parser","YoutubeLink","model","resolvers","Query","youtubeLinks","find","sort","podcasts","then","response","text","data","json","JSON","parse","toJson","reversible","rss","channel","item","map","element","replace","substring","indexOf"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAIG,WAAJ;;AACA,IAAI;AACFA,EAAAA,WAAW,GAAGJ,QAAQ,CAACK,KAAT,CAAe,cAAf,CAAd;AACD,CAFD,CAEE,MAAM;AACND,EAAAA,WAAW,GAAGH,OAAO,CAAC,wBAAD,CAArB;AACD;;AAED,OAAO,MAAMK,SAAS,GAAG;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EAAE,MAAMJ,WAAW,CAACK,IAAZ,CAAiB,EAAjB,EAAqBC,IAArB,CAA0B,OAA1B,CADf;AAELC,IAAAA,QAAQ,EAAE,MAAM;AACdT,MAAAA,KAAK,CAAE,0CAAF,CAAL,CACGU,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACZ,YAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWf,MAAM,CAACgB,MAAP,CAAcJ,IAAd,EAAoB;AAACK,UAAAA,UAAU,EAAE;AAAb,SAApB,CAAX,CAAX;AACA,eAAOJ,IAAI,CAACK,GAAL,CAASC,OAAT,CAAiBC,IAAjB,CAAsBC,GAAtB,CAA2BC,OAAD,IAAa;AAAC,gBAAMX,IAAI,GAAGW,OAAO,CAAC,aAAD,CAAP,CAAuBC,OAAvB,CAA+B,UAA/B,EAA2C,EAA3C,EAA+CA,OAA/C,CAAuD,QAAvD,EAAiE,EAAjE,CAAb;AAAmF,iBAAO;AACvI,qBAASD,OAAO,CAAC,OAAD,CADuH;AAEvI,kBAAMA,OAAO,CAAC,YAAD,CAF0H;AAGvI,oBAAQA,OAAO,CAAC,WAAD,CAAP,CAAqB,KAArB,CAH+H;AAIvI,oBAAQA,OAAO,CAAC,SAAD,CAJwH;AAKvI,qBAASA,OAAO,CAAC,cAAD,CAAP,CAAwB,MAAxB,CAL8H;AAMvI,2BAAeX,IAAI,CAACa,SAAL,CAAe,CAAf,EAAkBb,IAAI,CAACc,OAAL,CAAa,KAAb,CAAlB;AANwH,WAAP;AAQjI,SARM,CAAP;AAUD,OAdL;AAeD;AAlBI;AADgB,CAAlB","sourcesContent":["const mongoose = require(\"mongoose\");\nconst fetch = require(\"node-fetch\");\nvar parser = require(\"xml2json\");\n\nlet YoutubeLink;\ntry {\n  YoutubeLink = mongoose.model(\"YoutubeLinks\");\n} catch {\n  YoutubeLink = require(\"../models/YoutubeLinks\");\n}\n\nexport const resolvers = {\n  Query: {\n    youtubeLinks: () => YoutubeLink.find({}).sort(\"-date\"),\n    podcasts: () => {\n      fetch(`https://anchor.fm/s/333e122c/podcast/rss`)\n        .then((response) => response.text())\n        .then((data) => {\n            let json = JSON.parse(parser.toJson(data, {reversible: false}));\n            return json.rss.channel.item.map((element) => {const text = element[\"description\"].replace(/<[^>]+>/g, '').replace(/&nbsp;/, ''); return {\n              \"title\": element[\"title\"],\n              \"by\": element[\"dc:creator\"],\n              \"link\": element[\"enclosure\"][\"url\"],\n              \"date\": element[\"pubDate\"],\n              \"image\": element[\"itunes:image\"][\"href\"],\n              \"description\": text.substring(0, text.indexOf(\"---\"))\n            }\n            })\n            \n          });\n    }\n},\n};\n"]},"metadata":{},"sourceType":"module"}
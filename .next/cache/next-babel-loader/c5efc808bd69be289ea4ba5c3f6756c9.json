{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation postComment($_id: String!, content: String!){\\n    postComment(_id: $_id, content: $content){\\n      _id\\n      date\\n      image\\n      title\\n      author\\n      authorId\\n      isApproved\\n      content\\n      comments {\\n        _id\\n        authorId\\n        author\\n        content\\n        createdAt\\n        updatedAt\\n      }\\n    }\\n  }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query articleQuery($_id: String!) {\\n    article(_id: $_id) {\\n      _id\\n      date\\n      image\\n      title\\n      author\\n      authorId\\n      isApproved\\n      content\\n      comments {\\n        _id\\n        authorId\\n        author\\n        content\\n        createdAt\\n        updatedAt\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport LargeCard from \"../../components/Cards/LargeCard/LargeCard.js\";\nimport Page from \"../../components/Page/Page\";\nimport styles from \"../../components/Page/Page.module.css\";\nimport Html from \"slate-html-serializer\";\nimport { getRules } from \"../../components/TextEditor/TextEditor\";\nimport CommentBar from \"../../components/Comment/CommentBar\";\nimport axios from \"axios\";\nimport { LoginContext } from \"../../contexts/reducers/loginContext\";\nimport { SocketContext } from \"../../contexts/reducers/socketContext\";\nimport { Card } from \"../../components/Cards/Card.js\";\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery, useMutation, NetworkStatus } from \"@apollo/client\";\nexport var __N_SSP = true;\nexport var ARTICLE_QUERY = gql(_templateObject());\nexport var POST_COMMENT_MUTATION = gql(_templateObject2());\n\nvar ArticlePage = function ArticlePage(props) {\n  _s();\n\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useQuery = useQuery(ARTICLE_QUERY, {\n    variables: {\n      _id: id\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore,\n      data = _useQuery.data,\n      networkStatus = _useQuery.networkStatus,\n      refetch = _useQuery.refetch;\n\n  var loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  var rules = getRules(styles);\n  var html = new Html({\n    rules: rules\n  });\n  var article;\n\n  if (loading && !loadingArticle) {\n    article = {};\n  } else {\n    article = _objectSpread(_objectSpread({}, data.article), {}, {\n      date: JSON.parse(data.article.date),\n      content: data.article.content ? html.serialize(JSON.parse(data.article.content)) : \"<p></p>\",\n      comments: data.article.comments.map(function (comment) {\n        return _objectSpread(_objectSpread({}, comment), {}, {\n          content: JSON.parse(comment.content),\n          createdAt: JSON.parse(comment.createdAt),\n          updatedAt: JSON.parse(comment.updatedAt)\n        });\n      })\n    });\n  }\n\n  var _useMutation = useMutation(POST_COMMENT_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      savePostedComments = _useMutation2[0],\n      _ = _useMutation2[1]._; // const socket = useSelector((state) => state.network.socket);\n\n\n  var _useContext = useContext(LoginContext),\n      loginState = _useContext[0],\n      loginDispatch = _useContext[1];\n\n  var _useContext2 = useContext(SocketContext),\n      socketState = _useContext2[0],\n      socketDispatch = _useContext2[1];\n\n  var socket = socketState.socket;\n  var user = loginState.user;\n  useEffect(function () {\n    window.scrollTo(0, 0);\n  }, []); // useEffect(() => {\n  //   const getArticle = async () => {\n  //     const res = await fetch(`/api/articles/page?id=${id}`);\n  //     const json = await res.json();\n  //     const fetchedArticle = {\n  //       ...article,\n  //       comments: json.comments,\n  //     };\n  //     setArticle(fetchedArticle);\n  //   };\n  //   if (socket) {\n  //     socket.on(\"comments changed\", (data) => {\n  //       console.log(\"Comments changed\");\n  //       if (data.articleId === id) {\n  //         try {\n  //           getArticle();\n  //         } catch (error) {\n  //           console.log(error);\n  //         }\n  //       }\n  //     });\n  //   }\n  // }, [socket]);\n\n  var postComment = function postComment(comment) {\n    // const toPost = { id: id.toString(), content: comment };\n    // const options = {\n    //   headers: { \"Content-Type\": \"application/json\" },\n    // };\n    // axios\n    //   .post(\"/api/articles/postcomment\", JSON.stringify(toPost), options)\n    //   .then((res) => {\n    //     alert(\"Comment Posted\");\n    //   })\n    //   .catch((err) => {\n    //     if (err.response.status === 401 || err.response.status === 400) {\n    //       alert(err.response.data.error);\n    //     } else if (err.response.status !== 200) {\n    //       throw Error(err);\n    //     }\n    //   });\n    savePostedComments({\n      variables: {\n        _id: id.toString(),\n        content: JSON.stringify(comment)\n      }\n    });\n  };\n\n  var isEditable = user && (user.isModerator || user._id === article.authorId);\n  var isPendingApproval = !article.isApproved;\n\n  var headline = __jsx(\"div\", {\n    className: styles[\"headline\"],\n    style: isEditable || isPendingApproval ? {\n      marginTop: \"36px\"\n    } : {\n      marginTop: \"0px\"\n    }\n  }, __jsx(LargeCard, {\n    title: article.title,\n    author: article.author,\n    date: article.date,\n    isApproved: article.isApproved,\n    contentType: Card.ContentType[\"article-internal\"],\n    link: \"article?id=\".concat(id),\n    isEditable: user && (user.isModerator || user._id === article.authorId),\n    image: article.image,\n    onClick: function onClick() {}\n  }));\n\n  var contents = __jsx(\"div\", null, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: article.content\n    }\n  }), __jsx(\"div\", {\n    className: styles[\"main-pane-item\"]\n  }, __jsx(CommentBar, {\n    postComment: postComment,\n    comments: article.comments\n  })));\n\n  return __jsx(Page // sidebarFixTopOffset={35 + 644}\n  , {\n    sidebarFixTopOffset: 0,\n    headline: headline,\n    mainPane: contents\n  });\n};\n\n_s(ArticlePage, \"TIgs/TKNbR8LOCgHigqgQbbwKA0=\", false, function () {\n  return [useRouter, useQuery, useMutation];\n});\n\n_c = ArticlePage;\nexport default ArticlePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArticlePage\");","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/article/index.js"],"names":["React","useState","useEffect","useContext","LargeCard","Page","styles","Html","getRules","CommentBar","axios","LoginContext","SocketContext","Card","useRouter","gql","useQuery","useMutation","NetworkStatus","ARTICLE_QUERY","POST_COMMENT_MUTATION","ArticlePage","props","router","id","query","variables","_id","notifyOnNetworkStatusChange","loading","error","fetchMore","data","networkStatus","refetch","loadingArticle","rules","html","article","date","JSON","parse","content","serialize","comments","map","comment","createdAt","updatedAt","savePostedComments","_","loginState","loginDispatch","socketState","socketDispatch","socket","user","window","scrollTo","postComment","toString","stringify","isEditable","isModerator","authorId","isPendingApproval","isApproved","headline","marginTop","title","author","ContentType","image","contents","__html"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport LargeCard from \"../../components/Cards/LargeCard/LargeCard.js\";\nimport Page from \"../../components/Page/Page\";\nimport styles from \"../../components/Page/Page.module.css\";\nimport Html from \"slate-html-serializer\";\nimport { getRules } from \"../../components/TextEditor/TextEditor\";\nimport CommentBar from \"../../components/Comment/CommentBar\";\nimport axios from \"axios\";\nimport { LoginContext } from \"../../contexts/reducers/loginContext\";\nimport { SocketContext } from \"../../contexts/reducers/socketContext\";\nimport { Card } from \"../../components/Cards/Card.js\";\nimport { useRouter } from \"next/router\";\nimport { initializeApollo, addApolloState } from \"../../lib/apolloClient\";\nimport { gql, useQuery, useMutation, NetworkStatus } from \"@apollo/client\";\n\nexport const ARTICLE_QUERY = gql`\n  query articleQuery($_id: String!) {\n    article(_id: $_id) {\n      _id\n      date\n      image\n      title\n      author\n      authorId\n      isApproved\n      content\n      comments {\n        _id\n        authorId\n        author\n        content\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\n\nexport const POST_COMMENT_MUTATION = gql`\n  mutation postComment($_id: String!, content: String!){\n    postComment(_id: $_id, content: $content){\n      _id\n      date\n      image\n      title\n      author\n      authorId\n      isApproved\n      content\n      comments {\n        _id\n        authorId\n        author\n        content\n        createdAt\n        updatedAt\n      }\n    }\n  }\n  `;\nconst ArticlePage = (props) => {\n  const router = useRouter();\n  const { id } = router.query;\n  const { loading, error, fetchMore, data, networkStatus, refetch } = useQuery(\n    ARTICLE_QUERY,\n    {\n      variables: { _id: id },\n      notifyOnNetworkStatusChange: true,\n    }\n  );\n\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  const rules = getRules(styles);\n  const html = new Html({ rules });\n  let article;\n  if (loading && !loadingArticle) {\n    article = {};\n  } else {\n    article = {\n      ...data.article,\n      date: JSON.parse(data.article.date),\n      content: data.article.content\n        ? html.serialize(JSON.parse(data.article.content))\n        : `<p></p>`,\n      comments: data.article.comments.map((comment) => ({\n        ...comment,\n        content: JSON.parse(comment.content),\n        createdAt: JSON.parse(comment.createdAt),\n        updatedAt: JSON.parse(comment.updatedAt),\n      })),\n    };\n  }\n\n  const [savePostedComments, { _ }] = useMutation(POST_COMMENT_MUTATION);\n\n  // const socket = useSelector((state) => state.network.socket);\n  const [loginState, loginDispatch] = useContext(LoginContext);\n  const [socketState, socketDispatch] = useContext(SocketContext);\n  const socket = socketState.socket;\n  const user = loginState.user;\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  // useEffect(() => {\n  //   const getArticle = async () => {\n  //     const res = await fetch(`/api/articles/page?id=${id}`);\n  //     const json = await res.json();\n  //     const fetchedArticle = {\n  //       ...article,\n  //       comments: json.comments,\n  //     };\n  //     setArticle(fetchedArticle);\n  //   };\n\n  //   if (socket) {\n  //     socket.on(\"comments changed\", (data) => {\n  //       console.log(\"Comments changed\");\n  //       if (data.articleId === id) {\n  //         try {\n  //           getArticle();\n  //         } catch (error) {\n  //           console.log(error);\n  //         }\n  //       }\n  //     });\n  //   }\n  // }, [socket]);\n\n  const postComment = (comment) => {\n    // const toPost = { id: id.toString(), content: comment };\n    // const options = {\n    //   headers: { \"Content-Type\": \"application/json\" },\n    // };\n\n    // axios\n    //   .post(\"/api/articles/postcomment\", JSON.stringify(toPost), options)\n    //   .then((res) => {\n    //     alert(\"Comment Posted\");\n    //   })\n    //   .catch((err) => {\n    //     if (err.response.status === 401 || err.response.status === 400) {\n    //       alert(err.response.data.error);\n    //     } else if (err.response.status !== 200) {\n    //       throw Error(err);\n    //     }\n    //   });\n\n    savePostedComments({variables: {_id: id.toString(), content: JSON.stringify(comment)}})\n  };\n\n  const isEditable =\n    user && (user.isModerator || user._id === article.authorId);\n  const isPendingApproval = !article.isApproved;\n\n  const headline = (\n    <div\n      className={styles[\"headline\"]}\n      style={\n        isEditable || isPendingApproval\n          ? { marginTop: \"36px\" }\n          : { marginTop: \"0px\" }\n      }\n    >\n      <LargeCard\n        title={article.title}\n        author={article.author}\n        date={article.date}\n        isApproved={article.isApproved}\n        contentType={Card.ContentType[\"article-internal\"]}\n        link={`article?id=${id}`}\n        isEditable={user && (user.isModerator || user._id === article.authorId)}\n        image={article.image}\n        onClick={() => {}}\n      />\n    </div>\n  );\n\n  const contents = (\n    <div>\n      <div dangerouslySetInnerHTML={{ __html: article.content }}></div>\n      <div className={styles[\"main-pane-item\"]}>\n        <CommentBar postComment={postComment} comments={article.comments} />\n      </div>\n    </div>\n  );\n\n  return (\n    <Page\n      // sidebarFixTopOffset={35 + 644}\n      sidebarFixTopOffset={0}\n      headline={headline}\n      mainPane={contents}\n    />\n  );\n};\n\nexport async function getServerSideProps({ query }) {\n  // const rules = getRules(styles);\n  // const html = new Html({ rules });\n\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: ARTICLE_QUERY,\n    variables: { _id: query.id },\n  });\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n}\n\nexport default ArticlePage;\n"]},"metadata":{},"sourceType":"module"}
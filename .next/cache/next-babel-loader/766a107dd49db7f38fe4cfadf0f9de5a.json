{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, createContext } from \"react\";\nexport var VideoPlayerContext = /*#__PURE__*/createContext();\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"SET_VIDEOPLAYER_SELECTED\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: action.payload\n      });\n\n    case \"SET_VIDEOPLAYER_IS_PLAYING\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPlaying: action.payload\n      });\n\n    case \"SET_VIDEOPLAYER_YOUTUBE_VIDEOS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        youtubeVideos: action.payload\n      });\n\n    case \"PLAY_VIDEO\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: action.payload,\n        isPlaying: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport var VideoPlayerContextProvider = function VideoPlayerContextProvider(props) {\n  _s();\n\n  var _useReducer = useReducer(reducer, props.initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  return __jsx(VideoPlayerContext.Provider, {\n    value: [state, dispatch]\n  }, props.children);\n};\n\n_s(VideoPlayerContextProvider, \"8JKtemTJoP7B1o5k83UXlnrxkPQ=\");\n\n_c = VideoPlayerContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPlayerContextProvider\");","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/contexts/reducers/videoPlayerContext.js"],"names":["React","useReducer","createContext","VideoPlayerContext","reducer","state","action","type","selected","payload","isPlaying","youtubeVideos","VideoPlayerContextProvider","props","initialState","dispatch","children"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;AAEA,OAAO,IAAMC,kBAAkB,gBAAGD,aAAa,EAAxC;;AAEP,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,0BAAL;AACE,6CAAYF,KAAZ;AAAmBG,QAAAA,QAAQ,EAAEF,MAAM,CAACG;AAApC;;AACF,SAAK,4BAAL;AACE,6CAAYJ,KAAZ;AAAmBK,QAAAA,SAAS,EAAEJ,MAAM,CAACG;AAArC;;AACF,SAAK,gCAAL;AACE,6CAAYJ,KAAZ;AAAmBM,QAAAA,aAAa,EAAEL,MAAM,CAACG;AAAzC;;AACF,SAAK,YAAL;AACE,6CAAYJ,KAAZ;AAAmBG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAApC;AAA6CC,QAAAA,SAAS,EAAE;AAAxD;;AACF;AACE,aAAOL,KAAP;AAVJ;AAYD,CAbD;;AAeA,OAAO,IAAMO,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,KAAD,EAAW;AAAA;;AAAA,oBACzBZ,UAAU,CAACG,OAAD,EAAUS,KAAK,CAACC,YAAhB,CADe;AAAA,MAC5CT,KAD4C;AAAA,MACrCU,QADqC;;AAGnD,SACE,MAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE,CAACV,KAAD,EAAQU,QAAR;AAApC,KACGF,KAAK,CAACG,QADT,CADF;AAKD,CARM;;GAAMJ,0B;;KAAAA,0B","sourcesContent":["import React, { useReducer, createContext } from \"react\";\n\nexport const VideoPlayerContext = createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_VIDEOPLAYER_SELECTED\":\n      return { ...state, selected: action.payload };\n    case \"SET_VIDEOPLAYER_IS_PLAYING\":\n      return { ...state, isPlaying: action.payload };\n    case \"SET_VIDEOPLAYER_YOUTUBE_VIDEOS\":\n      return { ...state, youtubeVideos: action.payload };\n    case \"PLAY_VIDEO\":\n      return { ...state, selected: action.payload, isPlaying: true };\n    default:\n      return state;\n  }\n};\n\nexport const VideoPlayerContextProvider = (props) => {\n  const [state, dispatch] = useReducer(reducer, props.initialState);\n\n  return (\n    <VideoPlayerContext.Provider value={[state, dispatch]}>\n      {props.children}\n    </VideoPlayerContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
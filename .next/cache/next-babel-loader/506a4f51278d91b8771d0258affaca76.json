{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Card } from \"../components/Cards/Card.js\";\nimport App from \"next/app\";\nimport AppGlobal from \"../components/App/App\";\nimport Router from \"next/router\";\nimport NProgress from \"nprogress\";\nimport \"../styles/loadingscreenspinner.css\";\nimport { AudioPlayerContextProvider } from \"../contexts/reducers/audioPlayerContext\";\nimport { DeviceContextProvider } from \"../contexts/reducers/deviceContext\";\nimport { HeaderContextProvider } from \"../contexts/reducers/headerContext\";\nimport { LoginContextProvider } from \"../contexts/reducers/loginContext\";\nimport { VideoPlayerContextProvider } from \"../contexts/reducers/videoPlayerContext\";\nimport { SocketContextProvider } from \"../contexts/reducers/socketContext\";\nimport { ApolloProvider, gql } from \"@apollo/client\";\nimport { useApollo, initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { ALL_PODCASTS_QUERY } from \"../components/AudioPlayer/AudioPlayer\";\nexport const ALL_YOUTUBE_LINKS_QUERY = gql`\n  query allYoutubeLinksQuery {\n    youtubeLinks {\n      _id\n      title\n      id\n      date\n    }\n  }\n`;\nNProgress.configure({\n  showSpinner: true\n});\n\nRouter.onRouteChangeStart = () => {\n  NProgress.start();\n};\n\nRouter.onRouteChangeComplete = () => {\n  NProgress.done();\n};\n\nRouter.onRouteChangeError = () => {\n  NProgress.done();\n};\n\nconst MyApp = ({\n  Component,\n  pageProps\n}) => {\n  const apolloClient = useApollo(pageProps);\n  return __jsx(ApolloProvider, {\n    client: apolloClient\n  }, __jsx(AudioPlayerContextProvider, null, __jsx(DeviceContextProvider, null, __jsx(HeaderContextProvider, null, __jsx(LoginContextProvider, {\n    initialState: pageProps.loginInitialState\n  }, __jsx(VideoPlayerContextProvider, {\n    initialState: pageProps.videoPlayerInitialState\n  }, __jsx(SocketContextProvider, null, __jsx(AppGlobal, null, __jsx(Component, pageProps)))))))));\n};\n\nMyApp.getInitialProps = async ctx => {\n  const apolloClient = initializeApollo();\n  const appProps = await App.getInitialProps(ctx);\n  appProps.pageProps.loginInitialState = {\n    isLoggedIn: false,\n    user: null\n  };\n  let curVideos = [];\n\n  try {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_DOMAIN}/api/youtube`);\n    const json = await res.json();\n    curVideos = json[\"items\"].map((item, index) => {\n      return {\n        index: index,\n        id: item.id,\n        title: item.title,\n        image: `https://img.youtube.com/vi/${item.id}/hqdefault.jpg`,\n        link: `https://www.youtube.com/embed/${item.id}?rel=0&start=0&autoplay=1`,\n        date: item.date,\n        contentType: Card.ContentType[\"video-youtube\"]\n      };\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n\n  appProps.pageProps.videoPlayerInitialState = {\n    selected: \"https://www.youtube.com/embed/vpWIvnnWxaY?rel=0&start=0&autoplay=1\",\n    isPlaying: false,\n    youtubeVideos: curVideos\n  };\n  await apolloClient.query({\n    query: ALL_PODCASTS_QUERY\n  });\n  await apolloClient.query({\n    query: ALL_YOUTUBE_LINKS_QUERY\n  });\n  return addApolloState(apolloClient, _objectSpread({}, appProps));\n};\n\nexport default MyApp;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/_app.js"],"names":["React","Card","App","AppGlobal","Router","NProgress","AudioPlayerContextProvider","DeviceContextProvider","HeaderContextProvider","LoginContextProvider","VideoPlayerContextProvider","SocketContextProvider","ApolloProvider","gql","useApollo","initializeApollo","addApolloState","ALL_PODCASTS_QUERY","ALL_YOUTUBE_LINKS_QUERY","configure","showSpinner","onRouteChangeStart","start","onRouteChangeComplete","done","onRouteChangeError","MyApp","Component","pageProps","apolloClient","loginInitialState","videoPlayerInitialState","getInitialProps","ctx","appProps","isLoggedIn","user","curVideos","res","fetch","process","env","NEXT_PUBLIC_DOMAIN","json","map","item","index","id","title","image","link","date","contentType","ContentType","error","console","log","message","selected","isPlaying","youtubeVideos","query"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Card } from \"../components/Cards/Card.js\";\nimport App from \"next/app\";\nimport AppGlobal from \"../components/App/App\";\nimport Router from \"next/router\";\nimport NProgress from \"nprogress\";\nimport \"../styles/loadingscreenspinner.css\";\nimport { AudioPlayerContextProvider } from \"../contexts/reducers/audioPlayerContext\";\nimport { DeviceContextProvider } from \"../contexts/reducers/deviceContext\";\nimport { HeaderContextProvider } from \"../contexts/reducers/headerContext\";\nimport { LoginContextProvider } from \"../contexts/reducers/loginContext\";\nimport { VideoPlayerContextProvider } from \"../contexts/reducers/videoPlayerContext\";\nimport { SocketContextProvider } from \"../contexts/reducers/socketContext\";\nimport { ApolloProvider, gql } from \"@apollo/client\";\nimport {\n  useApollo,\n  initializeApollo,\n  addApolloState,\n} from \"../lib/apolloClient\";\nimport { ALL_PODCASTS_QUERY } from \"../components/AudioPlayer/AudioPlayer\";\n\nexport const ALL_YOUTUBE_LINKS_QUERY = gql`\n  query allYoutubeLinksQuery {\n    youtubeLinks {\n      _id\n      title\n      id\n      date\n    }\n  }\n`;\n\nNProgress.configure({ showSpinner: true });\n\nRouter.onRouteChangeStart = () => {\n  NProgress.start();\n};\n\nRouter.onRouteChangeComplete = () => {\n  NProgress.done();\n};\n\nRouter.onRouteChangeError = () => {\n  NProgress.done();\n};\n\nconst MyApp = ({ Component, pageProps }) => {\n  const apolloClient = useApollo(pageProps);\n  return (\n    <ApolloProvider client={apolloClient}>\n      <AudioPlayerContextProvider>\n        <DeviceContextProvider>\n          <HeaderContextProvider>\n            <LoginContextProvider initialState={pageProps.loginInitialState}>\n              <VideoPlayerContextProvider\n                initialState={pageProps.videoPlayerInitialState}\n              >\n                <SocketContextProvider>\n                  <AppGlobal>\n                    <Component {...pageProps} />\n                  </AppGlobal>\n                </SocketContextProvider>\n              </VideoPlayerContextProvider>\n            </LoginContextProvider>\n          </HeaderContextProvider>\n        </DeviceContextProvider>\n      </AudioPlayerContextProvider>\n    </ApolloProvider>\n  );\n};\n\nMyApp.getInitialProps = async (ctx) => {\n  const apolloClient = initializeApollo();\n\n  const appProps = await App.getInitialProps(ctx);\n\n  appProps.pageProps.loginInitialState = {\n    isLoggedIn: false,\n    user: null,\n  };\n\n  let curVideos = [];\n\n  try {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_DOMAIN}/api/youtube`);\n    const json = await res.json();\n    curVideos = json[\"items\"].map((item, index) => {\n      return {\n        index: index,\n        id: item.id,\n        title: item.title,\n        image: `https://img.youtube.com/vi/${item.id}/hqdefault.jpg`,\n        link: `https://www.youtube.com/embed/${item.id}?rel=0&start=0&autoplay=1`,\n        date: item.date,\n        contentType: Card.ContentType[\"video-youtube\"],\n      };\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n\n  appProps.pageProps.videoPlayerInitialState = {\n    selected:\n      \"https://www.youtube.com/embed/vpWIvnnWxaY?rel=0&start=0&autoplay=1\",\n    isPlaying: false,\n    youtubeVideos: curVideos,\n  };\n\n  await apolloClient.query({\n    query: ALL_PODCASTS_QUERY,\n  });\n\n  await apolloClient.query({\n    query: ALL_YOUTUBE_LINKS_QUERY,\n  });\n\n  return addApolloState(apolloClient, { ...appProps });\n};\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}
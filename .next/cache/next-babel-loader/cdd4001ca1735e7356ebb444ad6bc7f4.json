{"ast":null,"code":"import connectDb from \"./middlewares/dbMiddleware.js\";\n\nconst fetch = require(\"node-fetch\");\n\nvar parser = require(\"xml2json\");\n\nconst handler = async (req, res) => {\n  await fetch(`https://anchor.fm/s/333e122c/podcast/rss`).then(response => response.text()).then(data => {\n    let json = JSON.parse(parser.toJson(data, {\n      reversible: false\n    })); // res.json(json.rss.channel.item);\n\n    const toReturn = json.rss.channel.item.map(element => {\n      const text = element[\"description\"].replace(/<[^>]+>/g, '').replace(/&nbsp;/, '');\n      return {\n        \"title\": element[\"title\"],\n        \"by\": element[\"dc:creator\"],\n        \"link\": element[\"enclosure\"][\"url\"],\n        \"date\": element[\"pubDate\"],\n        \"image\": element[\"itunes:image\"][\"href\"],\n        \"description\": text.substring(0, text.indexOf(\"---\"))\n      };\n    });\n    res.json({\n      items: toReturn\n    });\n  });\n};\n\nexport default connectDb(handler);","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/podcasts.js"],"names":["connectDb","fetch","require","parser","handler","req","res","then","response","text","data","json","JSON","parse","toJson","reversible","toReturn","rss","channel","item","map","element","replace","substring","indexOf","items"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,+BAAtB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AAIA,MAAME,OAAO,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAML,KAAK,CAAE,0CAAF,CAAL,CACHM,IADG,CACGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADhB,EAEHF,IAFG,CAEGG,IAAD,IAAU;AACZ,QAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWV,MAAM,CAACW,MAAP,CAAcJ,IAAd,EAAoB;AAACK,MAAAA,UAAU,EAAE;AAAb,KAApB,CAAX,CAAX,CADY,CAEZ;;AAEA,UAAMC,QAAQ,GAAGL,IAAI,CAACM,GAAL,CAASC,OAAT,CAAiBC,IAAjB,CAAsBC,GAAtB,CAA2BC,OAAD,IAAa;AAAC,YAAMZ,IAAI,GAAGY,OAAO,CAAC,aAAD,CAAP,CAAuBC,OAAvB,CAA+B,UAA/B,EAA2C,EAA3C,EAA+CA,OAA/C,CAAuD,QAAvD,EAAiE,EAAjE,CAAb;AAAmF,aAAO;AACjJ,iBAASD,OAAO,CAAC,OAAD,CADiI;AAEjJ,cAAMA,OAAO,CAAC,YAAD,CAFoI;AAGjJ,gBAAQA,OAAO,CAAC,WAAD,CAAP,CAAqB,KAArB,CAHyI;AAIjJ,gBAAQA,OAAO,CAAC,SAAD,CAJkI;AAKjJ,iBAASA,OAAO,CAAC,cAAD,CAAP,CAAwB,MAAxB,CALwI;AAMjJ,uBAAeZ,IAAI,CAACc,SAAL,CAAe,CAAf,EAAkBd,IAAI,CAACe,OAAL,CAAa,KAAb,CAAlB;AANkI,OAAP;AAQ3I,KARgB,CAAjB;AAUAlB,IAAAA,GAAG,CAACK,IAAJ,CAAS;AAACc,MAAAA,KAAK,EAAET;AAAR,KAAT;AACD,GAjBC,CAAN;AAkBD,CAnBD;;AAqBA,eAAehB,SAAS,CAACI,OAAD,CAAxB","sourcesContent":["import connectDb from \"./middlewares/dbMiddleware.js\";\nconst fetch = require(\"node-fetch\");\nvar parser = require(\"xml2json\");\n\n\n\nconst handler = async (req, res) => {\n  await fetch(`https://anchor.fm/s/333e122c/podcast/rss`)\n    .then((response) => response.text())\n    .then((data) => {\n        let json = JSON.parse(parser.toJson(data, {reversible: false}));\n        // res.json(json.rss.channel.item);\n\n        const toReturn = json.rss.channel.item.map((element) => {const text = element[\"description\"].replace(/<[^>]+>/g, '').replace(/&nbsp;/, ''); return {\n          \"title\": element[\"title\"],\n          \"by\": element[\"dc:creator\"],\n          \"link\": element[\"enclosure\"][\"url\"],\n          \"date\": element[\"pubDate\"],\n          \"image\": element[\"itunes:image\"][\"href\"],\n          \"description\": text.substring(0, text.indexOf(\"---\"))\n        }\n        })\n        \n        res.json({items: toReturn});\n      });\n};\n\nexport default connectDb(handler)\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport LargeCard from \"../../components/Cards/LargeCard/LargeCard.js\";\nimport Page from \"../../components/Page/Page\";\nimport styles from \"../../components/Page/Page.module.css\";\nimport Html from \"slate-html-serializer\";\nimport { getRules } from \"../../components/TextEditor/TextEditor\";\nimport CommentBar from \"../../components/Comment/CommentBar\";\nimport axios from \"axios\";\nimport { LoginContext } from \"../../contexts/reducers/loginContext\";\nimport { SocketContext } from \"../../contexts/reducers/socketContext\";\nimport { Card } from \"../../components/Cards/Card.js\";\nimport { useRouter } from \"next/router\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nexport const ARTICLE_QUERY = gql`\n  query articleQuery($_id: String!) {\n    article(_id: $_id) {\n      _id\n      date\n      image\n      title\n      author\n      authorId\n      isApproved\n      content\n      comments {\n        _id\n        authorId\n        author\n        content\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\n\nconst ArticlePage = props => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    loading,\n    error,\n    fetchMore,\n    data,\n    networkStatus,\n    refetch\n  } = useQuery(ARTICLES_QUERY, {\n    variables: {\n      _id: id\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  const rules = getRules(styles);\n  const html = new Html({\n    rules\n  });\n  let article;\n\n  if (loading && !loadingArticle) {\n    article = {};\n  } else {\n    article = _objectSpread(_objectSpread({}, data.article), {}, {\n      date: JSON.parse(data.article.date),\n      content: data.article.content ? html.serialize(JSON.parse(data.article.content)) : `<p></p>`,\n      comments: data.article.comments.map(comment => _objectSpread(_objectSpread({}, comment), {}, {\n        content: JSON.parse(comment.content),\n        createdAt: JSON.parse(comment.createdAt),\n        updatedAt: JSON.parse(comment.updatedAt)\n      }))\n    });\n  } // const socket = useSelector((state) => state.network.socket);\n\n\n  const {\n    0: loginState,\n    1: loginDispatch\n  } = useContext(LoginContext);\n  const {\n    0: socketState,\n    1: socketDispatch\n  } = useContext(SocketContext);\n  const socket = socketState.socket;\n  const user = loginState.user; // const [article, setArticle] = useState(props.article);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []); // useEffect(() => {\n  //   const getArticle = async () => {\n  //     const res = await fetch(`/api/articles/page?id=${id}`);\n  //     const json = await res.json();\n  //     const fetchedArticle = {\n  //       ...article,\n  //       comments: json.comments,\n  //     };\n  //     setArticle(fetchedArticle);\n  //   };\n  //   if (socket) {\n  //     socket.on(\"comments changed\", (data) => {\n  //       console.log(\"Comments changed\");\n  //       if (data.articleId === id) {\n  //         try {\n  //           getArticle();\n  //         } catch (error) {\n  //           console.log(error);\n  //         }\n  //       }\n  //     });\n  //   }\n  // }, [socket]);\n\n  const postComment = comment => {\n    const toPost = {\n      id: id.toString(),\n      content: comment\n    };\n    const options = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    axios.post(\"/api/articles/postcomment\", JSON.stringify(toPost), options).then(res => {\n      alert(\"Comment Posted\");\n    }).catch(err => {\n      if (err.response.status === 401 || err.response.status === 400) {\n        alert(err.response.data.error);\n      } else if (err.response.status !== 200) {\n        throw Error(err);\n      }\n    });\n  };\n\n  const isEditable = user && (user.isModerator || user._id === article.authorId);\n  const isPendingApproval = !article.isApproved;\n\n  const headline = __jsx(\"div\", {\n    className: styles[\"headline\"],\n    style: isEditable || isPendingApproval ? {\n      marginTop: \"36px\"\n    } : {\n      marginTop: \"0px\"\n    }\n  }, __jsx(LargeCard, {\n    title: article.title,\n    author: article.author,\n    date: article.date,\n    isApproved: article.isApproved,\n    contentType: Card.ContentType[\"article-internal\"],\n    link: `article?id=${id}`,\n    isEditable: user && (user.isModerator || user._id === article.authorId),\n    image: article.image,\n    onClick: () => {}\n  }));\n\n  const contents = __jsx(\"div\", null, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: article.content\n    }\n  }), __jsx(\"div\", {\n    className: styles[\"main-pane-item\"]\n  }, __jsx(CommentBar, {\n    postComment: postComment,\n    comments: article.comments\n  })));\n\n  return __jsx(Page // sidebarFixTopOffset={35 + 644}\n  , {\n    sidebarFixTopOffset: 0,\n    headline: headline,\n    mainPane: contents\n  });\n};\n\nexport async function getServerSideProps({\n  query\n}) {\n  // const rules = getRules(styles);\n  // const html = new Html({ rules });\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: ARTICLE_QUERY,\n    variables: {\n      _id: query.id\n    }\n  });\n  return addApolloState(apolloClient, {\n    props: {}\n  }); // const res = await fetch(\n  //   `${process.env.NEXT_PUBLIC_DOMAIN}/api/articles/page?id=${query.id}`\n  // );\n  // const json = await res.json();\n  // const article = {\n  //   title: json.title,\n  //   author: json.author,\n  //   date: json.date,\n  //   image: json.image,\n  //   isApproved: json.isApproved,\n  //   content: json.content ? html.serialize(json.content) : `<p></p>`,\n  //   comments: json.comments,\n  // };\n  // return {\n  //   props: {\n  //     article,\n  //   },\n  // };\n}\nexport default ArticlePage;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/article/index.js"],"names":["React","useState","useEffect","useContext","LargeCard","Page","styles","Html","getRules","CommentBar","axios","LoginContext","SocketContext","Card","useRouter","initializeApollo","addApolloState","gql","useQuery","NetworkStatus","ARTICLE_QUERY","ArticlePage","props","router","id","query","loading","error","fetchMore","data","networkStatus","refetch","ARTICLES_QUERY","variables","_id","notifyOnNetworkStatusChange","loadingArticle","rules","html","article","date","JSON","parse","content","serialize","comments","map","comment","createdAt","updatedAt","loginState","loginDispatch","socketState","socketDispatch","socket","user","window","scrollTo","postComment","toPost","toString","options","headers","post","stringify","then","res","alert","catch","err","response","status","Error","isEditable","isModerator","authorId","isPendingApproval","isApproved","headline","marginTop","title","author","ContentType","image","contents","__html","getServerSideProps","apolloClient"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport LargeCard from \"../../components/Cards/LargeCard/LargeCard.js\";\nimport Page from \"../../components/Page/Page\";\nimport styles from \"../../components/Page/Page.module.css\";\nimport Html from \"slate-html-serializer\";\nimport { getRules } from \"../../components/TextEditor/TextEditor\";\nimport CommentBar from \"../../components/Comment/CommentBar\";\nimport axios from \"axios\";\nimport { LoginContext } from \"../../contexts/reducers/loginContext\";\nimport { SocketContext } from \"../../contexts/reducers/socketContext\";\nimport { Card } from \"../../components/Cards/Card.js\";\nimport { useRouter } from \"next/router\";\nimport { initializeApollo, addApolloState } from \"../lib/apolloClient\";\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\n\nexport const ARTICLE_QUERY = gql`\n  query articleQuery($_id: String!) {\n    article(_id: $_id) {\n      _id\n      date\n      image\n      title\n      author\n      authorId\n      isApproved\n      content\n      comments {\n        _id\n        authorId\n        author\n        content\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\n\nconst ArticlePage = (props) => {\n  const router = useRouter();\n  const { id } = router.query;\n  const { loading, error, fetchMore, data, networkStatus, refetch } = useQuery(\n    ARTICLES_QUERY,\n    {\n      variables: { _id: id },\n      notifyOnNetworkStatusChange: true,\n    }\n  );\n\n  const loadingArticle = networkStatus === NetworkStatus.fetchMore;\n  const rules = getRules(styles);\n  const html = new Html({ rules });\n  let article;\n  if (loading && !loadingArticle) {\n    article = {};\n  } else {\n    article = {\n      ...data.article,\n      date: JSON.parse(data.article.date),\n      content: data.article.content? html.serialize(JSON.parse(data.article.content)) : `<p></p>`,\n      comments: data.article.comments.map((comment) => ({\n        ...comment,\n        content: JSON.parse(comment.content),\n        createdAt: JSON.parse(comment.createdAt),\n        updatedAt: JSON.parse(comment.updatedAt),\n      }))\n    };\n  }\n\n  // const socket = useSelector((state) => state.network.socket);\n  const [loginState, loginDispatch] = useContext(LoginContext);\n  const [socketState, socketDispatch] = useContext(SocketContext);\n  const socket = socketState.socket;\n  const user = loginState.user;\n  // const [article, setArticle] = useState(props.article);\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  // useEffect(() => {\n  //   const getArticle = async () => {\n  //     const res = await fetch(`/api/articles/page?id=${id}`);\n  //     const json = await res.json();\n  //     const fetchedArticle = {\n  //       ...article,\n  //       comments: json.comments,\n  //     };\n  //     setArticle(fetchedArticle);\n  //   };\n\n  //   if (socket) {\n  //     socket.on(\"comments changed\", (data) => {\n  //       console.log(\"Comments changed\");\n  //       if (data.articleId === id) {\n  //         try {\n  //           getArticle();\n  //         } catch (error) {\n  //           console.log(error);\n  //         }\n  //       }\n  //     });\n  //   }\n  // }, [socket]);\n\n  const postComment = (comment) => {\n    const toPost = { id: id.toString(), content: comment };\n    const options = {\n      headers: { \"Content-Type\": \"application/json\" },\n    };\n\n    axios\n      .post(\"/api/articles/postcomment\", JSON.stringify(toPost), options)\n      .then((res) => {\n        alert(\"Comment Posted\");\n      })\n      .catch((err) => {\n        if (err.response.status === 401 || err.response.status === 400) {\n          alert(err.response.data.error);\n        } else if (err.response.status !== 200) {\n          throw Error(err);\n        }\n      });\n  };\n\n  const isEditable =\n    user && (user.isModerator || user._id === article.authorId);\n  const isPendingApproval = !article.isApproved;\n\n  const headline = (\n    <div\n      className={styles[\"headline\"]}\n      style={\n        isEditable || isPendingApproval\n          ? { marginTop: \"36px\" }\n          : { marginTop: \"0px\" }\n      }\n    >\n      <LargeCard\n        title={article.title}\n        author={article.author}\n        date={article.date}\n        isApproved={article.isApproved}\n        contentType={Card.ContentType[\"article-internal\"]}\n        link={`article?id=${id}`}\n        isEditable={user && (user.isModerator || user._id === article.authorId)}\n        image={article.image}\n        onClick={() => {}}\n      />\n    </div>\n  );\n\n  const contents = (\n    <div>\n      <div dangerouslySetInnerHTML={{ __html: article.content }}></div>\n      <div className={styles[\"main-pane-item\"]}>\n        <CommentBar postComment={postComment} comments={article.comments} />\n      </div>\n    </div>\n  );\n\n  return (\n    <Page\n      // sidebarFixTopOffset={35 + 644}\n      sidebarFixTopOffset={0}\n      headline={headline}\n      mainPane={contents}\n    />\n  );\n};\n\nexport async function getServerSideProps({ query }) {\n  // const rules = getRules(styles);\n  // const html = new Html({ rules });\n\n  const apolloClient = initializeApollo();\n\n  await apolloClient.query({\n    query: ARTICLE_QUERY,\n    variables: { _id: query.id },\n  });\n\n  return addApolloState(apolloClient, {\n    props: {},\n  });\n\n  // const res = await fetch(\n  //   `${process.env.NEXT_PUBLIC_DOMAIN}/api/articles/page?id=${query.id}`\n  // );\n  // const json = await res.json();\n  // const article = {\n  //   title: json.title,\n  //   author: json.author,\n  //   date: json.date,\n  //   image: json.image,\n  //   isApproved: json.isApproved,\n  //   content: json.content ? html.serialize(json.content) : `<p></p>`,\n  //   comments: json.comments,\n  // };\n\n  // return {\n  //   props: {\n  //     article,\n  //   },\n  // };\n}\n\nexport default ArticlePage;\n"]},"metadata":{},"sourceType":"module"}
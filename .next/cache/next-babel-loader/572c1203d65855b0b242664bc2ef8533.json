{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useContext } from \"react\";\nimport styles from \"./VideoPlayer.module.css\";\nimport { disableBodyScroll, enableBodyScroll } from \"body-scroll-lock\";\nimport { VideoPlayerContext } from \"../../contexts/reducers/videoPlayerContext\";\nimport { closeVideoAction } from \"../../contexts/actions\";\n\nconst VideoPlayer = props => {\n  const {\n    0: videoPlayerState,\n    1: videoPlayerDispatch\n  } = useContext(VideoPlayerContext);\n  const isPlaying = videoPlayerState.isPlaying;\n\n  const closeVideo = () => videoPlayerDispatch(closeVideoAction());\n\n  useEffect(() => {\n    if (isPlaying) {\n      disableBodyScroll(props.scrollLockRef.current);\n    } else {\n      enableBodyScroll(props.scrollLockRef.current);\n    }\n  }, [isPlaying, props.scrollLockRef.current]);\n  const selected = videoPlayerState.selected;\n  return isPlaying ? __jsx(\"div\", {\n    className: styles[\"youtube-video-container\"],\n    id: \"youtube-video-container\"\n  }, __jsx(\"div\", {\n    className: styles[\"closeable\"]\n  }, __jsx(\"div\", {\n    className: styles[\"close-button\"]\n  }, __jsx(\"i\", {\n    className: `${styles[\"fas\"]} ${styles[\"fa-times\"]} fas fa-times`,\n    onClick: () => {\n      closeVideo();\n    }\n  }), __jsx(\"label\", {\n    className: styles[\"close-btn-label\"]\n  }, \"Close\")), __jsx(\"div\", {\n    className: styles[\"video\"]\n  }, __jsx(\"iframe\", {\n    src: selected,\n    frameborder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: \"true\"\n  })))) : null;\n};\n\nexport default VideoPlayer;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/components/VideoPlayer/VideoPlayer.js"],"names":["React","useEffect","useContext","styles","disableBodyScroll","enableBodyScroll","VideoPlayerContext","closeVideoAction","VideoPlayer","props","videoPlayerState","videoPlayerDispatch","isPlaying","closeVideo","scrollLockRef","current","selected"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,kBAApD;AACA,SAASC,kBAAT,QAAmC,4CAAnC;AACA,SAASC,gBAAT,QAAiC,wBAAjC;;AACA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAM;AAAA,OAACC,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CT,UAAU,CACxDI,kBADwD,CAA1D;AAGA,QAAMM,SAAS,GAAGF,gBAAgB,CAACE,SAAnC;;AACA,QAAMC,UAAU,GAAG,MAAMF,mBAAmB,CAACJ,gBAAgB,EAAjB,CAA5C;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,SAAJ,EAAe;AACbR,MAAAA,iBAAiB,CAACK,KAAK,CAACK,aAAN,CAAoBC,OAArB,CAAjB;AACD,KAFD,MAEO;AACLV,MAAAA,gBAAgB,CAACI,KAAK,CAACK,aAAN,CAAoBC,OAArB,CAAhB;AACD;AACF,GANQ,EAMN,CAACH,SAAD,EAAYH,KAAK,CAACK,aAAN,CAAoBC,OAAhC,CANM,CAAT;AAQA,QAAMC,QAAQ,GAAGN,gBAAgB,CAACM,QAAlC;AACA,SAAOJ,SAAS,GACd;AACE,IAAA,SAAS,EAAET,MAAM,CAAC,yBAAD,CADnB;AAEE,IAAA,EAAE,EAAC;AAFL,KAIE;AAAK,IAAA,SAAS,EAAEA,MAAM,CAAC,WAAD;AAAtB,KACE;AAAK,IAAA,SAAS,EAAEA,MAAM,CAAC,cAAD;AAAtB,KACE;AACE,IAAA,SAAS,EAAG,GAAEA,MAAM,CAAC,KAAD,CAAQ,IAAGA,MAAM,CAAC,UAAD,CAAa,eADpD;AAEE,IAAA,OAAO,EAAE,MAAM;AACbU,MAAAA,UAAU;AACX;AAJH,IADF,EAOE;AAAO,IAAA,SAAS,EAAEV,MAAM,CAAC,iBAAD;AAAxB,aAPF,CADF,EAUE;AAAK,IAAA,SAAS,EAAEA,MAAM,CAAC,OAAD;AAAtB,KACE;AACE,IAAA,GAAG,EAAEa,QADP;AAEE,IAAA,WAAW,EAAC,GAFd;AAGE,IAAA,KAAK,EAAC,yEAHR;AAIE,IAAA,eAAe,EAAC;AAJlB,IADF,CAVF,CAJF,CADc,GAyBZ,IAzBJ;AA0BD,CAzCD;;AA0CA,eAAeR,WAAf","sourcesContent":["import React, { useEffect, useContext } from \"react\";\nimport styles from \"./VideoPlayer.module.css\";\nimport { disableBodyScroll, enableBodyScroll } from \"body-scroll-lock\";\nimport { VideoPlayerContext } from \"../../contexts/reducers/videoPlayerContext\";\nimport { closeVideoAction } from \"../../contexts/actions\";\nconst VideoPlayer = (props) => {\n  const [videoPlayerState, videoPlayerDispatch] = useContext(\n    VideoPlayerContext\n  );\n  const isPlaying = videoPlayerState.isPlaying;\n  const closeVideo = () => videoPlayerDispatch(closeVideoAction());\n  useEffect(() => {\n    if (isPlaying) {\n      disableBodyScroll(props.scrollLockRef.current);\n    } else {\n      enableBodyScroll(props.scrollLockRef.current);\n    }\n  }, [isPlaying, props.scrollLockRef.current]);\n\n  const selected = videoPlayerState.selected;\n  return isPlaying ? (\n    <div\n      className={styles[\"youtube-video-container\"]}\n      id=\"youtube-video-container\"\n    >\n      <div className={styles[\"closeable\"]}>\n        <div className={styles[\"close-button\"]}>\n          <i\n            className={`${styles[\"fas\"]} ${styles[\"fa-times\"]} fas fa-times`}\n            onClick={() => {\n              closeVideo();\n            }}\n          ></i>\n          <label className={styles[\"close-btn-label\"]}>Close</label>\n        </div>\n        <div className={styles[\"video\"]}>\n          <iframe\n            src={selected}\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen=\"true\"\n          ></iframe>\n        </div>\n      </div>\n    </div>\n  ) : null;\n};\nexport default VideoPlayer;\n"]},"metadata":{},"sourceType":"module"}
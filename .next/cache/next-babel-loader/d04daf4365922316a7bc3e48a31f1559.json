{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer, createContext } from \"react\";\nexport const AudioPlayerContext = /*#__PURE__*/createContext();\nconst initialState = {\n  selected: 0,\n  isPlaying: false,\n  currentTime: 0,\n  audioPlayerRef: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_AUDIOPLAYER_IS_PLAYING\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPlaying: action.payload\n      });\n\n    case \"SET_AUDIOPLAYER_CURRENT_TIME\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currentTime: action.payload\n      });\n\n    case \"SET_AUDIOPLAYER_SELECTED\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: action.payload\n      });\n\n    case \"SET_AUDIOPLAYER_REF\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        audioPlayerRef: action.payload\n      });\n\n    case \"PLAY_AUDIO\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: action.payload,\n        isPlaying: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const AudioPlayerContextProvider = props => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n  return __jsx(AudioPlayerContext.Provider, {\n    value: [state, dispatch]\n  }, props.children);\n};","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/contexts/reducers/audioPlayerContext.js"],"names":["React","useReducer","createContext","AudioPlayerContext","initialState","selected","isPlaying","currentTime","audioPlayerRef","reducer","state","action","type","payload","AudioPlayerContextProvider","props","dispatch","children"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;AAEA,OAAO,MAAMC,kBAAkB,gBAAGD,aAAa,EAAxC;AAEP,MAAME,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CADS;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,WAAW,EAAE,CAHM;AAInBC,EAAAA,cAAc,EAAE;AAJG,CAArB;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,4BAAL;AACE,6CAAYF,KAAZ;AAAmBJ,QAAAA,SAAS,EAAEK,MAAM,CAACE;AAArC;;AACF,SAAK,8BAAL;AACE,6CAAYH,KAAZ;AAAmBH,QAAAA,WAAW,EAAEI,MAAM,CAACE;AAAvC;;AACF,SAAK,0BAAL;AACE,6CAAYH,KAAZ;AAAmBL,QAAAA,QAAQ,EAAEM,MAAM,CAACE;AAApC;;AACF,SAAK,qBAAL;AACE,6CAAYH,KAAZ;AAAmBF,QAAAA,cAAc,EAAEG,MAAM,CAACE;AAA1C;;AACF,SAAK,YAAL;AACE,6CAAYH,KAAZ;AAAmBL,QAAAA,QAAQ,EAAEM,MAAM,CAACE,OAApC;AAA6CP,QAAAA,SAAS,EAAE;AAAxD;;AACF;AACE,aAAOI,KAAP;AAZJ;AAeD,CAhBD;;AAkBA,OAAO,MAAMI,0BAA0B,GAAIC,KAAD,IAAW;AACnD,QAAM;AAAA,OAACL,KAAD;AAAA,OAAQM;AAAR,MAAoBf,UAAU,CAACQ,OAAD,EAAUL,YAAV,CAApC;AACA,SACE,MAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE,CAACM,KAAD,EAAQM,QAAR;AAApC,KACGD,KAAK,CAACE,QADT,CADF;AAKD,CAPM","sourcesContent":["import React, { useReducer, createContext } from \"react\";\n\nexport const AudioPlayerContext = createContext();\n\nconst initialState = {\n  selected: 0,\n  isPlaying: false,\n  currentTime: 0,\n  audioPlayerRef: null,\n}\n\nconst reducer = (state, action) => {\n  switch(action.type){\n    case \"SET_AUDIOPLAYER_IS_PLAYING\":\n      return { ...state, isPlaying: action.payload };\n    case \"SET_AUDIOPLAYER_CURRENT_TIME\":\n      return { ...state, currentTime: action.payload };\n    case \"SET_AUDIOPLAYER_SELECTED\":\n      return { ...state, selected: action.payload };\n    case \"SET_AUDIOPLAYER_REF\":\n      return { ...state, audioPlayerRef: action.payload };\n    case \"PLAY_AUDIO\":\n      return { ...state, selected: action.payload, isPlaying: true };\n    default:\n      return state;\n  }\n\n};\n\nexport const AudioPlayerContextProvider = (props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <AudioPlayerContext.Provider value={[state, dispatch]}>\n      {props.children}\n    </AudioPlayerContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
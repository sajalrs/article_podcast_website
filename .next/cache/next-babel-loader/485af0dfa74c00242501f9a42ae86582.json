{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useContext } from \"react\";\nimport styles from \"./VideoPlayer.module.css\";\nimport { disableBodyScroll, enableBodyScroll } from \"body-scroll-lock\";\nimport { VideoPlayerContext } from \"../../contexts/reducers/videoPlayerContext\";\nimport { closeVideoAction } from \"../../contexts/actions\";\n\nvar VideoPlayer = function VideoPlayer(props) {\n  _s();\n\n  var _useContext = useContext(VideoPlayerContext),\n      videoPlayerState = _useContext[0],\n      videoPlayerDispatch = _useContext[1];\n\n  var isPlaying = videoPlayerState.isPlaying;\n\n  var closeVideo = function closeVideo() {\n    return videoPlayerDispatch(closeVideoAction());\n  };\n\n  useEffect(function () {\n    if (isPlaying) {\n      disableBodyScroll(props.scrollLockRef.current);\n    } else {\n      enableBodyScroll(props.scrollLockRef.current);\n    }\n  }, [isPlaying, props.scrollLockRef.current]);\n  var selected = videoPlayerState.selected;\n  return isPlaying ? __jsx(\"div\", {\n    className: styles[\"youtube-video-container\"],\n    id: \"youtube-video-container\"\n  }, __jsx(\"div\", {\n    className: styles[\"closeable\"]\n  }, __jsx(\"div\", {\n    className: styles[\"close-button\"]\n  }, __jsx(\"i\", {\n    className: \"\".concat(styles[\"fas\"], \" \").concat(styles[\"fa-times\"], \" fas fa-times\"),\n    onClick: function onClick() {\n      closeVideo();\n    }\n  }), __jsx(\"label\", {\n    className: styles[\"close-btn-label\"]\n  }, \"Close\")), __jsx(\"div\", {\n    className: styles[\"video\"]\n  }, __jsx(\"iframe\", {\n    src: selected,\n    frameborder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: \"true\"\n  })))) : null;\n};\n\n_s(VideoPlayer, \"5giLZQRgI5EeXdUCIINIH4y3UV0=\");\n\n_c = VideoPlayer;\nexport default VideoPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/components/VideoPlayer/VideoPlayer.js"],"names":["React","useEffect","useContext","styles","disableBodyScroll","enableBodyScroll","VideoPlayerContext","closeVideoAction","VideoPlayer","props","videoPlayerState","videoPlayerDispatch","isPlaying","closeVideo","scrollLockRef","current","selected"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,kBAApD;AACA,SAASC,kBAAT,QAAmC,4CAAnC;AACA,SAASC,gBAAT,QAAiC,wBAAjC;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAAA;;AAAA,oBACmBP,UAAU,CACxDI,kBADwD,CAD7B;AAAA,MACtBI,gBADsB;AAAA,MACJC,mBADI;;AAI7B,MAAMC,SAAS,GAAGF,gBAAgB,CAACE,SAAnC;;AACA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,WAAMF,mBAAmB,CAACJ,gBAAgB,EAAjB,CAAzB;AAAA,GAAnB;;AACAN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,SAAJ,EAAe;AACbR,MAAAA,iBAAiB,CAACK,KAAK,CAACK,aAAN,CAAoBC,OAArB,CAAjB;AACD,KAFD,MAEO;AACLV,MAAAA,gBAAgB,CAACI,KAAK,CAACK,aAAN,CAAoBC,OAArB,CAAhB;AACD;AACF,GANQ,EAMN,CAACH,SAAD,EAAYH,KAAK,CAACK,aAAN,CAAoBC,OAAhC,CANM,CAAT;AAQA,MAAMC,QAAQ,GAAGN,gBAAgB,CAACM,QAAlC;AACA,SAAOJ,SAAS,GACd;AACE,IAAA,SAAS,EAAET,MAAM,CAAC,yBAAD,CADnB;AAEE,IAAA,EAAE,EAAC;AAFL,KAIE;AAAK,IAAA,SAAS,EAAEA,MAAM,CAAC,WAAD;AAAtB,KACE;AAAK,IAAA,SAAS,EAAEA,MAAM,CAAC,cAAD;AAAtB,KACE;AACE,IAAA,SAAS,YAAKA,MAAM,CAAC,KAAD,CAAX,cAAsBA,MAAM,CAAC,UAAD,CAA5B,kBADX;AAEE,IAAA,OAAO,EAAE,mBAAM;AACbU,MAAAA,UAAU;AACX;AAJH,IADF,EAOE;AAAO,IAAA,SAAS,EAAEV,MAAM,CAAC,iBAAD;AAAxB,aAPF,CADF,EAUE;AAAK,IAAA,SAAS,EAAEA,MAAM,CAAC,OAAD;AAAtB,KACE;AACE,IAAA,GAAG,EAAEa,QADP;AAEE,IAAA,WAAW,EAAC,GAFd;AAGE,IAAA,KAAK,EAAC,yEAHR;AAIE,IAAA,eAAe,EAAC;AAJlB,IADF,CAVF,CAJF,CADc,GAyBZ,IAzBJ;AA0BD,CAzCD;;GAAMR,W;;KAAAA,W;AA0CN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useContext } from \"react\";\nimport styles from \"./VideoPlayer.module.css\";\nimport { disableBodyScroll, enableBodyScroll } from \"body-scroll-lock\";\nimport { VideoPlayerContext } from \"../../contexts/reducers/videoPlayerContext\";\nimport { closeVideoAction } from \"../../contexts/actions\";\nconst VideoPlayer = (props) => {\n  const [videoPlayerState, videoPlayerDispatch] = useContext(\n    VideoPlayerContext\n  );\n  const isPlaying = videoPlayerState.isPlaying;\n  const closeVideo = () => videoPlayerDispatch(closeVideoAction());\n  useEffect(() => {\n    if (isPlaying) {\n      disableBodyScroll(props.scrollLockRef.current);\n    } else {\n      enableBodyScroll(props.scrollLockRef.current);\n    }\n  }, [isPlaying, props.scrollLockRef.current]);\n\n  const selected = videoPlayerState.selected;\n  return isPlaying ? (\n    <div\n      className={styles[\"youtube-video-container\"]}\n      id=\"youtube-video-container\"\n    >\n      <div className={styles[\"closeable\"]}>\n        <div className={styles[\"close-button\"]}>\n          <i\n            className={`${styles[\"fas\"]} ${styles[\"fa-times\"]} fas fa-times`}\n            onClick={() => {\n              closeVideo();\n            }}\n          ></i>\n          <label className={styles[\"close-btn-label\"]}>Close</label>\n        </div>\n        <div className={styles[\"video\"]}>\n          <iframe\n            src={selected}\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen=\"true\"\n          ></iframe>\n        </div>\n      </div>\n    </div>\n  ) : null;\n};\nexport default VideoPlayer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const mongoose = require(\"mongoose\");\n\nconst fetch = require(\"node-fetch\");\n\nvar parser = require(\"xml2json\");\n\nimport { serialize } from \"cookie\";\n\nconst bcrypt = require(\"bcryptjs\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst {\n  loginValidation\n} = require(\"../validation/validation\");\n\nlet YoutubeLink;\n\ntry {\n  YoutubeLink = mongoose.model(\"YoutubeLinks\");\n} catch {\n  YoutubeLink = require(\"../models/YoutubeLinks\");\n}\n\nlet User;\n\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n}\n\nexport const resolvers = {\n  Query: {\n    youtubeLinks: async () => await YoutubeLink.find({}).sort(\"-date\"),\n    podcasts: async () => await fetch(`https://anchor.fm/s/333e122c/podcast/rss`).then(response => response.text()).then(data => {\n      let json = JSON.parse(parser.toJson(data, {\n        reversible: false\n      }));\n      return json.rss.channel.item.map(element => {\n        const text = element[\"description\"].replace(/<[^>]+>/g, \"\").replace(/&nbsp;/, \"\");\n        return {\n          title: element[\"title\"],\n          by: element[\"dc:creator\"],\n          link: element[\"enclosure\"][\"url\"],\n          date: element[\"pubDate\"],\n          image: element[\"itunes:image\"][\"href\"],\n          description: text.substring(0, text.indexOf(\"---\"))\n        };\n      });\n    }),\n    isLoggedIn: async (_, args, ctx) => {\n      console.log(ctx.user);\n\n      if (!ctx.user) {\n        throw Error(\"Please login to proceed\");\n      }\n\n      try {\n        const user = await User.findById(ctx.user._id);\n        return user;\n      } catch (err) {\n        throw Error(err.message);\n      }\n    }\n  },\n  Mutation: {\n    login: async (_, args, ctx) => {\n      const {\n        error\n      } = loginValidation(args);\n\n      if (error) {\n        const toReturn = error.details[0].message.replace('\"email\"', \"Email\").replace('\"password\"', \"Password\");\n        throw Error(toReturn);\n      } // const { cookie } = ctx;\n\n\n      const {\n        setToken\n      } = ctx;\n      const {\n        email,\n        password\n      } = args;\n      const user = await User.findOne({\n        email: email\n      });\n      if (!user) throw Error(\"The email or password is incorrect\");\n      const validPass = await bcrypt.compare(password, user.password);\n      if (!validPass) throw Error(\"The email or password is incorrect\");\n      const token = jwt.sign({\n        _id: user._id,\n        tokenCreated: new Date()\n      }, process.env.TOKEN_SECRET); // cookie(\"token\", token, {\n      //   path: \"/\",\n      //   httpOnly: true,\n      //   sameSite: \"strict\",\n      // });\n\n      setToken(token);\n      return {\n        token: token\n      };\n    }\n  }\n};","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/graphql/resolvers.js"],"names":["mongoose","require","fetch","parser","serialize","bcrypt","jwt","loginValidation","YoutubeLink","model","User","resolvers","Query","youtubeLinks","find","sort","podcasts","then","response","text","data","json","JSON","parse","toJson","reversible","rss","channel","item","map","element","replace","title","by","link","date","image","description","substring","indexOf","isLoggedIn","_","args","ctx","console","log","user","Error","findById","_id","err","message","Mutation","login","error","toReturn","details","setToken","email","password","findOne","validPass","compare","token","sign","tokenCreated","Date","process","env","TOKEN_SECRET"],"mappings":"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","sourcesContent":["const mongoose = require(\"mongoose\");\nconst fetch = require(\"node-fetch\");\nvar parser = require(\"xml2json\");\nimport { serialize } from \"cookie\";\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst { loginValidation } = require(\"../validation/validation\");\n\nlet YoutubeLink;\ntry {\n  YoutubeLink = mongoose.model(\"YoutubeLinks\");\n} catch {\n  YoutubeLink = require(\"../models/YoutubeLinks\");\n}\n\nlet User;\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n}\n\nexport const resolvers = {\n  Query: {\n    youtubeLinks: async () => await YoutubeLink.find({}).sort(\"-date\"),\n\n    podcasts: async () =>\n      await fetch(`https://anchor.fm/s/333e122c/podcast/rss`)\n        .then((response) => response.text())\n        .then((data) => {\n          let json = JSON.parse(parser.toJson(data, { reversible: false }));\n          return json.rss.channel.item.map((element) => {\n            const text = element[\"description\"]\n              .replace(/<[^>]+>/g, \"\")\n              .replace(/&nbsp;/, \"\");\n            return {\n              title: element[\"title\"],\n              by: element[\"dc:creator\"],\n              link: element[\"enclosure\"][\"url\"],\n              date: element[\"pubDate\"],\n              image: element[\"itunes:image\"][\"href\"],\n              description: text.substring(0, text.indexOf(\"---\")),\n            };\n          });\n        }),\n\n    isLoggedIn: async (_, args, ctx) => {\n      console.log(ctx.user);\n      if (!ctx.user) {\n        throw Error(\"Please login to proceed\");\n      }\n\n      try {\n        const user = await User.findById(ctx.user._id);\n        return user;\n      } catch (err) {\n        throw Error(err.message);\n      }\n    },\n  },\n\n  Mutation: {\n    login: async (_, args, ctx) => {\n      const { error } = loginValidation(args);\n      if (error) {\n        const toReturn = error.details[0].message\n          .replace('\"email\"', \"Email\")\n          .replace('\"password\"', \"Password\");\n        throw Error(toReturn);\n      }\n      // const { cookie } = ctx;\n      const { setToken } = ctx;\n      const { email, password } = args;\n      const user = await User.findOne({ email: email });\n\n      if (!user) throw Error(\"The email or password is incorrect\");\n\n      const validPass = await bcrypt.compare(password, user.password);\n      if (!validPass) throw Error(\"The email or password is incorrect\");\n\n      const token = jwt.sign(\n        { _id: user._id, tokenCreated: new Date() },\n        process.env.TOKEN_SECRET\n      );\n      // cookie(\"token\", token, {\n      //   path: \"/\",\n      //   httpOnly: true,\n      //   sameSite: \"strict\",\n      // });\n      setToken(token);\n      return { token: token };\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}
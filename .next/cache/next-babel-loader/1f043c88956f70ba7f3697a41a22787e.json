{"ast":null,"code":"import { ApolloServer } from \"apollo-server-micro\";\nimport { makeExecutableSchema } from 'graphql-tools';\n\nrequire(\"dotenv/config\");\n\nimport { typeDefs } from \"./typeDefs\";\nimport { resolvers } from \"./resolvers\";\nimport connectDb from \"../middlewares/dbMiddleware.js\";\nimport verify from \"../verification/verifyTokenGraphql\";\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\nconst apolloServer = new ApolloServer({\n  schema,\n  context: (req, res) => ({\n    res\n  })\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default connectDb(verify(apolloServer.createHandler({\n  path: \"/api/graphql\"\n})));","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/graphql/index.js"],"names":["ApolloServer","makeExecutableSchema","require","typeDefs","resolvers","connectDb","verify","schema","apolloServer","context","req","res","config","api","bodyParser","createHandler","path"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B;AACA,SAAQC,oBAAR,QAAmC,eAAnC;;AACAC,OAAO,CAAC,eAAD,CAAP;;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,MAAP,MAAmB,oCAAnB;AAEA,MAAMC,MAAM,GAAGN,oBAAoB,CAAC;AAClCE,EAAAA,QADkC;AAElCC,EAAAA;AAFkC,CAAD,CAAnC;AAIA,MAAMI,YAAY,GAAG,IAAIR,YAAJ,CACrB;AAACO,EAAAA,MAAD;AACEE,EAAAA,OAAO,EAAE,CAACC,GAAD,EAAMC,GAAN,MAAe;AAACA,IAAAA;AAAD,GAAf;AADX,CADqB,CAArB;AAKA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,eAAeT,SAAS,CAACC,MAAM,CAACE,YAAY,CAACO,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAD,CAAP,CAAxB","sourcesContent":["import { ApolloServer } from \"apollo-server-micro\";\nimport {makeExecutableSchema} from 'graphql-tools';\nrequire(\"dotenv/config\");\nimport { typeDefs } from \"./typeDefs\";\nimport { resolvers } from \"./resolvers\";\nimport connectDb from \"../middlewares/dbMiddleware.js\";\nimport verify from \"../verification/verifyTokenGraphql\";\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n})\nconst apolloServer = new ApolloServer( \n{schema,\n  context: (req, res) => ({res})}\n);\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default connectDb(verify(apolloServer.createHandler({ path: \"/api/graphql\" })));\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { concatPagination } from '@apollo/client/utilities';\nimport merge from 'deepmerge';\nimport isEqual from 'lodash/isEqual';\nexport var APOLLO_STATE_PROP_NAME = '__APOLLO_STATE__';\nvar apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    link: new HttpLink({\n      uri: \"\".concat(process.env.NEXT_PUBLIC_DOMAIN, \"/api/graphql\"),\n      // Server URL (must be absolute)\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    var existingCache = _apolloClient.extract(); // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n\n\n    var data = merge(initialState, existingCache, {\n      // combine arrays using object equality (like in sets)\n      arrayMerge: function arrayMerge(destinationArray, sourceArray) {\n        return [].concat(_toConsumableArray(sourceArray), _toConsumableArray(destinationArray.filter(function (d) {\n          return sourceArray.every(function (s) {\n            return !isEqual(d, s);\n          });\n        })));\n      }\n    }); // Restore the cache with the merged data\n\n    _apolloClient.cache.restore(data);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function addApolloState(client, pageProps) {\n  if (pageProps === null || pageProps === void 0 ? void 0 : pageProps.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n  }\n\n  return pageProps;\n}\nexport function useApollo(pageProps) {\n  _s();\n\n  var state = pageProps[APOLLO_STATE_PROP_NAME];\n  var store = useMemo(function () {\n    return initializeApollo(state);\n  }, [state]);\n  return store;\n}\n\n_s(useApollo, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/lib/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","concatPagination","merge","isEqual","APOLLO_STATE_PROP_NAME","apolloClient","createApolloClient","ssrMode","link","uri","process","env","NEXT_PUBLIC_DOMAIN","credentials","cache","typePolicies","Query","fields","allPosts","initializeApollo","initialState","_apolloClient","existingCache","extract","data","arrayMerge","destinationArray","sourceArray","filter","d","every","s","restore","addApolloState","client","pageProps","props","useApollo","state","store"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,IAAMC,sBAAsB,GAAG,kBAA/B;AAEP,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIR,YAAJ,CAAiB;AACtBS,IAAAA,OAAO,OADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIT,QAAJ,CAAa;AACjBU,MAAAA,GAAG,YAAKC,OAAO,CAACC,GAAR,CAAYC,kBAAjB,iBADc;AACqC;AACtDC,MAAAA,WAAW,EAAE,aAFI,CAEW;;AAFX,KAAb,CAFgB;AAMtBC,IAAAA,KAAK,EAAE,IAAId,aAAJ,CAAkB;AACvBe,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAEjB,gBAAgB;AADpB;AADH;AADK;AADS,KAAlB;AANe,GAAjB,CAAP;AAgBD;;AAED,OAAO,SAASkB,gBAAT,GAA+C;AAAA;;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AACpD,MAAMC,aAAa,qBAAGhB,YAAH,2DAAmBC,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIc,YAAJ,EAAkB;AAChB;AACA,QAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFgB,CAIhB;;;AACA,QAAMC,IAAI,GAAGtB,KAAK,CAACkB,YAAD,EAAeE,aAAf,EAA8B;AAC9C;AACAG,MAAAA,UAAU,EAAE,oBAACC,gBAAD,EAAmBC,WAAnB;AAAA,4CACPA,WADO,sBAEPD,gBAAgB,CAACE,MAAjB,CAAwB,UAACC,CAAD;AAAA,iBACzBF,WAAW,CAACG,KAAZ,CAAkB,UAACC,CAAD;AAAA,mBAAO,CAAC5B,OAAO,CAAC0B,CAAD,EAAIE,CAAJ,CAAf;AAAA,WAAlB,CADyB;AAAA,SAAxB,CAFO;AAAA;AAFkC,KAA9B,CAAlB,CALgB,CAehB;;AACAV,IAAAA,aAAa,CAACP,KAAd,CAAoBkB,OAApB,CAA4BR,IAA5B;AACD,GAtBmD,CAuBpD;;;AACA,aAAmC,OAAOH,aAAP,CAxBiB,CAyBpD;;AACA,MAAI,CAAChB,YAAL,EAAmBA,YAAY,GAAGgB,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASY,cAAT,CAAwBC,MAAxB,EAAgCC,SAAhC,EAA2C;AAChD,MAAIA,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAEC,KAAf,EAAsB;AACpBD,IAAAA,SAAS,CAACC,KAAV,CAAgBhC,sBAAhB,IAA0C8B,MAAM,CAACpB,KAAP,CAAaS,OAAb,EAA1C;AACD;;AAED,SAAOY,SAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBF,SAAnB,EAA8B;AAAA;;AACnC,MAAMG,KAAK,GAAGH,SAAS,CAAC/B,sBAAD,CAAvB;AACA,MAAMmC,KAAK,GAAG1C,OAAO,CAAC;AAAA,WAAMsB,gBAAgB,CAACmB,KAAD,CAAtB;AAAA,GAAD,EAAgC,CAACA,KAAD,CAAhC,CAArB;AACA,SAAOC,KAAP;AACD;;GAJeF,S","sourcesContent":["import { useMemo } from 'react'\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\nimport { concatPagination } from '@apollo/client/utilities'\nimport merge from 'deepmerge'\nimport isEqual from 'lodash/isEqual'\n\nexport const APOLLO_STATE_PROP_NAME = '__APOLLO_STATE__'\n\nlet apolloClient\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: new HttpLink({\n      uri: `${process.env.NEXT_PUBLIC_DOMAIN}/api/graphql`, // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination(),\n          },\n        },\n      },\n    }),\n  })\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient()\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract()\n\n    // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n    const data = merge(initialState, existingCache, {\n      // combine arrays using object equality (like in sets)\n      arrayMerge: (destinationArray, sourceArray) => [\n        ...sourceArray,\n        ...destinationArray.filter((d) =>\n          sourceArray.every((s) => !isEqual(d, s))\n        ),\n      ],\n    })\n\n    // Restore the cache with the merged data\n    _apolloClient.cache.restore(data)\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient\n\n  return _apolloClient\n}\n\nexport function addApolloState(client, pageProps) {\n  if (pageProps?.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract()\n  }\n\n  return pageProps\n}\n\nexport function useApollo(pageProps) {\n  const state = pageProps[APOLLO_STATE_PROP_NAME]\n  const store = useMemo(() => initializeApollo(state), [state])\n  return store\n}"]},"metadata":{},"sourceType":"module"}
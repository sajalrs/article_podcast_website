{"ast":null,"code":"import { ApolloServer } from \"apollo-server-micro\";\n\nrequire(\"dotenv/config\");\n\nimport { typeDefs } from \"./typeDefs\";\nimport { resolvers } from \"./resolvers\";\nimport connectDb from \"../middlewares/dbMiddleware.js\";\nimport withCookies from \"../middlewares/cookiesMiddleware\";\n\nfunction isAuthenticated(req) {\n  console.log(req === null || req === void 0 ? void 0 : req.cookies);\n  const token = req === null || req === void 0 ? void 0 : req.cookies[\"token\"];\n\n  if (!token) {\n    return null;\n  }\n\n  try {\n    const verified = jwt.verify(token, process.env.TOKEN_SECRET);\n    return verified;\n  } catch (err) {\n    return null;\n  }\n}\n\n;\n\nfunction context(ctx) {\n  return {\n    cookie: ctx.res.cookie,\n    user: isAuthenticated(ctx.req)\n  };\n}\n\n;\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default withCookies(connectDb(apolloServer.createHandler({\n  path: \"/api/graphql\"\n})));","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/graphql/index.js"],"names":["ApolloServer","require","typeDefs","resolvers","connectDb","withCookies","isAuthenticated","req","console","log","cookies","token","verified","jwt","verify","process","env","TOKEN_SECRET","err","context","ctx","cookie","res","user","apolloServer","config","api","bodyParser","createHandler","path"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B;;AACAC,OAAO,CAAC,eAAD,CAAP;;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;;AACA,SAASC,eAAT,CAAyBC,GAAzB,EAA6B;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,aAAYA,GAAZ,uBAAYA,GAAG,CAAEG,OAAjB;AACA,QAAMC,KAAK,GAAGJ,GAAH,aAAGA,GAAH,uBAAGA,GAAG,CAAEG,OAAL,CAAa,OAAb,CAAd;;AACA,MAAI,CAACC,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAGC,GAAG,CAACC,MAAJ,CAAWH,KAAX,EAAkBI,OAAO,CAACC,GAAR,CAAYC,YAA9B,CAAjB;AACA,WAAOL,QAAP;AACD,GAHD,CAGE,OAAOM,GAAP,EAAY;AACZ,WAAO,IAAP;AACD;AACF;;AAAA;;AAED,SAASC,OAAT,CAAiBC,GAAjB,EAAqB;AACnB,SAAO;AACLC,IAAAA,MAAM,EAAED,GAAG,CAACE,GAAJ,CAAQD,MADX;AAELE,IAAAA,IAAI,EAAEjB,eAAe,CAACc,GAAG,CAACb,GAAL;AAFhB,GAAP;AAID;;AAAA;AAED,MAAMiB,YAAY,GAAG,IAAIxB,YAAJ,CAAiB;AACpCE,EAAAA,QADoC;AAEpCC,EAAAA,SAFoC;AAGpCgB,EAAAA;AAHoC,CAAjB,CAArB;AAMA,OAAO,MAAMM,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,eAAetB,WAAW,CACxBD,SAAS,CAACoB,YAAY,CAACI,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAD,CADe,CAA1B","sourcesContent":["import { ApolloServer } from \"apollo-server-micro\";\nrequire(\"dotenv/config\");\nimport { typeDefs } from \"./typeDefs\";\nimport { resolvers } from \"./resolvers\";\nimport connectDb from \"../middlewares/dbMiddleware.js\";\nimport withCookies from \"../middlewares/cookiesMiddleware\";\nfunction isAuthenticated(req){\n  console.log(req?.cookies);\n  const token = req?.cookies[\"token\"];\n  if (!token) {\n    return null;\n  }\n  try {\n    const verified = jwt.verify(token, process.env.TOKEN_SECRET);\n    return verified;\n  } catch (err) {\n    return null;\n  }\n};\n\nfunction context(ctx){\n  return {\n    cookie: ctx.res.cookie,\n    user: isAuthenticated(ctx.req),\n  };\n};\n\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context,\n});\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default withCookies(\n  connectDb(apolloServer.createHandler({ path: \"/api/graphql\" }))\n);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ApolloServer, gql } from \"apollo-server-micro\";\nimport { makeExecutableSchema } from \"graphql-tools\";\nimport { MongoClient } from \"mongodb\";\n\nrequire(\"dotenv/config\");\n\nconst typeDefs = gql`\n  type YoutubeLink {\n    title: String!\n    id: String!\n    date: String!\n  }\n\n  type Query {\n    youtubeLinks: YoutubeLink!\n  }\n`;\nconst resolvers = {\n  Query: {\n    youtubeLinks(_parent, _args, _context, _info) {\n      return _context.db.collection(\"youtubelinks\").find().next().then(data => {\n        return {\n          items: data\n        };\n      });\n    }\n\n  }\n};\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\nlet db;\nconst apolloServer = new ApolloServer({\n  schema,\n  context: async () => {\n    if (!db) {\n      try {\n        const dbClient = new MongoClient(process.env.MONGO_URL, {\n          useNewUrlParser: true,\n          useUnifiedTopology: true\n        });\n        if (!dbClient.isConnected()) await dbClient.connect();\n        db = dbClient.db(\"cluster0\");\n      } catch (e) {\n        console.log(\"--->error while connecting via graphql context (db)\", e);\n      }\n    }\n\n    return {\n      db\n    };\n  }\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default apolloServer.createHandler({\n  path: \"/api/graphql\"\n});","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/graphql.js"],"names":["ApolloServer","gql","makeExecutableSchema","MongoClient","require","typeDefs","resolvers","Query","youtubeLinks","_parent","_args","_context","_info","db","collection","find","next","then","data","items","schema","apolloServer","context","dbClient","process","env","MONGO_URL","useNewUrlParser","useUnifiedTopology","isConnected","connect","e","console","log","config","api","bodyParser","createHandler","path"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AACA,SAASC,oBAAT,QAAqC,eAArC;AACA,SAASC,WAAT,QAA4B,SAA5B;;AACAC,OAAO,CAAC,eAAD,CAAP;;AACA,MAAMC,QAAQ,GAAGJ,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;AAYA,MAAMK,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,CAACC,OAAD,EAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkC;AAC5C,aAAOD,QAAQ,CAACE,EAAT,CACJC,UADI,CACO,cADP,EAEJC,IAFI,GAEGC,IAFH,GAGJC,IAHI,CAGEC,IAAD,IAAU;AACd,eAAO;AAACC,UAAAA,KAAK,EAAED;AAAR,SAAP;AACD,OALI,CAAP;AAMD;;AARI;AADS,CAAlB;AAaA,MAAME,MAAM,GAAGlB,oBAAoB,CAAC;AAClCG,EAAAA,QADkC;AAElCC,EAAAA;AAFkC,CAAD,CAAnC;AAKA,IAAIO,EAAJ;AACA,MAAMQ,YAAY,GAAG,IAAIrB,YAAJ,CAAiB;AACpCoB,EAAAA,MADoC;AAEpCE,EAAAA,OAAO,EAAE,YAAY;AACnB,QAAI,CAACT,EAAL,EAAS;AACP,UAAI;AACF,cAAMU,QAAQ,GAAG,IAAIpB,WAAJ,CAAgBqB,OAAO,CAACC,GAAR,CAAYC,SAA5B,EAAuC;AACtDC,UAAAA,eAAe,EAAE,IADqC;AAEtDC,UAAAA,kBAAkB,EAAE;AAFkC,SAAvC,CAAjB;AAKA,YAAI,CAACL,QAAQ,CAACM,WAAT,EAAL,EAA6B,MAAMN,QAAQ,CAACO,OAAT,EAAN;AAC7BjB,QAAAA,EAAE,GAAGU,QAAQ,CAACV,EAAT,CAAY,UAAZ,CAAL;AACD,OARD,CAQE,OAAOkB,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ,EAAmEF,CAAnE;AACD;AACF;;AACD,WAAO;AAAElB,MAAAA;AAAF,KAAP;AACD;AAjBmC,CAAjB,CAArB;AAoBA,OAAO,MAAMqB,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,eAAef,YAAY,CAACgB,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAf","sourcesContent":["import { ApolloServer, gql } from \"apollo-server-micro\";\nimport { makeExecutableSchema } from \"graphql-tools\";\nimport { MongoClient } from \"mongodb\";\nrequire(\"dotenv/config\");\nconst typeDefs = gql`\n  type YoutubeLink {\n    title: String!\n    id: String!\n    date: String!\n  }\n\n  type Query {\n    youtubeLinks: YoutubeLink!\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    youtubeLinks(_parent, _args, _context, _info) {\n      return _context.db\n        .collection(\"youtubelinks\")\n        .find().next()\n        .then((data) => {\n          return {items: data};\n        });\n    },\n  },\n};\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n\nlet db;\nconst apolloServer = new ApolloServer({\n  schema,\n  context: async () => {\n    if (!db) {\n      try {\n        const dbClient = new MongoClient(process.env.MONGO_URL, {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n        });\n\n        if (!dbClient.isConnected()) await dbClient.connect();\n        db = dbClient.db(\"cluster0\");\n      } catch (e) {\n        console.log(\"--->error while connecting via graphql context (db)\", e);\n      }\n    }\n    return { db };\n  },\n});\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default apolloServer.createHandler({ path: \"/api/graphql\" });\n"]},"metadata":{},"sourceType":"module"}
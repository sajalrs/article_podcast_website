{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer, createContext } from \"react\";\nexport const LoginContext = /*#__PURE__*/createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_IS_LOGGED_IN\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedIn: action.payload\n      });\n\n    case \"SET_USER\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const LoginContextProvider = props => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, props.initialState);\n  return __jsx(LoginContext.Provider, {\n    value: [state, dispatch]\n  }, props.children);\n};","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/contexts/reducers/loginContext.js"],"names":["React","useReducer","createContext","LoginContext","reducer","state","action","type","isLoggedIn","payload","user","LoginContextProvider","props","dispatch","initialState","children"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;AAEA,OAAO,MAAMC,YAAY,gBAAGD,aAAa,EAAlC;;AAEP,MAAME,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,UAAU,EAAEF,MAAM,CAACG;AAFrB;;AAIF,SAAK,UAAL;AACE,6CACKJ,KADL;AAEEK,QAAAA,IAAI,EAAEJ,MAAM,CAACG;AAFf;;AAIF;AACE,aAAOJ,KAAP;AAZJ;AAcD,CAfD;;AAiBA,OAAO,MAAMM,oBAAoB,GAAIC,KAAD,IAAW;AAC7C,QAAM;AAAA,OAACP,KAAD;AAAA,OAAQQ;AAAR,MAAoBZ,UAAU,CAACG,OAAD,EAAUQ,KAAK,CAACE,YAAhB,CAApC;AAEA,SACE,MAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE,CAACT,KAAD,EAAQQ,QAAR;AAA9B,KACGD,KAAK,CAACG,QADT,CADF;AAKD,CARM","sourcesContent":["import React, { useReducer, createContext } from \"react\";\n\nexport const LoginContext = createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_IS_LOGGED_IN\":\n      return {\n        ...state,\n        isLoggedIn: action.payload,\n      };\n    case \"SET_USER\":\n      return {\n        ...state,\n        user: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const LoginContextProvider = (props) => {\n  const [state, dispatch] = useReducer(reducer, props.initialState);\n\n  return (\n    <LoginContext.Provider value={[state, dispatch]}>\n      {props.children}\n    </LoginContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
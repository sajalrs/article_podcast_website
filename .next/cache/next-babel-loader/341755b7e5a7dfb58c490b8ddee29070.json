{"ast":null,"code":"import connectDb from \"../middlewares/dbMiddleware.js\";\n\nconst mongoose = require(\"mongoose\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nrequire(\"dotenv/config\");\n\nconst sgMail = require(\"@sendgrid/mail\");\n\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\n\nconst {\n  resetPasswordValidation\n} = require(\"../validation/validation\");\n\nlet User;\n\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n}\n\nconst handler = async (req, res) => {\n  const {\n    error\n  } = resetPasswordValidation(req.body);\n\n  if (error) {\n    const toReturn = error.details[0].message.replace('\"email\"', \"Email\");\n    return res.status(400).send({\n      error: toReturn\n    });\n  }\n\n  await User.findOne({\n    email: req.body.email\n  }, async (err, user) => {\n    if (err || !user) {\n      if (err) {\n        res.send(err);\n      } else if (!user) {\n        res.status(400).send({\n          error: \"Cannot find account matching given email\"\n        });\n      }\n    } else {\n      const secret = `${user.password}-${user.updatedAt}`;\n      const token = jwt.sign({\n        id: user._id,\n        email: user.email\n      }, secret);\n      const passwordResetLink = false ? `www.thefalseninepodcast.com/resetpassword/${user._id}/${token}` : `localhost:3000/resetpassword/${user._id}/${token}`;\n      const msg = {\n        from: `The False 9 Podcast <${process.env.EMAIL}>`,\n        to: user.email,\n        subject: \"Password Reset Link\",\n        text: `Password Reset Link: ${passwordResetLink}`\n      };\n      sgMail.send(msg).then(() => {\n        console.log(\"Email sent\");\n        res.json({\n          message: \"Mail sent\"\n        });\n      }).catch(error => {\n        console.error(error);\n        res.status(400).send({\n          error: error\n        });\n      });\n    }\n  });\n};\n\nexport default connectDb(handler);","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/pages/api/auth/forgotpassword.js"],"names":["connectDb","mongoose","require","jwt","sgMail","setApiKey","process","env","SENDGRID_API_KEY","resetPasswordValidation","User","model","handler","req","res","error","body","toReturn","details","message","replace","status","send","findOne","email","err","user","secret","password","updatedAt","token","sign","id","_id","passwordResetLink","msg","from","EMAIL","to","subject","text","then","console","log","json","catch"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gCAAtB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACAA,OAAO,CAAC,eAAD,CAAP;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,gBAAD,CAAtB;;AACAE,MAAM,CAACC,SAAP,CAAiBC,OAAO,CAACC,GAAR,CAAYC,gBAA7B;;AACA,MAAM;AACJC,EAAAA;AADI,IAEFP,OAAO,CAAC,0BAAD,CAFX;;AAIA,IAAIQ,IAAJ;;AACA,IAAI;AACFA,EAAAA,IAAI,GAAGT,QAAQ,CAACU,KAAT,CAAe,OAAf,CAAP;AACD,CAFD,CAEE,MAAM;AACND,EAAAA,IAAI,GAAGR,OAAO,CAAC,iBAAD,CAAd;AACD;;AAED,MAAMU,OAAO,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAYN,uBAAuB,CAACI,GAAG,CAACG,IAAL,CAAzC;;AACA,MAAID,KAAJ,EAAW;AACT,UAAME,QAAQ,GAAGF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBC,OAAjB,CAAyBC,OAAzB,CAAiC,SAAjC,EAA4C,OAA5C,CAAjB;AACA,WAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEP,MAAAA,KAAK,EAAEE;AAAT,KAArB,CAAP;AACD;;AAED,QAAMP,IAAI,CAACa,OAAL,CAAa;AAAEC,IAAAA,KAAK,EAAEX,GAAG,CAACG,IAAJ,CAASQ;AAAlB,GAAb,EAAwC,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AACjE,QAAID,GAAG,IAAI,CAACC,IAAZ,EAAkB;AAChB,UAAID,GAAJ,EAAS;AACPX,QAAAA,GAAG,CAACQ,IAAJ,CAASG,GAAT;AACD,OAFD,MAEO,IAAI,CAACC,IAAL,EAAW;AAChBZ,QAAAA,GAAG,CACAO,MADH,CACU,GADV,EAEGC,IAFH,CAEQ;AAAEP,UAAAA,KAAK,EAAE;AAAT,SAFR;AAGD;AACF,KARD,MAQO;AACL,YAAMY,MAAM,GAAI,GAAED,IAAI,CAACE,QAAS,IAAGF,IAAI,CAACG,SAAU,EAAlD;AACA,YAAMC,KAAK,GAAG3B,GAAG,CAAC4B,IAAJ,CAAS;AAAEC,QAAAA,EAAE,EAAEN,IAAI,CAACO,GAAX;AAAgBT,QAAAA,KAAK,EAAEE,IAAI,CAACF;AAA5B,OAAT,EAA8CG,MAA9C,CAAd;AACA,YAAMO,iBAAiB,GACrB,QACK,6CAA4CR,IAAI,CAACO,GAAI,IAAGH,KAAM,EADnE,GAEK,gCAA+BJ,IAAI,CAACO,GAAI,IAAGH,KAAM,EAHxD;AAKA,YAAMK,GAAG,GAAG;AACVC,QAAAA,IAAI,EAAG,wBAAuB9B,OAAO,CAACC,GAAR,CAAY8B,KAAM,GADtC;AAEVC,QAAAA,EAAE,EAAEZ,IAAI,CAACF,KAFC;AAGVe,QAAAA,OAAO,EAAE,qBAHC;AAIVC,QAAAA,IAAI,EAAG,wBAAuBN,iBAAkB;AAJtC,OAAZ;AAOA9B,MAAAA,MAAM,CACHkB,IADH,CACQa,GADR,EAEGM,IAFH,CAEQ,MAAM;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA7B,QAAAA,GAAG,CAAC8B,IAAJ,CAAS;AAAEzB,UAAAA,OAAO,EAAE;AAAX,SAAT;AACD,OALH,EAMG0B,KANH,CAMU9B,KAAD,IAAW;AAChB2B,QAAAA,OAAO,CAAC3B,KAAR,CAAcA,KAAd;AACAD,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEP,UAAAA,KAAK,EAAEA;AAAT,SAArB;AACD,OATH;AAUD;AACF,GAnCK,CAAN;AAoCH,CA3CD;;AA6CA,eAAef,SAAS,CAACY,OAAD,CAAxB","sourcesContent":["import connectDb from \"../middlewares/dbMiddleware.js\";\nconst mongoose = require(\"mongoose\");\nconst jwt = require(\"jsonwebtoken\");\nrequire(\"dotenv/config\");\nconst sgMail = require(\"@sendgrid/mail\");\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\nconst {\n  resetPasswordValidation\n} = require(\"../validation/validation\");\n\nlet User;\ntry {\n  User = mongoose.model(\"Users\");\n} catch {\n  User = require(\"../models/Users\");\n}\n\nconst handler = async (req, res) => {\n    const { error } = resetPasswordValidation(req.body);\n    if (error) {\n      const toReturn = error.details[0].message.replace('\"email\"', \"Email\");\n      return res.status(400).send({ error: toReturn });\n    }\n  \n    await User.findOne({ email: req.body.email }, async (err, user) => {\n      if (err || !user) {\n        if (err) {\n          res.send(err);\n        } else if (!user) {\n          res\n            .status(400)\n            .send({ error: \"Cannot find account matching given email\" });\n        }\n      } else {\n        const secret = `${user.password}-${user.updatedAt}`;\n        const token = jwt.sign({ id: user._id, email: user.email }, secret);\n        const passwordResetLink =\n          process.env.NODE_ENV === \"production\"\n            ? `www.thefalseninepodcast.com/resetpassword/${user._id}/${token}`\n            : `localhost:3000/resetpassword/${user._id}/${token}`;\n  \n        const msg = {\n          from: `The False 9 Podcast <${process.env.EMAIL}>`,\n          to: user.email,\n          subject: \"Password Reset Link\",\n          text: `Password Reset Link: ${passwordResetLink}`,\n        };\n  \n        sgMail\n          .send(msg)\n          .then(() => {\n            console.log(\"Email sent\");\n            res.json({ message: \"Mail sent\" });\n          })\n          .catch((error) => {\n            console.error(error);\n            res.status(400).send({ error: error });\n          });\n      }\n    });\n};\n\nexport default connectDb(handler);\n"]},"metadata":{},"sourceType":"module"}
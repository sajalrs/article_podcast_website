{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from \"react\";\nimport Comment from \"./Comment\";\nimport TextEditor from \"../TextEditor/TextEditor\";\nimport { Value } from \"slate\";\nimport { LoginContext } from \"../../contexts/reducers/loginContext\";\nimport styles from \"./Comment.module.css\";\nvar initialValue = {\n  document: {\n    nodes: [{\n      object: \"block\",\n      type: \"paragraph\",\n      nodes: [{\n        object: \"text\",\n        leaves: [{\n          text: \"Edit text and save to post comment...\"\n        }]\n      }]\n    }]\n  }\n};\nvar loginWarning = {\n  document: {\n    nodes: [{\n      object: \"block\",\n      type: \"paragraph\",\n      nodes: [{\n        object: \"text\",\n        leaves: [{\n          text: \"Please login to post comments...\"\n        }]\n      }]\n    }]\n  }\n};\n\nvar CommentBar = function CommentBar(props) {\n  _s();\n\n  var _useContext = useContext(LoginContext),\n      loginState = _useContext[0],\n      loginDispatch = _useContext[1];\n\n  var isLoggedIn = loginState.isLoggedIn;\n\n  var _useState = useState(Value.fromJSON(initialValue)),\n      textEditorValue = _useState[0],\n      setTextEditorValue = _useState[1];\n\n  var postComment = function postComment() {\n    props.postComment(textEditorValue);\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      width: \"100%\"\n    }\n  }, __jsx(\"h1\", {\n    className: styles[\"heading-special\"]\n  }, \"Comments\"), __jsx(\"div\", {\n    style: {\n      borderStyle: \"solid solid solid solid\",\n      borderColor: \"var(--secondary-color)\",\n      width: \"100%\"\n    }\n  }, __jsx(\"div\", {\n    style: {\n      width: \"100%\"\n    }\n  }, __jsx(TextEditor, {\n    value: isLoggedIn ? textEditorValue : Value.fromJSON(loginWarning),\n    setValue: isLoggedIn ? setTextEditorValue : function () {},\n    onSave: function onSave() {\n      postComment();\n    },\n    toolbarFixed: false,\n    styles: styles\n  })), props.comments && props.comments.map(function (item) {\n    return __jsx(Comment, {\n      author: item.author,\n      date: item.updatedAt,\n      commentText: item.content\n    });\n  })));\n};\n\n_s(CommentBar, \"MZ8ZwBoRP5+QhJjZ4/Ad6IZqkk0=\");\n\n_c = CommentBar;\nexport default CommentBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentBar\");","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/components/Comment/CommentBar.js"],"names":["React","useState","useContext","Comment","TextEditor","Value","LoginContext","styles","initialValue","document","nodes","object","type","leaves","text","loginWarning","CommentBar","props","loginState","loginDispatch","isLoggedIn","fromJSON","textEditorValue","setTextEditorValue","postComment","width","borderStyle","borderColor","comments","map","item","author","updatedAt","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,SAASC,YAAT,QAA6B,sCAA7B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,MAAM,EAAE,OADV;AAEEC,MAAAA,IAAI,EAAE,WAFR;AAGEF,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,MAAM,EAAE,MADV;AAEEE,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,IAAI,EAAE;AADR,SADM;AAFV,OADK;AAHT,KADK;AADC;AADS,CAArB;AAqBA,IAAMC,YAAY,GAAG;AACnBN,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,MAAM,EAAE,OADV;AAEEC,MAAAA,IAAI,EAAE,WAFR;AAGEF,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,MAAM,EAAE,MADV;AAEEE,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,IAAI,EAAE;AADR,SADM;AAFV,OADK;AAHT,KADK;AADC;AADS,CAArB;;AAqBA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAAA;;AAAA,oBACQf,UAAU,CAACI,YAAD,CADlB;AAAA,MACrBY,UADqB;AAAA,MACTC,aADS;;AAE5B,MAAMC,UAAU,GAAGF,UAAU,CAACE,UAA9B;;AAF4B,kBAGkBnB,QAAQ,CACpDI,KAAK,CAACgB,QAAN,CAAeb,YAAf,CADoD,CAH1B;AAAA,MAGrBc,eAHqB;AAAA,MAGJC,kBAHI;;AAO5B,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBP,IAAAA,KAAK,CAACO,WAAN,CAAkBF,eAAlB;AACD,GAFD;;AAIA,SACE;AAAK,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAT;AAAZ,KACE;AAAI,IAAA,SAAS,EAAElB,MAAM,CAAC,iBAAD;AAArB,gBADF,EAEE;AACE,IAAA,KAAK,EAAE;AACLmB,MAAAA,WAAW,EAAE,yBADR;AAELC,MAAAA,WAAW,EAAE,wBAFR;AAGLF,MAAAA,KAAK,EAAE;AAHF;AADT,KAOE;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,KAAK,EAAE;AADF;AADT,KAKE,MAAC,UAAD;AACE,IAAA,KAAK,EAAEL,UAAU,GAAGE,eAAH,GAAqBjB,KAAK,CAACgB,QAAN,CAAeN,YAAf,CADxC;AAEE,IAAA,QAAQ,EAAEK,UAAU,GAAGG,kBAAH,GAAwB,YAAM,CAAE,CAFtD;AAGE,IAAA,MAAM,EAAE,kBAAM;AACZC,MAAAA,WAAW;AACZ,KALH;AAME,IAAA,YAAY,EAAE,KANhB;AAOE,IAAA,MAAM,EAAEjB;AAPV,IALF,CAPF,EAuBGU,KAAK,CAACW,QAAN,IACCX,KAAK,CAACW,QAAN,CAAeC,GAAf,CAAmB,UAACC,IAAD,EAAU;AAC3B,WACE,MAAC,OAAD;AACE,MAAA,MAAM,EAAEA,IAAI,CAACC,MADf;AAEE,MAAA,IAAI,EAAED,IAAI,CAACE,SAFb;AAGE,MAAA,WAAW,EAAEF,IAAI,CAACG;AAHpB,MADF;AAOD,GARD,CAxBJ,CAFF,CADF;AAuCD,CAlDD;;GAAMjB,U;;KAAAA,U;AAoDN,eAAeA,UAAf","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport Comment from \"./Comment\";\nimport TextEditor from \"../TextEditor/TextEditor\";\nimport { Value } from \"slate\";\nimport { LoginContext } from \"../../contexts/reducers/loginContext\";\nimport styles from \"./Comment.module.css\";\n\nconst initialValue = {\n  document: {\n    nodes: [\n      {\n        object: \"block\",\n        type: \"paragraph\",\n        nodes: [\n          {\n            object: \"text\",\n            leaves: [\n              {\n                text: \"Edit text and save to post comment...\",\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n};\n\nconst loginWarning = {\n  document: {\n    nodes: [\n      {\n        object: \"block\",\n        type: \"paragraph\",\n        nodes: [\n          {\n            object: \"text\",\n            leaves: [\n              {\n                text: \"Please login to post comments...\",\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n};\n\nconst CommentBar = (props) => {\n  const [loginState, loginDispatch] = useContext(LoginContext);\n  const isLoggedIn = loginState.isLoggedIn;\n  const [textEditorValue, setTextEditorValue] = useState(\n    Value.fromJSON(initialValue)\n  );\n\n  const postComment = () => {\n    props.postComment(textEditorValue);\n  };\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <h1 className={styles[\"heading-special\"]}>Comments</h1>\n      <div\n        style={{\n          borderStyle: \"solid solid solid solid\",\n          borderColor: \"var(--secondary-color)\",\n          width: \"100%\",\n        }}\n      >\n        <div\n          style={{\n            width: \"100%\",\n          }}\n        >\n          <TextEditor\n            value={isLoggedIn ? textEditorValue : Value.fromJSON(loginWarning)}\n            setValue={isLoggedIn ? setTextEditorValue : () => {}}\n            onSave={() => {\n              postComment();\n            }}\n            toolbarFixed={false}\n            styles={styles}\n          />\n        </div>\n\n        {props.comments &&\n          props.comments.map((item) => {\n            return (\n              <Comment\n                author={item.author}\n                date={item.updatedAt}\n                commentText={item.content}\n              />\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default CommentBar;\n"]},"metadata":{},"sourceType":"module"}
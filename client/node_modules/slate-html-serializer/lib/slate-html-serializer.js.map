{"version":3,"file":"slate-html-serializer.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react'\nimport { renderToStaticMarkup } from 'react-dom/server'\nimport typeOf from 'type-of'\nimport { Node, Value } from 'slate'\nimport { Record } from 'immutable'\n\n/**\n * String.\n *\n * @type {String}\n */\n\nconst String = new Record({\n  object: 'string',\n  text: '',\n})\n\n/**\n * A rule to (de)serialize text nodes. This is automatically added to the HTML\n * serializer so that users don't have to worry about text-level serialization.\n *\n * @type {Object}\n */\n\nconst TEXT_RULE = {\n  deserialize(el) {\n    if (el.tagName && el.tagName.toLowerCase() === 'br') {\n      return {\n        object: 'text',\n        text: '\\n',\n        marks: [],\n      }\n    }\n\n    if (el.nodeName === '#text') {\n      if (el.nodeValue && el.nodeValue.match(/<!--.*?-->/)) return\n\n      return {\n        object: 'text',\n        text: el.nodeValue,\n        marks: [],\n      }\n    }\n  },\n\n  serialize(obj, children) {\n    if (obj.object === 'string') {\n      return children.split('\\n').reduce((array, text, i) => {\n        if (i !== 0) array.push(<br key={i} />)\n        array.push(text)\n        return array\n      }, [])\n    }\n  },\n}\n\n/**\n * A default `parseHtml` function that returns the `<body>` using `DOMParser`.\n *\n * @param {String} html\n * @return {Object}\n */\n\nfunction defaultParseHtml(html) {\n  if (typeof DOMParser == 'undefined') {\n    throw new Error(\n      'The native `DOMParser` global which the `Html` serializer uses by default is not present in this environment. You must supply the `options.parseHtml` function instead.'\n    )\n  }\n\n  const parsed = new DOMParser().parseFromString(html, 'text/html')\n  const { body } = parsed\n  // COMPAT: in IE 11 body is null if html is an empty string\n  return body || window.document.createElement('body')\n}\n\n/**\n * HTML serializer.\n *\n * @type {Html}\n */\n\nclass Html {\n  /**\n   * Create a new serializer with `rules`.\n   *\n   * @param {Object} options\n   *   @property {Array} rules\n   *   @property {String|Object|Block} defaultBlock\n   *   @property {Function} parseHtml\n   */\n\n  constructor(options = {}) {\n    let {\n      defaultBlock = 'paragraph',\n      parseHtml = defaultParseHtml,\n      rules = [],\n    } = options\n\n    defaultBlock = Node.createProperties(defaultBlock)\n\n    this.rules = [...rules, TEXT_RULE]\n    this.defaultBlock = defaultBlock\n    this.parseHtml = parseHtml\n  }\n\n  /**\n   * Deserialize pasted HTML.\n   *\n   * @param {String} html\n   * @param {Object} options\n   *   @property {Boolean} toRaw\n   * @return {Value}\n   */\n\n  deserialize = (html, options = {}) => {\n    const { toJSON = false } = options\n    const { defaultBlock, parseHtml } = this\n    const fragment = parseHtml(html)\n    const children = Array.from(fragment.childNodes)\n    let nodes = this.deserializeElements(children)\n\n    // COMPAT: ensure that all top-level inline nodes are wrapped into a block.\n    nodes = nodes.reduce((memo, node, i, original) => {\n      if (node.object === 'block') {\n        memo.push(node)\n        return memo\n      }\n\n      if (i > 0 && original[i - 1].object !== 'block') {\n        const block = memo[memo.length - 1]\n        block.nodes.push(node)\n        return memo\n      }\n\n      const block = {\n        object: 'block',\n        data: {},\n        ...defaultBlock,\n        nodes: [node],\n      }\n\n      memo.push(block)\n      return memo\n    }, [])\n\n    // TODO: pretty sure this is no longer needed.\n    if (nodes.length === 0) {\n      nodes = [\n        {\n          object: 'block',\n          data: {},\n          ...defaultBlock,\n          nodes: [\n            {\n              object: 'text',\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n      ]\n    }\n\n    const json = {\n      object: 'value',\n      document: {\n        object: 'document',\n        data: {},\n        nodes,\n      },\n    }\n\n    const ret = toJSON ? json : Value.fromJSON(json)\n    return ret\n  }\n\n  /**\n   * Deserialize an array of DOM elements.\n   *\n   * @param {Array} elements\n   * @return {Array}\n   */\n\n  deserializeElements = (elements = []) => {\n    let nodes = []\n\n    elements.filter(this.cruftNewline).forEach(element => {\n      const node = this.deserializeElement(element)\n\n      switch (typeOf(node)) {\n        case 'array':\n          nodes = nodes.concat(node)\n          break\n        case 'object':\n          nodes.push(node)\n          break\n      }\n    })\n\n    return nodes\n  }\n\n  /**\n   * Deserialize a DOM element.\n   *\n   * @param {Object} element\n   * @return {Any}\n   */\n\n  deserializeElement = element => {\n    let node\n\n    if (!element.tagName) {\n      element.tagName = ''\n    }\n\n    const next = elements => {\n      if (Object.prototype.toString.call(elements) === '[object NodeList]') {\n        elements = Array.from(elements)\n      }\n\n      switch (typeOf(elements)) {\n        case 'array':\n          return this.deserializeElements(elements)\n        case 'object':\n          return this.deserializeElement(elements)\n        case 'null':\n        case 'undefined':\n          return\n        default:\n          throw new Error(\n            `The \\`next\\` argument was called with invalid children: \"${elements}\".`\n          )\n      }\n    }\n\n    for (const rule of this.rules) {\n      if (!rule.deserialize) continue\n      const ret = rule.deserialize(element, next)\n      const type = typeOf(ret)\n\n      if (\n        type !== 'array' &&\n        type !== 'object' &&\n        type !== 'null' &&\n        type !== 'undefined'\n      ) {\n        throw new Error(\n          `A rule returned an invalid deserialized representation: \"${node}\".`\n        )\n      }\n\n      if (ret === undefined) {\n        continue\n      } else if (ret === null) {\n        return null\n      } else if (ret.object === 'mark') {\n        node = this.deserializeMark(ret)\n      } else {\n        node = ret\n      }\n\n      if (node.object === 'block' || node.object === 'inline') {\n        node.data = node.data || {}\n        node.nodes = node.nodes || []\n      } else if (node.object === 'text') {\n        node.marks = node.marks || []\n        node.text = node.text || ''\n      }\n\n      break\n    }\n\n    return node || next(element.childNodes)\n  }\n\n  /**\n   * Deserialize a `mark` object.\n   *\n   * @param {Object} mark\n   * @return {Array}\n   */\n\n  deserializeMark = mark => {\n    const { type, data } = mark\n\n    const applyMark = node => {\n      if (node.object === 'mark') {\n        const ret = this.deserializeMark(node)\n        return ret\n      } else if (node.object === 'text') {\n        node.marks = node.marks || []\n        node.marks.push({ type, data })\n      } else if (node.nodes) {\n        node.nodes = node.nodes.map(applyMark)\n      }\n\n      return node\n    }\n\n    return mark.nodes.reduce((nodes, node) => {\n      const ret = applyMark(node)\n      if (Array.isArray(ret)) return nodes.concat(ret)\n      nodes.push(ret)\n      return nodes\n    }, [])\n  }\n\n  /**\n   * Serialize a `value` object into an HTML string.\n   *\n   * @param {Value} value\n   * @param {Object} options\n   *   @property {Boolean} render\n   * @return {String|Array}\n   */\n\n  serialize = (value, options = {}) => {\n    const { document } = value\n    const elements = document.nodes.map(this.serializeNode).filter(el => el)\n    if (options.render === false) return elements\n\n    const html = renderToStaticMarkup(<body>{elements}</body>)\n    const inner = html.slice(6, -7)\n    return inner\n  }\n\n  /**\n   * Serialize a `node`.\n   *\n   * @param {Node} node\n   * @return {String}\n   */\n\n  serializeNode = node => {\n    if (node.object === 'text') {\n      const string = new String({ text: node.text })\n      const text = this.serializeString(string)\n\n      return node.marks.reduce((children, mark) => {\n        for (const rule of this.rules) {\n          if (!rule.serialize) continue\n          const ret = rule.serialize(mark, children)\n          if (ret === null) return\n          if (ret) return addKey(ret)\n        }\n\n        throw new Error(\n          `No serializer defined for mark of type \"${mark.type}\".`\n        )\n      }, text)\n    }\n\n    const children = node.nodes.map(this.serializeNode)\n\n    for (const rule of this.rules) {\n      if (!rule.serialize) continue\n      const ret = rule.serialize(node, children)\n      if (ret === null) return\n      if (ret) return addKey(ret)\n    }\n\n    throw new Error(`No serializer defined for node of type \"${node.type}\".`)\n  }\n\n  /**\n   * Serialize a `string`.\n   *\n   * @param {String} string\n   * @return {String}\n   */\n\n  serializeString = string => {\n    for (const rule of this.rules) {\n      if (!rule.serialize) continue\n      const ret = rule.serialize(string, string.text)\n      if (ret) return ret\n    }\n  }\n\n  /**\n   * Filter out cruft newline nodes inserted by the DOM parser.\n   *\n   * @param {Object} element\n   * @return {Boolean}\n   */\n\n  cruftNewline = element => {\n    return !(element.nodeName === '#text' && element.nodeValue === '\\n')\n  }\n}\n\n/**\n * Add a unique key to a React `element`.\n *\n * @param {Element} element\n * @return {Element}\n */\n\nlet key = 0\n\nfunction addKey(element) {\n  return React.cloneElement(element, { key: key++ })\n}\n\n/**\n * Export.\n *\n * @type {Html}\n */\n\nexport default Html\n"],"names":["String","Record","TEXT_RULE","el","tagName","toLowerCase","nodeName","nodeValue","match","obj","children","object","split","reduce","array","text","i","push","defaultParseHtml","html","DOMParser","Error","parsed","parseFromString","body","window","document","createElement","Html","options","defaultBlock","parseHtml","rules","Node","createProperties","deserialize","toJSON","fragment","Array","from","childNodes","nodes","deserializeElements","memo","node","original","block","length","json","ret","Value","fromJSON","elements","filter","cruftNewline","forEach","deserializeElement","element","typeOf","concat","next","Object","prototype","toString","call","rule","type","undefined","deserializeMark","data","marks","mark","applyMark","map","isArray","serialize","value","serializeNode","render","renderToStaticMarkup","inner","slice","string","serializeString","addKey","key","React","cloneElement"],"mappings":"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"}
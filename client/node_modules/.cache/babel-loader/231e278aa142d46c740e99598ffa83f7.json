{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport isHotkey from \"is-hotkey\";\nimport { Editable, withReact, useSlate, Slate } from \"slate-react\";\nimport { Editor, Transforms, createEditor, Node } from \"slate\";\nimport { withHistory } from \"slate-history\";\nimport isUrl from \"is-url\";\nimport imageExtensions from \"image-extensions\";\nconst HOTKEYS = {\n  \"mod+b\": \"bold\",\n  \"mod+i\": \"italic\",\n  \"mod+u\": \"underline\",\n  \"mod+`\": \"code\"\n};\nconst LIST_TYPES = [\"numbered-list\", \"bulleted-list\"];\n\nconst TextEditor = () => {\n  const [value, setValue] = useState(initialValue);\n  const renderElement = useCallback(props => /*#__PURE__*/React.createElement(Element, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 48\n    }\n  })), []);\n  const renderLeaf = useCallback(props => /*#__PURE__*/React.createElement(Leaf, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 45\n    }\n  })), []);\n  const editor = useMemo(() => withImages(withHistory(withReact(createEditor()))), []);\n  return /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MarkButton, {\n    format: \"bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(MarkButton, {\n    format: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(MarkButton, {\n    format: \"underline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(MarkButton, {\n    format: \"code\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlockButton, {\n    format: \"heading-one\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlockButton, {\n    format: \"heading-two\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlockButton, {\n    format: \"block-quote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlockButton, {\n    format: \"numbered-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlockButton, {\n    format: \"bulleted-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlockButton, {\n    format: \"image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    placeholder: \"Enter some rich text\\u2026\",\n    spellCheck: true,\n    autoFocus: true,\n    onKeyDown: event => {\n      for (const hotkey in HOTKEYS) {\n        if (isHotkey(hotkey, event)) {\n          event.preventDefault();\n          const mark = HOTKEYS[hotkey];\n          toggleMark(editor, mark);\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst withImages = editor => {\n  const {\n    insertData,\n    isVoid\n  } = editor;\n\n  editor.isVoid = element => {\n    return element.type === 'image' ? true : isVoid(element);\n  };\n\n  editor.insertData = data => {\n    const text = data.getData('text/plain');\n    const {\n      files\n    } = data;\n\n    if (files && files.length > 0) {\n      for (const file of files) {\n        const reader = new FileReader();\n        const [mime] = file.type.split('/');\n\n        if (mime === 'image') {\n          reader.addEventListener('load', () => {\n            const url = reader.result;\n            insertImage(editor, url);\n          });\n          reader.readAsDataURL(file);\n        }\n      }\n    } else if (isImageUrl(text)) {\n      insertImage(editor, text);\n    } else {\n      insertData(data);\n    }\n  };\n\n  return editor;\n};\n\nconst toggleBlock = (editor, format) => {\n  const isActive = isBlockActive(editor, format);\n  const isList = LIST_TYPES.includes(format);\n  const isImage = format === \"image\";\n  Transforms.unwrapNodes(editor, {\n    match: n => LIST_TYPES.includes(n.type),\n    split: true\n  });\n  Transforms.setNodes(editor, {\n    type: isActive ? \"paragraph\" : isList ? \"list-item\" : !isImage ? format : \"\"\n  });\n\n  if (!isActive && isList) {\n    const block = {\n      type: format,\n      children: []\n    };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\nconst toggleMark = (editor, format) => {\n  const isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nconst isBlockActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n.type === format\n  });\n  return !!match;\n};\n\nconst isMarkActive = (editor, format) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nconst Element = ({\n  attributes,\n  children,\n  element\n}) => {\n  switch (element.type) {\n    case \"block-quote\":\n      return /*#__PURE__*/React.createElement(\"blockquote\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 14\n        }\n      }), children);\n\n    case \"bulleted-list\":\n      return /*#__PURE__*/React.createElement(\"ul\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 14\n        }\n      }), children);\n\n    case \"heading-one\":\n      return /*#__PURE__*/React.createElement(\"h1\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 14\n        }\n      }), children);\n\n    case \"heading-two\":\n      return /*#__PURE__*/React.createElement(\"h2\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 14\n        }\n      }), children);\n\n    case \"list-item\":\n      return /*#__PURE__*/React.createElement(\"li\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 14\n        }\n      }), children);\n\n    case \"numbered-list\":\n      return /*#__PURE__*/React.createElement(\"ol\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 14\n        }\n      }), children);\n\n    case \"image\":\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        contentEditable: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: element.url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }\n      })), children);\n\n    default:\n      return /*#__PURE__*/React.createElement(\"p\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.code) {\n    children = /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.italic) {\n    children = /*#__PURE__*/React.createElement(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.underline) {\n    children = /*#__PURE__*/React.createElement(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 10\n    }\n  }), children);\n};\n\nconst BlockButton = ({\n  format\n}) => {\n  const editor = useSlate();\n\n  if (format === \"image\") {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      active: isBlockActive(editor, format),\n      onMouseDown: event => {\n        event.preventDefault();\n        const url = window.prompt('Enter the URL of the image:');\n        if (!url) return;\n        toggleBlock(editor, format);\n        insertImage(editor, url);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, format);\n  } else {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      active: isBlockActive(editor, format),\n      onMouseDown: event => {\n        event.preventDefault();\n        toggleBlock(editor, format);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }\n    }, format);\n  }\n};\n\nconst MarkButton = ({\n  format\n}) => {\n  const editor = useSlate();\n  return /*#__PURE__*/React.createElement(\"button\", {\n    active: isMarkActive(editor, format),\n    onMouseDown: event => {\n      event.preventDefault();\n      toggleMark(editor, format);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 5\n    }\n  }, format);\n};\n\nconst insertImage = (editor, url) => {\n  const text = {\n    text: \"\"\n  };\n  const image = {\n    type: \"image\",\n    url,\n    children: [text]\n  };\n  Transforms.insertNodes(editor, image);\n};\n\nconst isImageUrl = url => {\n  if (!url) return false;\n  if (!isUrl(url)) return false;\n  const ext = new URL(url).pathname.split(\".\").pop();\n  return imageExtensions.includes(ext);\n};\n\nconst initialValue = [{\n  type: \"paragraph\",\n  children: [{\n    text: \"This is editable \"\n  }, {\n    text: \"rich\",\n    bold: true\n  }, {\n    text: \" text, \"\n  }, {\n    text: \"much\",\n    italic: true\n  }, {\n    text: \" better than a \"\n  }, {\n    text: \"<textarea>\",\n    code: true\n  }, {\n    text: \"!\"\n  }]\n}, {\n  type: \"paragraph\",\n  children: [{\n    text: \"Since it's rich text, you can do things like turn a selection of text \"\n  }, {\n    text: \"bold\",\n    bold: true\n  }, {\n    text: \", or add a semantically rendered block quote in the middle of the page, like this:\"\n  }]\n}, {\n  type: \"block-quote\",\n  children: [{\n    text: \"A wise quote.\"\n  }]\n}, {\n  type: \"paragraph\",\n  children: [{\n    text: \"Try it out for yourself!\"\n  }]\n}, {\n  type: 'image',\n  url: 'https://source.unsplash.com/kFrdX5IeQzI',\n  children: [{\n    text: ''\n  }]\n}];\nexport default TextEditor;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js"],"names":["React","useCallback","useMemo","useState","isHotkey","Editable","withReact","useSlate","Slate","Editor","Transforms","createEditor","Node","withHistory","isUrl","imageExtensions","HOTKEYS","LIST_TYPES","TextEditor","value","setValue","initialValue","renderElement","props","renderLeaf","editor","withImages","event","hotkey","preventDefault","mark","toggleMark","insertData","isVoid","element","type","data","text","getData","files","length","file","reader","FileReader","mime","split","addEventListener","url","result","insertImage","readAsDataURL","isImageUrl","toggleBlock","format","isActive","isBlockActive","isList","includes","isImage","unwrapNodes","match","n","setNodes","block","children","wrapNodes","isMarkActive","removeMark","addMark","nodes","marks","Element","attributes","Leaf","leaf","bold","code","italic","underline","BlockButton","window","prompt","MarkButton","image","insertNodes","ext","URL","pathname","pop"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from \"react\";\nimport isHotkey from \"is-hotkey\";\nimport { Editable, withReact, useSlate, Slate } from \"slate-react\";\nimport { Editor, Transforms, createEditor, Node } from \"slate\";\nimport { withHistory } from \"slate-history\";\nimport isUrl from \"is-url\";\nimport imageExtensions from \"image-extensions\";\nconst HOTKEYS = {\n  \"mod+b\": \"bold\",\n  \"mod+i\": \"italic\",\n  \"mod+u\": \"underline\",\n  \"mod+`\": \"code\",\n};\n\nconst LIST_TYPES = [\"numbered-list\", \"bulleted-list\"];\n\nconst TextEditor = () => {\n  const [value, setValue] = useState(initialValue);\n  const renderElement = useCallback((props) => <Element {...props} />, []);\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, []);\n  const editor = useMemo(() => withImages(withHistory(withReact(createEditor()))), []);\n\n  return (\n    <Slate editor={editor} value={value} onChange={(value) => setValue(value)}>\n      <div>\n        <MarkButton format=\"bold\" />\n        <MarkButton format=\"italic\" />\n        <MarkButton format=\"underline\" />\n        <MarkButton format=\"code\" />\n        <BlockButton format=\"heading-one\" />\n        <BlockButton format=\"heading-two\" />\n        <BlockButton format=\"block-quote\" />\n        <BlockButton format=\"numbered-list\" />\n        <BlockButton format=\"bulleted-list\" />\n        <BlockButton format=\"image\" />\n      </div>\n\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        placeholder=\"Enter some rich text…\"\n        spellCheck\n        autoFocus\n        onKeyDown={(event) => {\n          for (const hotkey in HOTKEYS) {\n            if (isHotkey(hotkey, event)) {\n              event.preventDefault();\n              const mark = HOTKEYS[hotkey];\n              toggleMark(editor, mark);\n            }\n          }\n        }}\n      />\n    </Slate>\n  );\n};\n\n\nconst withImages = editor => {\n    const { insertData, isVoid } = editor\n  \n    editor.isVoid = element => {\n      return element.type === 'image' ? true : isVoid(element)\n    }\n  \n    editor.insertData = data => {\n      const text = data.getData('text/plain')\n      const { files } = data\n  \n      if (files && files.length > 0) {\n        for (const file of files) {\n          const reader = new FileReader()\n          const [mime] = file.type.split('/')\n  \n          if (mime === 'image') {\n            reader.addEventListener('load', () => {\n              const url = reader.result\n              insertImage(editor, url)\n            })\n  \n            reader.readAsDataURL(file)\n          }\n        }\n      } else if (isImageUrl(text)) {\n        insertImage(editor, text)\n      } else {\n        insertData(data)\n      }\n    }\n  \n    return editor\n  }\n\nconst toggleBlock = (editor, format) => {\n  const isActive = isBlockActive(editor, format);\n  const isList = LIST_TYPES.includes(format);\n  const isImage = format === \"image\";\n  Transforms.unwrapNodes(editor, {\n    match: (n) => LIST_TYPES.includes(n.type),\n    split: true,\n  });\n\n  Transforms.setNodes(editor, {\n    type: isActive ? \"paragraph\" : isList ? \"list-item\" : !isImage? format : \"\",\n  });\n\n  if (!isActive && isList) {\n    const block = { type: format, children: [] };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\nconst toggleMark = (editor, format) => {\n  const isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nconst isBlockActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: (n) => n.type === format,\n  });\n  \n    return !!match;\n  \n \n};\n\nconst isMarkActive = (editor, format) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nconst Element = ({ attributes, children, element }) => {\n  switch (element.type) {\n    case \"block-quote\":\n      return <blockquote {...attributes}>{children}</blockquote>;\n    case \"bulleted-list\":\n      return <ul {...attributes}>{children}</ul>;\n    case \"heading-one\":\n      return <h1 {...attributes}>{children}</h1>;\n    case \"heading-two\":\n      return <h2 {...attributes}>{children}</h2>;\n    case \"list-item\":\n      return <li {...attributes}>{children}</li>;\n    case \"numbered-list\":\n      return <ol {...attributes}>{children}</ol>;\n    case \"image\":\n      return (\n        <div {...attributes}>\n          <div contentEditable={false}>\n            <img\n              src={element.url}\n            />\n          </div>\n          {children}\n        </div>\n      );\n    default:\n      return <p {...attributes}>{children}</p>;\n  }\n};\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>;\n  }\n\n  if (leaf.code) {\n    children = <code>{children}</code>;\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>;\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>;\n  }\n\n  return <span {...attributes}>{children}</span>;\n};\n\nconst BlockButton = ({ format }) => {\n  const editor = useSlate();\n  if (format === \"image\") {\n    return (<button\n      active={isBlockActive(editor, format)}\n      onMouseDown={(event) => {\n        event.preventDefault();\n        const url = window.prompt('Enter the URL of the image:')\n        if(!url) return \n        toggleBlock(editor, format);\n        insertImage(editor, url);\n      }}\n    >\n      {format}\n    </button>);\n  } else {\n    return (\n      <button\n        active={isBlockActive(editor, format)}\n        onMouseDown={(event) => {\n          event.preventDefault();\n          toggleBlock(editor, format);\n        }}\n      >\n        {format}\n      </button>\n    );\n  }\n};\n\nconst MarkButton = ({ format }) => {\n  const editor = useSlate();\n  return (\n    <button\n      active={isMarkActive(editor, format)}\n      onMouseDown={(event) => {\n        event.preventDefault();\n        toggleMark(editor, format);\n      }}\n    >\n      {format}\n    </button>\n  );\n};\n\nconst insertImage = (editor, url) => {\n  const text = { text: \"\" };\n  const image = { type: \"image\", url, children: [text] };\n  Transforms.insertNodes(editor, image);\n};\n\nconst isImageUrl = (url) => {\n  if (!url) return false;\n  if (!isUrl(url)) return false;\n  const ext = new URL(url).pathname.split(\".\").pop();\n  return imageExtensions.includes(ext);\n};\n\n\nconst initialValue = [\n  {\n    type: \"paragraph\",\n    children: [\n      { text: \"This is editable \" },\n      { text: \"rich\", bold: true },\n      { text: \" text, \" },\n      { text: \"much\", italic: true },\n      { text: \" better than a \" },\n      { text: \"<textarea>\", code: true },\n      { text: \"!\" },\n    ],\n  },\n  {\n    type: \"paragraph\",\n    children: [\n      {\n        text:\n          \"Since it's rich text, you can do things like turn a selection of text \",\n      },\n      { text: \"bold\", bold: true },\n      {\n        text:\n          \", or add a semantically rendered block quote in the middle of the page, like this:\",\n      },\n    ],\n  },\n  {\n    type: \"block-quote\",\n    children: [{ text: \"A wise quote.\" }],\n  },\n  {\n    type: \"paragraph\",\n    children: [{ text: \"Try it out for yourself!\" }],\n  },\n  {\n    type: 'image',\n    url: 'https://source.unsplash.com/kFrdX5IeQzI',\n    children: [{ text: '' }],\n  },\n];\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}
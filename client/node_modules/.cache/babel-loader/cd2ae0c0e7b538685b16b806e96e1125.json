{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js\";\nimport React, { Component } from 'react';\nimport { Editor } from 'slate-react';\nimport { Value } from 'slate'; // Create our initial value...\n\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [{\n      object: 'block',\n      type: 'paragraph',\n      nodes: [{\n        object: 'text',\n        leaves: [{\n          text: 'My first paragraph!'\n        }]\n      }]\n    }]\n  }\n});\nexport default class TextEditor extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: initialValue\n    };\n\n    this.onChange = ({\n      value\n    }) => {\n      this.setState({\n        value\n      });\n    };\n\n    this.onKeyDown = (e, change) => {\n      /*\n      \twe want all our commands to start with the user pressing ctrl,\n      \tif they don't--we cancel the action.\n      */\n      if (!e.ctrlKey) {\n        return;\n      }\n\n      e.preventDefault();\n      /* Decide what to do based on the key code... */\n\n      switch (e.key) {\n        /* When \"b\" is pressed, add a \"bold\" mark to the text. */\n        case 'b':\n          {\n            change.toggleMark('bold');\n            return true;\n          }\n\n        case 'i':\n          {\n            change.toggleMark('italic');\n            return true;\n          }\n\n        default:\n          {\n            return;\n          }\n      }\n    };\n\n    this.renderMark = props => {\n      switch (props.mark.type) {\n        case 'bold':\n          return /*#__PURE__*/React.createElement(BoldMark, Object.assign({}, props, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 12\n            }\n          }));\n\n        case 'italic':\n          return /*#__PURE__*/React.createElement(ItalicMark, Object.assign({}, props, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 12\n            }\n          }));\n\n        default:\n          {\n            return;\n          }\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Editor, {\n      value: this.state.value,\n      onChange: this.onChange,\n      onKeyDown: this.onKeyDown,\n      renderMark: this.renderMark,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 4\n      }\n    });\n  }\n\n}\n\nconst BoldMark = props => /*#__PURE__*/React.createElement(\"strong\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 2\n  }\n}, props.children);\n\nconst ItalicMark = props => /*#__PURE__*/React.createElement(\"em\", {\n  property: \"italic\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 2\n  }\n}, props.children);","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js"],"names":["React","Component","Editor","Value","initialValue","fromJSON","document","nodes","object","type","leaves","text","TextEditor","state","value","onChange","setState","onKeyDown","e","change","ctrlKey","preventDefault","key","toggleMark","renderMark","props","mark","render","BoldMark","children","ItalicMark"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,KAAT,QAAsB,OAAtB,C,CAEA;;AACA,MAAMC,YAAY,GAAGD,KAAK,CAACE,QAAN,CAAe;AACnCC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,KAAK,EAAE,CACN;AACCC,MAAAA,MAAM,EAAE,OADT;AAECC,MAAAA,IAAI,EAAE,WAFP;AAGCF,MAAAA,KAAK,EAAE,CACN;AACCC,QAAAA,MAAM,EAAE,MADT;AAECE,QAAAA,MAAM,EAAE,CACP;AACCC,UAAAA,IAAI,EAAE;AADP,SADO;AAFT,OADM;AAHR,KADM;AADE;AADyB,CAAf,CAArB;AAsBA,eAAe,MAAMC,UAAN,SAAyBX,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAGjDY,KAHiD,GAGzC;AACPC,MAAAA,KAAK,EAAEV;AADA,KAHyC;;AAAA,SAQjDW,QARiD,GAQtC,CAAC;AAAED,MAAAA;AAAF,KAAD,KAAe;AACzB,WAAKE,QAAL,CAAc;AAAEF,QAAAA;AAAF,OAAd;AACA,KAVgD;;AAAA,SAYjDG,SAZiD,GAYrC,CAACC,CAAD,EAAIC,MAAJ,KAAe;AAE1B;;;;AAKA,UAAI,CAACD,CAAC,CAACE,OAAP,EAAgB;AAAE;AAAQ;;AAC1BF,MAAAA,CAAC,CAACG,cAAF;AAEA;;AACA,cAAQH,CAAC,CAACI,GAAV;AACC;AACA,aAAK,GAAL;AAAU;AACTH,YAAAA,MAAM,CAACI,UAAP,CAAkB,MAAlB;AACA,mBAAO,IAAP;AACA;;AACD,aAAK,GAAL;AAAU;AACTJ,YAAAA,MAAM,CAACI,UAAP,CAAkB,QAAlB;AACA,mBAAO,IAAP;AACA;;AAED;AAAS;AACR;AACA;AAbF;AAgBA,KAvCgD;;AAAA,SAyCjDC,UAzCiD,GAyCpCC,KAAK,IAAI;AACrB,cAAQA,KAAK,CAACC,IAAN,CAAWjB,IAAnB;AACC,aAAK,MAAL;AACC,8BAAO,oBAAC,QAAD,oBAAcgB,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;;AAED,aAAK,QAAL;AACC,8BAAO,oBAAC,UAAD,oBAAgBA,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;;AAED;AAAS;AACR;AACA;AATF;AAWA,KArDgD;AAAA;;AAuDjDE,EAAAA,MAAM,GAAG;AACR,wBACC,oBAAC,MAAD;AACC,MAAA,KAAK,EAAE,KAAKd,KAAL,CAAWC,KADnB;AAEC,MAAA,QAAQ,EAAE,KAAKC,QAFhB;AAGC,MAAA,SAAS,EAAE,KAAKE,SAHjB;AAIC,MAAA,UAAU,EAAE,KAAKO,UAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AASA;;AAjEgD;;AAoElD,MAAMI,QAAQ,GAAGH,KAAK,iBACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACEA,KAAK,CAACI,QADR,CADD;;AAKA,MAAMC,UAAU,GAAGL,KAAK,iBACvB;AAAI,EAAA,QAAQ,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACEA,KAAK,CAACI,QADR,CADD","sourcesContent":["import React, { Component } from 'react'\nimport { Editor } from 'slate-react'\nimport { Value } from 'slate'\n\n// Create our initial value...\nconst initialValue = Value.fromJSON({\n\tdocument: {\n\t\tnodes: [\n\t\t\t{\n\t\t\t\tobject: 'block',\n\t\t\t\ttype: 'paragraph',\n\t\t\t\tnodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tobject: 'text',\n\t\t\t\t\t\tleaves: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: 'My first paragraph!',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n})\n\n\nexport default class TextEditor extends Component {\n\n\n\tstate = {\n\t\tvalue: initialValue,\n\t}\n\n\t// On change, update the app's React state with the new editor value.\n\tonChange = ({ value }) => {\n\t\tthis.setState({ value })\n\t}\n\n\tonKeyDown = (e, change) => {\n\n\t\t/*\n\t\t\twe want all our commands to start with the user pressing ctrl,\n\t\t\tif they don't--we cancel the action.\n\t\t*/\n\n\t\tif (!e.ctrlKey) { return }\n\t\te.preventDefault()\n\n\t\t/* Decide what to do based on the key code... */\n\t\tswitch (e.key) {\n\t\t\t/* When \"b\" is pressed, add a \"bold\" mark to the text. */\n\t\t\tcase 'b': {\n\t\t\t\tchange.toggleMark('bold')\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tcase 'i': {\n\t\t\t\tchange.toggleMark('italic')\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t}\n\t}\n\n\trenderMark = props => {\n\t\tswitch (props.mark.type) {\n\t\t\tcase 'bold':\n\t\t\t\treturn <BoldMark {...props} />\n\n\t\t\tcase 'italic':\n\t\t\t\treturn <ItalicMark {...props} />\n\n\t\t\tdefault: {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Editor\n\t\t\t\tvalue={this.state.value}\n\t\t\t\tonChange={this.onChange}\n\t\t\t\tonKeyDown={this.onKeyDown}\n\t\t\t\trenderMark={this.renderMark}\n\n\t\t\t/>\n\t\t)\n\t}\n}\n\nconst BoldMark = props => (\n\t<strong>\n\t\t{props.children}\n\t</strong>\n);\nconst ItalicMark = props => (\n\t<em property=\"italic\">\n\t\t{props.children}\n\t</em>\n);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js\";\nimport React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor, Text, Node } from \"slate\";\nimport { Slate, Editable, withReact, useFocused, useSelected, useEditor } from \"slate-react\";\nimport imageExtensions from 'image-extensions';\nimport isUrl from \"is-url\";\nimport { withHistory } from \"slate-history\";\nimport { css } from \"emoticon\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([{\n    type: \"paragraph\",\n    children: [{\n      text: \"A line of text in a paragraph.\"\n    }]\n  }]);\n  const editor = useMemo(() => withImages(withHistory(withReact(createEditor()), [])));\n\n  const withImages = editor => {\n    const {\n      insertData,\n      isVoid\n    } = editor;\n\n    editor.isVoid = element => {\n      return element.type === \"image\" ? true : isVoid(element);\n    };\n\n    editor.insertData = data => {\n      const text = data.getData(\"text/plain\");\n      const {\n        files\n      } = data;\n\n      if (files && files.length > 0) {\n        for (const file of files) {\n          const reader = new FileReader();\n          const [mime] = file.type.split(\"/\");\n\n          if (mime === \"image\") {\n            reader.addEventListener(\"load\", () => {\n              const url = reader.result;\n              insertImage(editor, url);\n            });\n            reader.readAsDataURL(file);\n          }\n        }\n      } else if (isImageUrl(text)) {\n        insertImage(editor, text);\n      } else {\n        insertData(data);\n      }\n    };\n\n    return editor;\n  };\n\n  const ImageElement = ({\n    attributes,\n    children,\n    element\n  }) => {\n    const selected = useSelected();\n    const focused = useFocused();\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      contentEditable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: element.url,\n      className: css`\n              display: block;\n              max-width: 100%;\n              max-height: 20em;\n              box-shadow: ${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'};\n            `,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    })), children);\n  };\n\n  const insertImage = (editor, url) => {\n    const text = {\n      text: ''\n    };\n    const image = {\n      type: 'image',\n      url,\n      children: [text]\n    };\n    Transforms.insertNodes(editor, image);\n  };\n\n  const isImageUrl = url => {\n    if (!url) return false;\n    if (!isUrl(url)) return false;\n    const ext = new URL(url).pathname.split('.').pop();\n    return imageExtensions.includes(ext);\n  };\n\n  const renderElement = useCallback(props => {\n    switch (props.element.type) {\n      case \"code\":\n        return /*#__PURE__*/React.createElement(CodeElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 16\n          }\n        }));\n\n      case \"image\":\n        return /*#__PURE__*/React.createElement(ImageElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 18\n          }\n        }));\n\n      default:\n        return /*#__PURE__*/React.createElement(DefaultElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 16\n          }\n        }));\n    }\n  }, []);\n  const renderLeaf = useCallback(props => {\n    return /*#__PURE__*/React.createElement(Leaf, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 12\n      }\n    }));\n  }, []);\n  const CustomEditor = {\n    isBoldMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.bold === true,\n        universal: true\n      });\n      return !!match;\n    },\n\n    isItalicMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.italic === true,\n        universal: true\n      });\n      return !!match;\n    },\n\n    isCodeBlockActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.type === \"code\"\n      });\n      return !!match;\n    },\n\n    toggleBoldMark(editor) {\n      const isActive = CustomEditor.isBoldMarkActive(editor);\n      Transforms.setNodes(editor, {\n        bold: isActive ? null : true\n      }, {\n        match: n => Text.isText(n),\n        split: true\n      });\n    },\n\n    toggleItalicMark(editor) {\n      const isActive = CustomEditor.isItalicMarkActive(editor);\n      Transforms.setNodes(editor, {\n        italic: isActive ? null : true\n      }, {\n        match: n => Text.isText(n),\n        split: true\n      });\n    },\n\n    toggleCodeBlock(editor) {\n      const isActive = CustomEditor.isCodeBlockActive(editor);\n      Transforms.setNodes(editor, {\n        type: isActive ? null : \"code\"\n      }, {\n        match: n => Editor.isBlock(editor, n)\n      });\n    }\n\n  };\n  return /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: newValue => setValue(newValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onMouseDown: event => {\n      event.preventDefault();\n      CustomEditor.toggleBoldMark(editor);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, \"Bold\")), /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: event => {\n      if (!event.ctrlKey) {\n        return;\n      }\n\n      switch (event.key) {\n        case \"`\":\n          {\n            event.preventDefault();\n            CustomEditor.toggleCodeBlock(editor);\n            break;\n          }\n\n        case \"b\":\n          {\n            event.preventDefault();\n            CustomEditor.toggleBoldMark(editor);\n            break;\n          }\n\n        case \"i\":\n          {\n            event.preventDefault();\n            CustomEditor.toggleItalicMark(editor);\n            break;\n          }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst DefaultElement = props => {\n  return /*#__PURE__*/React.createElement(\"p\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 10\n    }\n  }), props.children);\n};\n\nconst CodeElement = props => {\n  return /*#__PURE__*/React.createElement(\"pre\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }, props.children));\n};\n\nconst Leaf = props => {\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, props.attributes, {\n    style: {\n      fontWeight: props.leaf.bold ? \"bold\" : \"normal\",\n      fontStyle: props.leaf.italic ? \"italic\" : \"normal\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }\n  }), props.children);\n};\n\nexport default TextEditor;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js"],"names":["React","useState","useMemo","useEffect","useCallback","createEditor","Transforms","Editor","Text","Node","Slate","Editable","withReact","useFocused","useSelected","useEditor","imageExtensions","isUrl","withHistory","css","TextEditor","value","setValue","type","children","text","editor","withImages","insertData","isVoid","element","data","getData","files","length","file","reader","FileReader","mime","split","addEventListener","url","result","insertImage","readAsDataURL","isImageUrl","ImageElement","attributes","selected","focused","image","insertNodes","ext","URL","pathname","pop","includes","renderElement","props","renderLeaf","CustomEditor","isBoldMarkActive","match","nodes","n","bold","universal","isItalicMarkActive","italic","isCodeBlockActive","toggleBoldMark","isActive","setNodes","isText","toggleItalicMark","toggleCodeBlock","isBlock","newValue","event","preventDefault","ctrlKey","key","DefaultElement","CodeElement","Leaf","fontWeight","leaf","fontStyle"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor, Text, Node } from \"slate\";\nimport {\n  Slate,\n  Editable,\n  withReact,\n  useFocused,\n  useSelected,\n  useEditor,\n} from \"slate-react\";\nimport imageExtensions from 'image-extensions'\nimport isUrl from \"is-url\";\nimport { withHistory } from \"slate-history\";\nimport { css } from \"emoticon\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([\n    {\n      type: \"paragraph\",\n      children: [{ text: \"A line of text in a paragraph.\" }],\n    },\n  ]);\n  const editor = useMemo(() =>\n    withImages(withHistory(withReact(createEditor()), []))\n  );\n\n  const withImages = (editor) => {\n    const { insertData, isVoid } = editor;\n\n    editor.isVoid = (element) => {\n      return element.type === \"image\" ? true : isVoid(element);\n    };\n\n    editor.insertData = (data) => {\n      const text = data.getData(\"text/plain\");\n      const { files } = data;\n      if (files && files.length > 0) {\n        for (const file of files) {\n          const reader = new FileReader();\n          const [mime] = file.type.split(\"/\");\n\n          if (mime === \"image\") {\n            reader.addEventListener(\"load\", () => {\n              const url = reader.result;\n              insertImage(editor, url);\n            });\n\n            reader.readAsDataURL(file);\n          }\n        }\n      } else if (isImageUrl(text)) {\n        insertImage(editor, text);\n      } else {\n        insertData(data);\n      }\n    };\n\n    return editor;\n  };\n\n  const ImageElement = ({ attributes, children, element }) => {\n    const selected = useSelected()\n    const focused = useFocused()\n    return (\n      <div {...attributes}>\n        <div contentEditable={false}>\n          <img\n            src={element.url}\n            className={css`\n              display: block;\n              max-width: 100%;\n              max-height: 20em;\n              box-shadow: ${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'};\n            `}\n          />\n        </div>\n        {children}\n      </div>\n    )\n  }\n\n  const insertImage = (editor, url) => {\n      const text = {text: ''}\n      const image = {type: 'image', url, children: [text]}\n      Transforms.insertNodes(editor,image)\n  }\n\n  const isImageUrl = url => {\n    if (!url) return false\n    if (!isUrl(url)) return false\n    const ext = new URL(url).pathname.split('.').pop()\n    return imageExtensions.includes(ext)\n  }\n\n\n  const renderElement = useCallback((props) => {\n    switch (props.element.type) {\n      case \"code\":\n        return <CodeElement {...props} />;\n      case \"image\":\n          return <ImageElement {...props}/>\n      default:\n        return <DefaultElement {...props} />;\n    }\n  }, []);\n\n  const renderLeaf = useCallback((props) => {\n    return <Leaf {...props} />;\n  }, []);\n\n  const CustomEditor = {\n    isBoldMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: (n) => n.bold === true,\n        universal: true,\n      });\n\n      return !!match;\n    },\n\n    isItalicMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: (n) => n.italic === true,\n        universal: true,\n      });\n\n      return !!match;\n    },\n\n    isCodeBlockActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: (n) => n.type === \"code\",\n      });\n      return !!match;\n    },\n\n    toggleBoldMark(editor) {\n      const isActive = CustomEditor.isBoldMarkActive(editor);\n      Transforms.setNodes(\n        editor,\n        { bold: isActive ? null : true },\n        { match: (n) => Text.isText(n), split: true }\n      );\n    },\n\n    toggleItalicMark(editor) {\n      const isActive = CustomEditor.isItalicMarkActive(editor);\n      Transforms.setNodes(\n        editor,\n        { italic: isActive ? null : true },\n        { match: (n) => Text.isText(n), split: true }\n      );\n    },\n\n    toggleCodeBlock(editor) {\n      const isActive = CustomEditor.isCodeBlockActive(editor);\n      Transforms.setNodes(\n        editor,\n        { type: isActive ? null : \"code\" },\n        { match: (n) => Editor.isBlock(editor, n) }\n      );\n    },\n  };\n\n  return (\n    <Slate\n      editor={editor}\n      value={value}\n      onChange={(newValue) => setValue(newValue)}\n    >\n      <div>\n        <button\n          onMouseDown={(event) => {\n            event.preventDefault();\n            CustomEditor.toggleBoldMark(editor);\n          }}\n        >\n          Bold\n        </button>\n      </div>\n\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        onKeyDown={(event) => {\n          if (!event.ctrlKey) {\n            return;\n          }\n\n          switch (event.key) {\n            case \"`\": {\n              event.preventDefault();\n              CustomEditor.toggleCodeBlock(editor);\n              break;\n            }\n\n            case \"b\": {\n              event.preventDefault();\n              CustomEditor.toggleBoldMark(editor);\n              break;\n            }\n\n            case \"i\": {\n              event.preventDefault();\n              CustomEditor.toggleItalicMark(editor);\n              break;\n            }\n          }\n        }}\n      />\n    </Slate>\n  );\n};\n\nconst DefaultElement = (props) => {\n  return <p {...props.attributes}>{props.children}</p>;\n};\n\nconst CodeElement = (props) => {\n  return (\n    <pre {...props.attributes}>\n      <code>{props.children}</code>\n    </pre>\n  );\n};\n\nconst Leaf = (props) => {\n  return (\n    <span\n      {...props.attributes}\n      style={{\n        fontWeight: props.leaf.bold ? \"bold\" : \"normal\",\n        fontStyle: props.leaf.italic ? \"italic\" : \"normal\",\n      }}\n    >\n      {props.children}\n    </span>\n  );\n};\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}
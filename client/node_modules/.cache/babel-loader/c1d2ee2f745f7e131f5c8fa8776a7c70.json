{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/Comment/Comment.js\";\nimport React, { useState, useRef } from \"react\";\nimport TextEditor from \"../TextEditor/TextEditor\";\nimport { Value } from \"slate\";\nimport styles from \"../Page/Page.module.css\";\nimport FormatToolbar from \"../../components/TextEditor/FormatToolbar\";\nimport { rules } from \"../../components/TextEditor/TextEditor\";\nimport Html from \"slate-html-serializer\";\n\nconst Comment = props => {\n  const textEditorRef = useRef();\n  const [textEditorValue, setTextEditorValue] = useState(Value.fromJSON(props.initialValue));\n  const [isEditable, setIsEditable] = useState(props.isEditable);\n  const html = new Html({\n    rules\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, isEditable ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormatToolbar, {\n    textEditorRef: textEditorRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextEditor, {\n    ref: textEditorRef,\n    value: textEditorValue,\n    setValue: setTextEditorValue,\n    onSave: () => {\n      setIsEditable(false);\n    },\n    toolbarFixed: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: html.serialize(textEditorValue)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default Comment;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/Comment/Comment.js"],"names":["React","useState","useRef","TextEditor","Value","styles","FormatToolbar","rules","Html","Comment","props","textEditorRef","textEditorValue","setTextEditorValue","fromJSON","initialValue","isEditable","setIsEditable","html","__html","serialize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,aAAP,MAA0B,2CAA1B;AACA,SAAQC,KAAR,QAAoB,wCAApB;AAEA,OAAOC,IAAP,MAAiB,uBAAjB;;AACA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,QAAMC,aAAa,GAAGT,MAAM,EAA5B;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,CACpDG,KAAK,CAACU,QAAN,CAAeJ,KAAK,CAACK,YAArB,CADoD,CAAtD;AAGA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAACS,KAAK,CAACM,UAAP,CAA5C;AACA,QAAME,IAAI,GAAG,IAAIV,IAAJ,CAAS;AAAED,IAAAA;AAAF,GAAT,CAAb;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,UAAU,gBAGX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,aAAD;AAAe,IAAA,aAAa,EAAEL,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA,oBAAC,UAAD;AACE,IAAA,GAAG,EAAEA,aADP;AAEE,IAAA,KAAK,EAAEC,eAFT;AAGE,IAAA,QAAQ,EAAEC,kBAHZ;AAIE,IAAA,MAAM,EAAE,MAAM;AAACI,MAAAA,aAAa,CAAC,KAAD,CAAb;AAAqB,KAJtC;AAKE,IAAA,YAAY,EAAE,KALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CAHW,gBAad;AAAK,IAAA,uBAAuB,EAAE;AAAEE,MAAAA,MAAM,EAAGD,IAAI,CAACE,SAAL,CAAeR,eAAf;AAAX,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdC,CADF;AAoBD,CA5BD;;AA8BA,eAAeH,OAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport TextEditor from \"../TextEditor/TextEditor\";\nimport { Value } from \"slate\";\nimport styles from \"../Page/Page.module.css\"\nimport FormatToolbar from \"../../components/TextEditor/FormatToolbar\"\nimport {rules} from \"../../components/TextEditor/TextEditor\"\n\nimport Html from \"slate-html-serializer\";\nconst Comment = (props) => {\n  const textEditorRef = useRef();\n  const [textEditorValue, setTextEditorValue] = useState(\n    Value.fromJSON(props.initialValue)\n  );\n  const [isEditable, setIsEditable] = useState(props.isEditable)\n  const html = new Html({ rules });\n \n  return (\n    <div>\n      {isEditable? \n     \n      (\n      <div>\n      <FormatToolbar textEditorRef={textEditorRef}/>\n      <TextEditor\n        ref={textEditorRef}\n        value={textEditorValue}\n        setValue={setTextEditorValue}\n        onSave={() => {setIsEditable(false)}}\n        toolbarFixed={false}\n      />\n      </div>): \n  (<div dangerouslySetInnerHTML={{ __html:  html.serialize(textEditorValue) }}></div>)\n        \n    }\n    </div>\n  );\n};\n\nexport default Comment;\n"]},"metadata":{},"sourceType":"module"}
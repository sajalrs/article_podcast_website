{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js\";\nimport React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor, Text, Node } from \"slate\";\nimport { Slate, Editable, withReact //   useFocused,\n//   useSelected,\n//   useEditor,\n} from \"slate-react\"; // import imageExtensions from 'image-extensions'\n// import isUrl from \"is-url\";\n// import { withHistory } from \"slate-history\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([{\n    type: \"paragraph\",\n    children: [{\n      text: \"A line of text in a paragraph.\"\n    }]\n  }]);\n  const editor = useMemo(() => withReact(createEditor()), []);\n  const renderElement = useCallback(props => {\n    switch (props.element.type) {\n      case \"code\":\n        return /*#__PURE__*/React.createElement(CodeElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 16\n          }\n        }));\n\n      default:\n        return /*#__PURE__*/React.createElement(DefaultElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 16\n          }\n        }));\n    }\n  }, []);\n  const renderLeaf = useCallback(props => {\n    return /*#__PURE__*/React.createElement(Leaf, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 12\n      }\n    }));\n  }, []);\n  const CustomEditor = {\n    isBoldMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.bold === true,\n        universal: true\n      });\n      return !!match;\n    },\n\n    isItalicMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.italic === true,\n        universal: true\n      });\n      return !!match;\n    },\n\n    isCodeBlockActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.type === \"code\"\n      });\n      return !!match;\n    },\n\n    toggleBoldMark(editor) {\n      const isActive = CustomEditor.isBoldMarkActive(editor);\n      Transforms.setNodes(editor, {\n        bold: isActive ? null : true\n      }, {\n        match: n => Text.isText(n),\n        split: true\n      });\n    },\n\n    toggleItalicMark(editor) {\n      const isActive = CustomEditor.isItalicMarkActive(editor);\n      Transforms.setNodes(editor, {\n        italic: isActive ? null : true\n      }, {\n        match: n => Text.isText(n),\n        split: true\n      });\n    },\n\n    toggleCodeBlock(editor) {\n      const isActive = CustomEditor.isCodeBlockActive(editor);\n      Transforms.setNodes(editor, {\n        type: isActive ? null : \"code\"\n      }, {\n        match: n => Editor.isBlock(editor, n)\n      });\n    }\n\n  };\n  return /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: newValue => setValue(newValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onMouseDown: event => {\n      event.preventDefault();\n      CustomEditor.toggleBoldMark(editor);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Bold\")), /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: event => {\n      if (!event.ctrlKey) {\n        return;\n      }\n\n      switch (event.key) {\n        case \"`\":\n          {\n            event.preventDefault();\n            CustomEditor.toggleCodeBlock(editor);\n            break;\n          }\n\n        case \"b\":\n          {\n            event.preventDefault();\n            CustomEditor.toggleBoldMark(editor);\n            break;\n          }\n\n        case \"i\":\n          {\n            event.preventDefault();\n            CustomEditor.toggleItalicMark(editor);\n            break;\n          }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst DefaultElement = props => {\n  return /*#__PURE__*/React.createElement(\"p\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 10\n    }\n  }), props.children);\n};\n\nconst CodeElement = props => {\n  return /*#__PURE__*/React.createElement(\"pre\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, props.children));\n};\n\nconst Leaf = props => {\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, props.attributes, {\n    style: {\n      fontWeight: props.leaf.bold ? \"bold\" : \"normal\",\n      fontStyle: props.leaf.italic ? \"italic\" : \"normal\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }), props.children);\n};\n\nexport default TextEditor;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js"],"names":["React","useState","useMemo","useEffect","useCallback","createEditor","Transforms","Editor","Text","Node","Slate","Editable","withReact","TextEditor","value","setValue","type","children","text","editor","renderElement","props","element","renderLeaf","CustomEditor","isBoldMarkActive","match","nodes","n","bold","universal","isItalicMarkActive","italic","isCodeBlockActive","toggleBoldMark","isActive","setNodes","isText","split","toggleItalicMark","toggleCodeBlock","isBlock","newValue","event","preventDefault","ctrlKey","key","DefaultElement","attributes","CodeElement","Leaf","fontWeight","leaf","fontStyle"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor, Text, Node} from \"slate\";\nimport {\n    Slate,\n  Editable,\n  withReact,\n//   useFocused,\n//   useSelected,\n//   useEditor,\n} from \"slate-react\";\n// import imageExtensions from 'image-extensions'\n// import isUrl from \"is-url\";\n// import { withHistory } from \"slate-history\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([\n    {\n      type: \"paragraph\",\n      children: [{ text: \"A line of text in a paragraph.\" }],\n    },\n  ]);\n  const editor = useMemo(() =>\n   withReact(createEditor()), []);\n\n\n\n  const renderElement = useCallback((props) => {\n    switch (props.element.type) {\n      case \"code\":\n        return <CodeElement {...props} />;\n      default:\n        return <DefaultElement {...props} />;\n    }\n  }, []);\n\n  const renderLeaf = useCallback((props) => {\n    return <Leaf {...props} />;\n  }, []);\n\n  const CustomEditor = {\n    isBoldMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: (n) => n.bold === true,\n        universal: true,\n      });\n\n      return !!match;\n    },\n\n    isItalicMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: (n) => n.italic === true,\n        universal: true,\n      });\n\n      return !!match;\n    },\n\n    isCodeBlockActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: (n) => n.type === \"code\",\n      });\n      return !!match;\n    },\n\n    toggleBoldMark(editor) {\n      const isActive = CustomEditor.isBoldMarkActive(editor);\n      Transforms.setNodes(\n        editor,\n        { bold: isActive ? null : true },\n        { match: (n) => Text.isText(n), split: true }\n      );\n    },\n\n    toggleItalicMark(editor) {\n      const isActive = CustomEditor.isItalicMarkActive(editor);\n      Transforms.setNodes(\n        editor,\n        { italic: isActive ? null : true },\n        { match: (n) => Text.isText(n), split: true }\n      );\n    },\n\n    toggleCodeBlock(editor) {\n      const isActive = CustomEditor.isCodeBlockActive(editor);\n      Transforms.setNodes(\n        editor,\n        { type: isActive ? null : \"code\" },\n        { match: (n) => Editor.isBlock(editor, n) }\n      );\n    },\n  };\n\n  return (\n    <Slate\n      editor={editor}\n      value={value}\n      onChange={(newValue) => setValue(newValue)}\n    >\n      <div>\n        <button\n          onMouseDown={(event) => {\n            event.preventDefault();\n            CustomEditor.toggleBoldMark(editor);\n          }}\n        >\n          Bold\n        </button>\n      </div>\n\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        onKeyDown={(event) => {\n          if (!event.ctrlKey) {\n            return;\n          }\n\n          switch (event.key) {\n            case \"`\": {\n              event.preventDefault();\n              CustomEditor.toggleCodeBlock(editor);\n              break;\n            }\n\n            case \"b\": {\n              event.preventDefault();\n              CustomEditor.toggleBoldMark(editor);\n              break;\n            }\n\n            case \"i\": {\n              event.preventDefault();\n              CustomEditor.toggleItalicMark(editor);\n              break;\n            }\n          }\n        }}\n      />\n    </Slate>\n  );\n};\n\nconst DefaultElement = (props) => {\n  return <p {...props.attributes}>{props.children}</p>;\n};\n\nconst CodeElement = (props) => {\n  return (\n    <pre {...props.attributes}>\n      <code>{props.children}</code>\n    </pre>\n  );\n};\n\nconst Leaf = (props) => {\n  return (\n    <span\n      {...props.attributes}\n      style={{\n        fontWeight: props.leaf.bold ? \"bold\" : \"normal\",\n        fontStyle: props.leaf.italic ? \"italic\" : \"normal\",\n      }}\n    >\n      {props.children}\n    </span>\n  );\n};\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}
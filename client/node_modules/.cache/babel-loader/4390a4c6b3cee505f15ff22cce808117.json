{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/Comment/Comment.js\";\nimport React, { useState } from \"react\";\nimport TextEditor from \"../TextEditor/TextEditor\";\nimport { Value } from \"slate\";\nimport styles from \"./Comment.module.css\";\nimport styles2 from \"../Page/Page.module.css\";\nimport { getRules } from \"../../components/TextEditor/TextEditor\";\nimport Html from \"slate-html-serializer\";\n\nconst Comment = props => {\n  const [textEditorValue, setTextEditorValue] = useState(Value.fromJSON(props.initialValue));\n  const [isEditable, setIsEditable] = useState(props.isEditable);\n  const rules = getRules(styles2);\n  const html = new Html({\n    rules\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles[\"card-body\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, props.author || props.date ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, props.author && /*#__PURE__*/React.createElement(\"span\", {\n    className: styles[\"author\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 27\n    }\n  }, props.author), props.date && /*#__PURE__*/React.createElement(\"span\", {\n    className: styles[\"date\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 26\n    }\n  }, props.date)) : null, isEditable ? /*#__PURE__*/React.createElement(TextEditor, {\n    value: textEditorValue,\n    setValue: setTextEditorValue,\n    onSave: () => {\n      setIsEditable(false);\n    },\n    toolbarFixed: false,\n    styles: styles2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 8\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: html.serialize(textEditorValue)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default Comment;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/Comment/Comment.js"],"names":["React","useState","TextEditor","Value","styles","styles2","getRules","Html","Comment","props","textEditorValue","setTextEditorValue","fromJSON","initialValue","isEditable","setIsEditable","rules","html","author","date","__html","serialize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,SAAQC,QAAR,QAAuB,wCAAvB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AACA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CACpDE,KAAK,CAACS,QAAN,CAAeH,KAAK,CAACI,YAArB,CADoD,CAAtD;AAGA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAACQ,KAAK,CAACK,UAAP,CAA5C;AAGA,QAAME,KAAK,GAAGV,QAAQ,CAACD,OAAD,CAAtB;AACA,QAAMY,IAAI,GAAG,IAAIV,IAAJ,CAAU;AAACS,IAAAA;AAAD,GAAV,CAAb;AAIA,sBACE;AAAK,IAAA,SAAS,EAAEZ,MAAM,CAAC,WAAD,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKK,KAAK,CAACS,MAAN,IAAgBT,KAAK,CAACU,IAAvB,gBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,KAAK,CAACS,MAAP,iBAAkB;AAAM,IAAA,SAAS,EAAEd,MAAM,CAAC,QAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCK,KAAK,CAACS,MAA1C,CADpB,EAEIT,KAAK,CAACU,IAAP,iBAAgB;AAAM,IAAA,SAAS,EAAEf,MAAM,CAAC,MAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCK,KAAK,CAACU,IAAxC,CAFnB,CADE,GAII,IALR,EAMGL,UAAU,gBACV,oBAAC,UAAD;AACC,IAAA,KAAK,EAAEJ,eADR;AAEC,IAAA,QAAQ,EAAEC,kBAFX;AAGC,IAAA,MAAM,EAAE,MAAM;AAACI,MAAAA,aAAa,CAAC,KAAD,CAAb;AAAqB,KAHrC;AAIC,IAAA,YAAY,EAAE,KAJf;AAKC,IAAA,MAAM,EAAEV,OALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,gBAQd;AAAK,IAAA,uBAAuB,EAAE;AAAEe,MAAAA,MAAM,EAAGH,IAAI,CAACI,SAAL,CAAeX,eAAf;AAAX,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdC,CADF;AAoBD,CAhCD;;AAkCA,eAAeF,OAAf","sourcesContent":["import React, { useState } from \"react\";\nimport TextEditor from \"../TextEditor/TextEditor\";\nimport { Value } from \"slate\";\nimport styles from \"./Comment.module.css\"\nimport styles2 from \"../Page/Page.module.css\"\nimport {getRules} from \"../../components/TextEditor/TextEditor\"\nimport Html from \"slate-html-serializer\";\nconst Comment = (props) => {\n  const [textEditorValue, setTextEditorValue] = useState(\n    Value.fromJSON(props.initialValue)\n  );\n  const [isEditable, setIsEditable] = useState(props.isEditable)\n \n  \n  const rules = getRules(styles2)\n  const html = new Html( {rules});\n \n \n \n  return (\n    <div className={styles[\"card-body\"]}>\n       {(props.author || props.date ) ?\n      <p>\n       {(props.author) && <span className={styles[\"author\"]}>{props.author}</span>}\n        {(props.date) && <span className={styles[\"date\"]}>{props.date}</span>}\n      </p>: null}\n      {isEditable? \n      (<TextEditor\n        value={textEditorValue}\n        setValue={setTextEditorValue}\n        onSave={() => {setIsEditable(false)}}\n        toolbarFixed={false}\n        styles={styles2}\n      />): \n  (<div dangerouslySetInnerHTML={{ __html:  html.serialize(textEditorValue) }}></div>)\n        \n    }\n    </div>\n  );\n};\n\nexport default Comment;\n"]},"metadata":{},"sourceType":"module"}
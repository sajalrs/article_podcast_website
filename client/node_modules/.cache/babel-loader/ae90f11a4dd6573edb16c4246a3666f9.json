{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js\";\nimport React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor, Text } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([{\n    type: \"paragraph\",\n    children: [{\n      text: \"A line of text in a paragraph.\"\n    }]\n  }]);\n  const editor = useMemo(() => withReact(createEditor()), []);\n  const renderElement = useCallback(props => {\n    switch (props.element.type) {\n      case 'code':\n        return /*#__PURE__*/React.createElement(CodeElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 24\n          }\n        }));\n\n      default:\n        return /*#__PURE__*/React.createElement(DefaultElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 24\n          }\n        }));\n    }\n  }, []);\n  const renderLeaf = useCallback(props => {\n    return /*#__PURE__*/React.createElement(Leaf, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 14\n      }\n    }));\n  }, []);\n  return /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: newValue => setValue(newValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: event => {\n      if (!event.ctrlKey) {\n        return;\n      }\n\n      switch (event.key) {\n        case '`':\n          {\n            event.preventDefault();\n            const [match] = Editor.nodes(editor, {\n              match: n => n.type === 'code'\n            });\n            Transforms.setNodes(editor, {\n              type: match ? 'paragraph' : 'code'\n            }, {\n              match: n => Editor.isBlock(editor, n)\n            });\n            break;\n          }\n\n        case 'b':\n          {\n            event.preventDefault();\n            Transforms.setNodes(editor, {\n              bold: true\n            }, {\n              match: n => Text.isText(n),\n              split: true\n            });\n            break;\n          }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst DefaultElement = props => {\n  return /*#__PURE__*/React.createElement(\"p\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 12\n    }\n  }), props.children);\n};\n\nconst CodeElement = props => {\n  return /*#__PURE__*/React.createElement(\"pre\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, props.children));\n};\n\nconst Leaf = props => {\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, props.attributes, {\n    style: {\n      fontWeight: props.leaf.bold ? 'bold' : 'normal'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), props.children);\n};\n\nexport default TextEditor;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js"],"names":["React","useState","useMemo","useEffect","useCallback","createEditor","Transforms","Editor","Text","Slate","Editable","withReact","TextEditor","value","setValue","type","children","text","editor","renderElement","props","element","renderLeaf","newValue","event","ctrlKey","key","preventDefault","match","nodes","n","setNodes","isBlock","bold","isText","split","DefaultElement","attributes","CodeElement","Leaf","fontWeight","leaf"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor,  Text } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([\n    {\n      type: \"paragraph\",\n      children: [{ text: \"A line of text in a paragraph.\" }],\n    },\n  ]);\n  const editor = useMemo(() => withReact(createEditor()), []);\n  \n\n  const renderElement= useCallback(\n      (props) => {\n        switch(props.element.type){\n            case 'code':\n                return <CodeElement {... props}/>\n            default:\n                return <DefaultElement {...props}/>\n        }      \n    },\n      [],\n  )\n\n  const renderLeaf = useCallback(props => {\n      return <Leaf {...props}/>\n  }, [])\n\n  return (\n    <Slate\n      editor={editor}\n      value={value}\n      onChange={(newValue) => setValue(newValue)}\n    >\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        onKeyDown={(event) => {\n            if(!event.ctrlKey){\n                return \n            }\n\n            switch(event.key){\n                case '`':{\n                    event.preventDefault();\n\n                    const [match] = Editor.nodes(editor, {\n                        match: n => n.type === 'code',\n                    });\n    \n    \n                    Transforms.setNodes(\n                        editor,\n                        {type: match ? 'paragraph' : 'code'},\n                        {match: n=> Editor.isBlock(editor, n)}\n                    );\n                    break;\n                }\n\n                case 'b': {\n                    event.preventDefault()\n                    Transforms.setNodes(\n                        editor,\n                        {bold: true},\n                        {match: n=> Text.isText(n), split: true}\n\n                    )\n                    break;\n                }\n\n\n            }\n\n        \n        }}\n      />\n    </Slate>\n  );\n};\n\nconst DefaultElement = props => {\n    return <p {...props.attributes}>{props.children}</p>\n}\n\nconst CodeElement = props => {\n    return( \n        <pre {...props.attributes}>\n            <code>{props.children}</code>\n        </pre>\n    )\n}\n\nconst Leaf = props => {\n    return (\n        <span  \n            {...props.attributes}\n            style={{fontWeight: props.leaf.bold ? 'bold': 'normal'}}\n            >\n                {props.children}\n            </span>\n    )\n}\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}
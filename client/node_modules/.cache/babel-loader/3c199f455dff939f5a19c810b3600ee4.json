{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js\";\nimport React, { useState, useRef } from \"react\";\nimport { Editor } from \"slate-react\";\nimport { Value } from \"slate\";\nimport styles from \"./TextEditor.module.css\";\nimport FormatToolbar from \"./FormatToolbar\";\nimport { isKeyHotkey } from \"is-hotkey\";\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [{\n      object: \"block\",\n      type: \"paragraph\",\n      nodes: [{\n        object: \"text\",\n        leaves: [{\n          text: \"My first paragraph\"\n        }]\n      }]\n    }]\n  }\n});\n\nconst TextEditor = () => {\n  const [value, setValue] = useState(initialValue);\n  const ref = useRef();\n  const isBoldHotkey = isKeyHotkey(\"mod+b\");\n  const isItalicHotkey = isKeyHotkey(\"mod+i\");\n  const isUnderlinedHotkey = isKeyHotkey(\"mod+u\");\n  const isCodeHotkey = isKeyHotkey(\"mod+`\");\n\n  hasMark = type => {\n    return value.activeMarks.some(node => node.type === type);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles[\"overarching\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormatToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, renderMarkButton(\"bold\", \"fas fa-bold\"), renderMarkButton('underlined', 'fas fa-bold'), renderMarkButton('code', 'fas fa-bold'), renderBlockButton('heading-one', 'fas fa-bold'), renderBlockButton('heading-two', 'fas fa-bold'), renderBlockButton('block-quote', 'fas fa-bold'), renderBlockButton('numbered-list', 'fas fa-bold'), renderBlockButton('bulleted-list', 'fas fa-bold')), /*#__PURE__*/React.createElement(Editor, {\n    ref: ref,\n    className: styles[\"Editor\"],\n    value: value,\n    onChange: opts => setValue(opts.value),\n    onKeyDown: onKeyDown,\n    renderMark: renderMark,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\n\nrenderMarkButton = (type, icon) => {\n  const isActive = hasMark(type);\n  return /*#__PURE__*/React.createElement(\"button\", {\n    active: isActive,\n    onPointerDown: evemt => onClickMark(event, type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }\n  }));\n};\n\nrenderBlockButton = (type, icon) => {\n  let isActive = this.hasBlock(type);\n\n  if (['numbered-list', 'bulleted-list'].includes(type)) {\n    const {\n      document,\n      blocks\n    } = value;\n\n    if (blocks.size > 0) {\n      const parent = document.getParent(blocks.first().key);\n      isActive = hasBlock('list-item') && parent && parent.type === type;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    active: isActive,\n    onPointerDown: event => onClickBlock(event, type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }));\n};\n\nrenderBlock = (props, editor, next) => {\n  const {\n    attributes,\n    children,\n    node\n  } = props;\n\n  switch (node.type) {\n    case 'block-quote':\n      return /*#__PURE__*/React.createElement(\"blockquote\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'bulleted-list':\n      return /*#__PURE__*/React.createElement(\"ul\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-one':\n      return /*#__PURE__*/React.createElement(\"h1\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-two':\n      return /*#__PURE__*/React.createElement(\"h2\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'list-item':\n      return /*#__PURE__*/React.createElement(\"li\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'numbered-list':\n      return /*#__PURE__*/React.createElement(\"ol\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 14\n        }\n      }), children);\n\n    default:\n      return next();\n  }\n};\n\nrenderMark = (props, editor, next) => {\n  const {\n    children,\n    mark,\n    attributes\n  } = props;\n\n  switch (mark.type) {\n    case 'bold':\n      return /*#__PURE__*/React.createElement(\"strong\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'code':\n      return /*#__PURE__*/React.createElement(\"code\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'italic':\n      return /*#__PURE__*/React.createElement(\"em\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'underlined':\n      return /*#__PURE__*/React.createElement(\"u\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 14\n        }\n      }), children);\n\n    default:\n      return next();\n  }\n};\n\nonKeyDown = (event, editor, next) => {\n  let mark;\n\n  if (isBoldHotkey(event)) {\n    mark = 'bold';\n  } else if (isItalicHotkey(event)) {\n    mark = 'italic';\n  } else if (isUnderlinedHotkey(event)) {\n    mark = 'underlined';\n  } else if (isCodeHotkey(event)) {\n    mark = 'code';\n  } else {\n    return next();\n  }\n\n  event.preventDefault();\n  editor.toggleMark(mark);\n};\n\nonClickMark = (event, type) => {\n  event.preventDefault();\n  this.editor.toggleMark(type);\n};\n\nonClickBlock = (event, type) => {\n  event.preventDefault();\n  const {\n    editor\n  } = this;\n  const {\n    value\n  } = editor;\n  const {\n    document\n  } = value; // Handle everything but list buttons.\n\n  if (type !== 'bulleted-list' && type !== 'numbered-list') {\n    const isActive = this.hasBlock(type);\n    const isList = this.hasBlock('list-item');\n\n    if (isList) {\n      editor.setBlocks(isActive ? DEFAULT_NODE : type).unwrapBlock('bulleted-list').unwrapBlock('numbered-list');\n    } else {\n      editor.setBlocks(isActive ? DEFAULT_NODE : type);\n    }\n  } else {\n    // Handle the extra wrapping required for list buttons.\n    const isList = this.hasBlock('list-item');\n    const isType = value.blocks.some(block => {\n      return !!document.getClosest(block.key, parent => parent.type === type);\n    });\n\n    if (isList && isType) {\n      editor.setBlocks(DEFAULT_NODE).unwrapBlock('bulleted-list').unwrapBlock('numbered-list');\n    } else if (isList) {\n      editor.unwrapBlock(type === 'bulleted-list' ? 'numbered-list' : 'bulleted-list').wrapBlock(type);\n    } else {\n      editor.setBlocks('list-item').wrapBlock(type);\n    }\n  }\n}; // const BoldMark = (props) => <strong>{props.children}</strong>;\n// const ItalicMark = (props) => <em property=\"italic\">{props.children}</em>;\n\n\nexport default TextEditor; // const onKeyDown = (e, change, next) => {\n//     if (!e.ctrlKey) {\n//       return next();\n//     }\n//     e.preventDefault();\n//     switch (e.key) {\n//       case \"b\": {\n//         change.toggleMark(\"bold\");\n//         return true;\n//       }\n//       case \"i\": {\n//         change.toggleMark(\"italic\");\n//         return true;\n//       }\n//       case \"`\": {\n//         change.toggleMark(\"code\");\n//         return true;\n//       }\n//       case \"u\": {\n//         change.toggleMark(\"underline\");\n//         return true;\n//       }\n//     }\n//   };\n//   const renderMark = (props, editor, next) => {\n//     switch (props.mark.type) {\n//       case \"bold\":\n//         return <BoldMark {...props} />;\n//       case \"italic\":\n//         return <ItalicMark {...props} />;\n//       case \"code\":\n//         return <code {...props.attributes}>{props.children}</code>;\n//       case \"unordered-list\":\n//         return (\n//           <ul {...props.attributes}>\n//             <li>{props.children}</li>\n//           </ul>\n//         );\n//       case \"ordered-list\":\n//         return (\n//           <ol {...props.attributes}>\n//             <li>{props.children}</li>\n//           </ol>\n//         );\n//       case \"underline\":\n//         return <u {...props.attributes}>{props.children}</u>;\n//       default:\n//         return next();\n//     }\n//   };\n//   const onMarkClick = (e, type) => {\n//     e.preventDefault();\n//     console.log(type);\n//     ref.current.toggleMark(type);\n//   };","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js"],"names":["React","useState","useRef","Editor","Value","styles","FormatToolbar","isKeyHotkey","initialValue","fromJSON","document","nodes","object","type","leaves","text","TextEditor","value","setValue","ref","isBoldHotkey","isItalicHotkey","isUnderlinedHotkey","isCodeHotkey","hasMark","activeMarks","some","node","renderMarkButton","renderBlockButton","opts","onKeyDown","renderMark","icon","isActive","evemt","onClickMark","event","hasBlock","includes","blocks","size","parent","getParent","first","key","onClickBlock","renderBlock","props","editor","next","attributes","children","mark","preventDefault","toggleMark","isList","setBlocks","DEFAULT_NODE","unwrapBlock","isType","block","getClosest","wrapBlock"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Editor } from \"slate-react\";\nimport { Value } from \"slate\";\nimport styles from \"./TextEditor.module.css\";\nimport FormatToolbar from \"./FormatToolbar\";\nimport { isKeyHotkey } from \"is-hotkey\";\n\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [\n      {\n        object: \"block\",\n        type: \"paragraph\",\n        nodes: [\n          {\n            object: \"text\",\n            leaves: [\n              {\n                text: \"My first paragraph\",\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst TextEditor = () => {\n  const [value, setValue] = useState(initialValue);\n  const ref = useRef();\n\n  const isBoldHotkey = isKeyHotkey(\"mod+b\");\n  const isItalicHotkey = isKeyHotkey(\"mod+i\");\n  const isUnderlinedHotkey = isKeyHotkey(\"mod+u\");\n  const isCodeHotkey = isKeyHotkey(\"mod+`\");\n\n  hasMark = type => {\n      return value.activeMarks.some(node => node.type === type)\n  }\n\n\n  return (\n    <div className={styles[\"overarching\"]}>\n      <FormatToolbar>\n        {renderMarkButton(\"bold\", \"fas fa-bold\" )}\n        {renderMarkButton('underlined', 'fas fa-bold')}\n          {renderMarkButton('code', 'fas fa-bold')}\n          {renderBlockButton('heading-one', 'fas fa-bold')}\n          {renderBlockButton('heading-two', 'fas fa-bold')}\n          {renderBlockButton('block-quote', 'fas fa-bold')}\n          {renderBlockButton('numbered-list', 'fas fa-bold')}\n          {renderBlockButton('bulleted-list', 'fas fa-bold')}\n\n      </FormatToolbar>\n      <Editor\n        ref={ref}\n        className={styles[\"Editor\"]}\n        value={value}\n        onChange={(opts) => setValue(opts.value)}\n        onKeyDown={onKeyDown}\n        renderMark={renderMark}\n      />\n    </div>\n  );\n};\n\n\nrenderMarkButton = (type, icon) => {\n    const isActive = hasMark(type);\n      return (\n          <button\n              active={isActive}\n              onPointerDown={evemt => onClickMark(event, type)}>\n                  <i className={icon}/>\n          </button>\n      )\n}\n\nrenderBlockButton = (type, icon) => {\n    let isActive = this.hasBlock(type);\n    if(['numbered-list', 'bulleted-list'].includes(type)){\n        const {document, blocks} = value;\n        \n        if(blocks.size>0){\n            const parent = document.getParent(blocks.first().key)\n            isActive = hasBlock('list-item') && parent && parent.type === type\n        }\n    }\n\n    return (\n        <button   \n          active={isActive}\n          onPointerDown={event => onClickBlock(event,type)}>\n              <i className={icon}></i>\n          </button>\n    )\n}\n\nrenderBlock = (props, editor, next) => {\n  const { attributes, children, node } = props\n\n  switch (node.type) {\n    case 'block-quote':\n      return <blockquote {...attributes}>{children}</blockquote>\n    case 'bulleted-list':\n      return <ul {...attributes}>{children}</ul>\n    case 'heading-one':\n      return <h1 {...attributes}>{children}</h1>\n    case 'heading-two':\n      return <h2 {...attributes}>{children}</h2>\n    case 'list-item':\n      return <li {...attributes}>{children}</li>\n    case 'numbered-list':\n      return <ol {...attributes}>{children}</ol>\n    default:\n      return next()\n  }\n}\n\nrenderMark = (props, editor, next) => {\n  const { children, mark, attributes } = props\n\n  switch (mark.type) {\n    case 'bold':\n      return <strong {...attributes}>{children}</strong>\n    case 'code':\n      return <code {...attributes}>{children}</code>\n    case 'italic':\n      return <em {...attributes}>{children}</em>\n    case 'underlined':\n      return <u {...attributes}>{children}</u>\n    default:\n      return next()\n  }\n}\n\nonKeyDown = (event, editor, next) => {\n  let mark\n\n  if (isBoldHotkey(event)) {\n    mark = 'bold'\n  } else if (isItalicHotkey(event)) {\n    mark = 'italic'\n  } else if (isUnderlinedHotkey(event)) {\n    mark = 'underlined'\n  } else if (isCodeHotkey(event)) {\n    mark = 'code'\n  } else {\n    return next()\n  }\n\n  event.preventDefault()\n  editor.toggleMark(mark)\n}\n\nonClickMark = (event, type) => {\n  event.preventDefault()\n  this.editor.toggleMark(type)\n}\n\nonClickBlock = (event, type) => {\n  event.preventDefault()\n\n  const { editor } = this\n  const { value } = editor\n  const { document } = value\n\n  // Handle everything but list buttons.\n  if (type !== 'bulleted-list' && type !== 'numbered-list') {\n    const isActive = this.hasBlock(type)\n    const isList = this.hasBlock('list-item')\n\n    if (isList) {\n      editor\n        .setBlocks(isActive ? DEFAULT_NODE : type)\n        .unwrapBlock('bulleted-list')\n        .unwrapBlock('numbered-list')\n    } else {\n      editor.setBlocks(isActive ? DEFAULT_NODE : type)\n    }\n  } else {\n    // Handle the extra wrapping required for list buttons.\n    const isList = this.hasBlock('list-item')\n    const isType = value.blocks.some(block => {\n      return !!document.getClosest(block.key, parent => parent.type === type)\n    })\n\n    if (isList && isType) {\n      editor\n        .setBlocks(DEFAULT_NODE)\n        .unwrapBlock('bulleted-list')\n        .unwrapBlock('numbered-list')\n    } else if (isList) {\n      editor\n        .unwrapBlock(\n          type === 'bulleted-list' ? 'numbered-list' : 'bulleted-list'\n        )\n        .wrapBlock(type)\n    } else {\n      editor.setBlocks('list-item').wrapBlock(type)\n    }\n  }\n}\n\n\n// const BoldMark = (props) => <strong>{props.children}</strong>;\n\n// const ItalicMark = (props) => <em property=\"italic\">{props.children}</em>;\n\nexport default TextEditor;\n\n\n// const onKeyDown = (e, change, next) => {\n//     if (!e.ctrlKey) {\n//       return next();\n//     }\n//     e.preventDefault();\n\n//     switch (e.key) {\n//       case \"b\": {\n//         change.toggleMark(\"bold\");\n//         return true;\n//       }\n//       case \"i\": {\n//         change.toggleMark(\"italic\");\n//         return true;\n//       }\n//       case \"`\": {\n//         change.toggleMark(\"code\");\n//         return true;\n//       }\n//       case \"u\": {\n//         change.toggleMark(\"underline\");\n//         return true;\n//       }\n//     }\n//   };\n\n//   const renderMark = (props, editor, next) => {\n//     switch (props.mark.type) {\n//       case \"bold\":\n//         return <BoldMark {...props} />;\n//       case \"italic\":\n//         return <ItalicMark {...props} />;\n//       case \"code\":\n//         return <code {...props.attributes}>{props.children}</code>;\n//       case \"unordered-list\":\n//         return (\n//           <ul {...props.attributes}>\n//             <li>{props.children}</li>\n//           </ul>\n//         );\n//       case \"ordered-list\":\n//         return (\n//           <ol {...props.attributes}>\n//             <li>{props.children}</li>\n//           </ol>\n//         );\n//       case \"underline\":\n//         return <u {...props.attributes}>{props.children}</u>;\n//       default:\n//         return next();\n//     }\n//   };\n\n//   const onMarkClick = (e, type) => {\n//     e.preventDefault();\n//     console.log(type);\n//     ref.current.toggleMark(type);\n//   };"]},"metadata":{},"sourceType":"module"}
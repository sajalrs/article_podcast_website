{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/AudioPlayer/AudioPlayer.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\n\nconst AudioPlayer = props => {\n  // const [selectedTrack, setSelectedTrack] = useState({\n  //   title: \"False Nine Podcast #17 Champions League RO16 first leg review\",\n  //   by: \"Ishan Sharma, Susajjan Dhungana and Ojash Dangal\",\n  //   link:\n  //     \"https://anchor.fm/s/333e122c/podcast/play/19475297/sponsor/a3205tm/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2020-09-12%2F9ca05751732f6a1351863756bdfb662b.m4a\",\n  //   duration: 0,\n  //   date: \"Sat, 12 Sep 2020 08:42:34 GMT\",\n  //   currentTime: 0\n  // });\n  // const [player, setPlayer] = useState(\"paused\");\n  const audioRef = useRef();\n  const prevTrack = usePrevious(props.selectedTrack.items[props.selectedTrack.currentlyPlaying]);\n  const prevPlayer = usePrevious(props.player);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const seekBarRef = useRef();\n  useEffect(() => {\n    console.log(\"Ran\");\n\n    if (props.selectedTrack.items[props.selectedTrack.currentlyPlaying] !== prevTrack) {\n      let track;\n      track = props.selectedTrack ? props.selectedTrack.items[props.selectedTrack.currentlyPlaying].link : null;\n\n      if (track) {\n        audioRef.current.src = track;\n        audioRef.current.play();\n        props.setPlayer(\"playing\");\n      }\n    }\n  }, [props.selectedTrack.items[props.selectedTrack.currentlyPlaying]].title);\n  useEffect(() => {\n    console.log(\"Ran this\");\n\n    if (props.player !== prevPlayer) {\n      if (props.player === \"paused\") {\n        audioRef.current.pause();\n      } else if (props.player === \"playing\" && prevPlayer === \"paused\") {\n        audioRef.current.play();\n      }\n    }\n  }, [props.player]);\n  useEffect(() => {\n    audioRef.current.addEventListener(\"timeupdate\", e => {\n      setCurrentTime(e.target.currentTime);\n      setDuration(e.target.duration);\n    });\n    return () => {\n      audioRef.current.removeEventListener(\"timeupdate\", () => {});\n    };\n  }, []);\n\n  const handleSliderChange = e => {\n    const time = duration * (e.target.value / 100);\n    audioRef.current.currentTime = time;\n    setCurrentTime(time);\n  };\n\n  function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  }\n\n  function getTime(time) {\n    if (!isNaN(time)) {\n      return Math.floor(time / 60) + ':' + ('0' + Math.floor(time % 60)).slice(-2);\n    }\n  }\n\n  const progressDuration = getTime(duration);\n  const progressTime = getTime(currentTime);\n  const progress = 100 / duration * currentTime;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, props.selectedTrack.items[props.selectedTrack.currentlyPlaying].title), props.player === \"paused\" && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.setPlayer(\"playing\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Play\"), props.player === \"playing\" && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.setPlayer(\"paused\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, \"Pause\"), props.player === \"playing\" || props.player === \"paused\" ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, progressTime, \" / \", progressDuration, /*#__PURE__*/React.createElement(\"input\", {\n    ref: seekBarRef,\n    type: \"range\",\n    onChange: handleSliderChange,\n    value: progress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  })) : \"\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.forwardPodcasts(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 10\n    }\n  }, \"Forward\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.rewindPodcasts(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 10\n    }\n  }, \"Rewind\")), /*#__PURE__*/React.createElement(\"audio\", {\n    ref: audioRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AudioPlayer;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/AudioPlayer/AudioPlayer.js"],"names":["React","useState","useRef","useEffect","AudioPlayer","props","audioRef","prevTrack","usePrevious","selectedTrack","items","currentlyPlaying","prevPlayer","player","duration","setDuration","currentTime","setCurrentTime","seekBarRef","console","log","track","link","current","src","play","setPlayer","title","pause","addEventListener","e","target","removeEventListener","handleSliderChange","time","value","ref","getTime","isNaN","Math","floor","slice","progressDuration","progressTime","progress","forwardPodcasts","rewindPodcasts"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nconst AudioPlayer = (props) => {\n  // const [selectedTrack, setSelectedTrack] = useState({\n  //   title: \"False Nine Podcast #17 Champions League RO16 first leg review\",\n  //   by: \"Ishan Sharma, Susajjan Dhungana and Ojash Dangal\",\n  //   link:\n  //     \"https://anchor.fm/s/333e122c/podcast/play/19475297/sponsor/a3205tm/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2020-09-12%2F9ca05751732f6a1351863756bdfb662b.m4a\",\n  //   duration: 0,\n  //   date: \"Sat, 12 Sep 2020 08:42:34 GMT\",\n  //   currentTime: 0\n  // });\n  // const [player, setPlayer] = useState(\"paused\");\n  const audioRef = useRef();\n  const prevTrack = usePrevious(props.selectedTrack.items[props.selectedTrack.currentlyPlaying]);\n  const prevPlayer = usePrevious(props.player);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const seekBarRef = useRef()\n  useEffect(() => {\n      console.log(\"Ran\")\n    if (props.selectedTrack.items[props.selectedTrack.currentlyPlaying] !== prevTrack) {\n      let track;\n      track = props.selectedTrack? props.selectedTrack.items[props.selectedTrack.currentlyPlaying].link : null;\n      if (track) {\n\n        audioRef.current.src = track;\n        audioRef.current.play();\n        props.setPlayer(\"playing\");\n      }\n    }\n  }, [props.selectedTrack.items[props.selectedTrack.currentlyPlaying]].title);\n\n  useEffect(() => {\n      console.log(\"Ran this\")\n    if (props.player !== prevPlayer) {\n      if (props.player === \"paused\") {\n        audioRef.current.pause();\n      } else if (props.player === \"playing\" && prevPlayer === \"paused\") {\n        audioRef.current.play();\n      }\n    }\n  },[props.player]);\n\n  useEffect(() => {\n    audioRef.current.addEventListener(\"timeupdate\", e => {\n        setCurrentTime(e.target.currentTime)\n        setDuration(e.target.duration)\n    })\n      return () => {\n        audioRef.current.removeEventListener(\"timeupdate\", () => {});\n      }\n  }, [])\n\n\n  const handleSliderChange = (e) => {\n    const time = duration * (e.target.value / 100);\n    audioRef.current.currentTime = time;\n    setCurrentTime(time)\n  }\n\n  function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  }\n  \n  function getTime(time) {\n    if(!isNaN(time)) {\n      return Math.floor(time / 60) + ':' + ('0' + Math.floor(time % 60)).slice(-2)\n    }\n  }\n  const progressDuration = getTime(duration);\n  const progressTime = getTime(currentTime);\n  const progress = (100/duration) * currentTime\n  return (\n    <div>\n      <div>\n        <h1>{props.selectedTrack.items[props.selectedTrack.currentlyPlaying].title}</h1>\n        {props.player === \"paused\" && (\n          <button onClick={() => props.setPlayer(\"playing\")}>Play</button>\n        )}\n        {props.player === \"playing\" && (\n          <button onClick={() => props.setPlayer(\"paused\")}>Pause</button>\n        )}\n      {props.player === \"playing\" || props.player === \"paused\" ? (\n          <div>\n            {progressTime} / {progressDuration}\n            <input ref={seekBarRef} type=\"range\" onChange={handleSliderChange} value={progress}/>\n          </div>\n        ) : (\n          \"\"\n        )}\n         <button onClick={() => props.forwardPodcasts()}>Forward</button>\n         <button onClick={() => props.rewindPodcasts()}>Rewind</button>\n\n      </div>\n\n      <audio ref={audioRef} />\n      {/*https://anchor.fm/s/333e122c/podcast/play/19475297/sponsor/a3205tm/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2020-09-12%2F9ca05751732f6a1351863756bdfb662b.m4a  */}\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}
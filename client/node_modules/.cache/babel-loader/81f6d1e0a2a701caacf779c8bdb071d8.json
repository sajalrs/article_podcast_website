{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/Comment/Comment.js\";\nimport React, { useState } from \"react\";\nimport TextEditor from \"../TextEditor/TextEditor\";\nimport { Value } from \"slate\";\nimport styles from \"./Comment.module.css\";\nimport { getRules } from \"../../components/TextEditor/TextEditor\";\nimport { Card } from \"../Cards/Card\";\nimport Html from \"slate-html-serializer\";\n\nconst Comment = props => {\n  const author = props.author;\n  const date = Card.formatDate(props.date);\n  const [textEditorValue, setTextEditorValue] = useState(Value.fromJSON(props.initialValue));\n  const [isEditable, setIsEditable] = useState(props.isEditable);\n  const rules = getRules(styles);\n  const html = new Html({\n    rules\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles[\"card-body\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, author || date ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, author && /*#__PURE__*/React.createElement(\"span\", {\n    className: styles[\"author\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, author), date && /*#__PURE__*/React.createElement(\"span\", {\n    className: styles[\"date\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 20\n    }\n  }, date)) : null, isEditable ? /*#__PURE__*/React.createElement(TextEditor, {\n    value: textEditorValue,\n    setValue: setTextEditorValue,\n    onSave: () => {\n      setIsEditable(false);\n    },\n    toolbarFixed: false,\n    styles: styles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: html.serialize(textEditorValue)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Comment;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/Comment/Comment.js"],"names":["React","useState","TextEditor","Value","styles","getRules","Card","Html","Comment","props","author","date","formatDate","textEditorValue","setTextEditorValue","fromJSON","initialValue","isEditable","setIsEditable","rules","html","__html","serialize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,QAAT,QAAyB,wCAAzB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AACA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,QAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,QAAMC,IAAI,GAAGL,IAAI,CAACM,UAAL,CAAgBH,KAAK,CAACE,IAAtB,CAAb;AACA,QAAM,CAACE,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CACpDE,KAAK,CAACY,QAAN,CAAeN,KAAK,CAACO,YAArB,CADoD,CAAtD;AAGA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAACQ,KAAK,CAACQ,UAAP,CAA5C;AAEA,QAAME,KAAK,GAAGd,QAAQ,CAACD,MAAD,CAAtB;AACA,QAAMgB,IAAI,GAAG,IAAIb,IAAJ,CAAS;AAAEY,IAAAA;AAAF,GAAT,CAAb;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEf,MAAM,CAAC,WAAD,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,MAAM,IAAIC,IAAV,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,MAAM,iBACL;AAAM,IAAA,SAAS,EAAEN,MAAM,CAAC,QAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCM,MAApC,CAFJ,EAIGC,IAAI,iBAAI;AAAM,IAAA,SAAS,EAAEP,MAAM,CAAC,MAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCO,IAAlC,CAJX,CADD,GAOG,IARN,EASGM,UAAU,gBACT,oBAAC,UAAD;AACE,IAAA,KAAK,EAAEJ,eADT;AAEE,IAAA,QAAQ,EAAEC,kBAFZ;AAGE,IAAA,MAAM,EAAE,MAAM;AACZI,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KALH;AAME,IAAA,YAAY,EAAE,KANhB;AAOE,IAAA,MAAM,EAAEd,MAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADS,gBAWT;AACE,IAAA,uBAAuB,EAAE;AAAEiB,MAAAA,MAAM,EAAED,IAAI,CAACE,SAAL,CAAeT,eAAf;AAAV,KAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBJ,CADF;AA2BD,CAtCD;;AAwCA,eAAeL,OAAf","sourcesContent":["import React, { useState } from \"react\";\nimport TextEditor from \"../TextEditor/TextEditor\";\nimport { Value } from \"slate\";\nimport styles from \"./Comment.module.css\";\nimport { getRules } from \"../../components/TextEditor/TextEditor\";\nimport { Card } from \"../Cards/Card\";\nimport Html from \"slate-html-serializer\";\nconst Comment = (props) => {\n  const author = props.author;\n  const date = Card.formatDate(props.date);\n  const [textEditorValue, setTextEditorValue] = useState(\n    Value.fromJSON(props.initialValue)\n  );\n  const [isEditable, setIsEditable] = useState(props.isEditable);\n\n  const rules = getRules(styles);\n  const html = new Html({ rules });\n\n  return (\n    <div className={styles[\"card-body\"]}>\n      {author || date ? (\n        <p>\n          {author && (\n            <span className={styles[\"author\"]}>{author}</span>\n          )}\n          {date && <span className={styles[\"date\"]}>{date}</span>}\n        </p>\n      ) : null}\n      {isEditable ? (\n        <TextEditor\n          value={textEditorValue}\n          setValue={setTextEditorValue}\n          onSave={() => {\n            setIsEditable(false);\n          }}\n          toolbarFixed={false}\n          styles={styles}\n        />\n      ) : (\n        <div\n          dangerouslySetInnerHTML={{ __html: html.serialize(textEditorValue) }}\n        ></div>\n      )}\n    </div>\n  );\n};\n\nexport default Comment;\n"]},"metadata":{},"sourceType":"module"}
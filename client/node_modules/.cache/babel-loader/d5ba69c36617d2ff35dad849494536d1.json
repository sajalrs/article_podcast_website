{"ast":null,"code":"import { Block, Mark, Node, Value } from 'slate';\nimport { Set } from 'immutable';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Deserialize a plain text `string` to a Slate value.\n *\n * @param {String} string\n * @param {Object} options\n *   @property {Boolean} toJSON\n *   @property {String|Object|Block} defaultBlock\n *   @property {Array|Set} defaultMarks\n * @return {Value}\n */\n\n\nfunction deserialize(string) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$defaultBlock = options.defaultBlock,\n      defaultBlock = _options$defaultBlock === undefined ? 'line' : _options$defaultBlock,\n      _options$defaultMarks = options.defaultMarks,\n      defaultMarks = _options$defaultMarks === undefined ? [] : _options$defaultMarks,\n      _options$delimiter = options.delimiter,\n      delimiter = _options$delimiter === undefined ? '\\n' : _options$delimiter,\n      _options$toJSON = options.toJSON,\n      toJSON = _options$toJSON === undefined ? false : _options$toJSON;\n\n  if (Set.isSet(defaultMarks)) {\n    defaultMarks = defaultMarks.toArray();\n  }\n\n  defaultBlock = Node.createProperties(defaultBlock);\n  defaultMarks = defaultMarks.map(Mark.createProperties);\n  var json = {\n    object: 'value',\n    document: {\n      object: 'document',\n      data: {},\n      nodes: string.split(delimiter).map(function (line) {\n        return _extends({}, defaultBlock, {\n          object: 'block',\n          data: {},\n          nodes: [{\n            object: 'text',\n            text: line,\n            marks: defaultMarks\n          }]\n        });\n      })\n    }\n  };\n  var ret = toJSON ? json : Value.fromJSON(json);\n  return ret;\n}\n/**\n * Serialize a Slate `value` to a plain text string.\n *\n * @param {Value} value\n * @return {String}\n */\n\n\nfunction serialize(value) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return serializeNode(value.document, options);\n}\n/**\n * Serialize a `node` to plain text.\n *\n * @param {Node} node\n * @return {String}\n */\n\n\nfunction serializeNode(node) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$delimiter2 = options.delimiter,\n      delimiter = _options$delimiter2 === undefined ? '\\n' : _options$delimiter2;\n\n  if (node.object === 'document' || node.object === 'block' && Block.isBlockList(node.nodes)) {\n    return node.nodes.map(serializeNode).join(delimiter);\n  } else {\n    return node.text;\n  }\n}\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nvar index = {\n  deserialize: deserialize,\n  serialize: serialize\n};\nexport default index;","map":{"version":3,"sources":["../src/index.js"],"names":["options","defaultBlock","defaultMarks","delimiter","toJSON","Set","Node","Mark","json","ret","Value","serializeNode","value","node","Block"],"mappings":";;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;AAWA,SAAA,WAAA,CAAA,MAAA,EAA2C;MAAdA,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,E;8BAMjCA,OANqC,CAAA,Y;MAEvCC,YAFuC,GAAA,qBAAA,KAAA,SAAA,GAAA,MAAA,GAAA,qB;8BAMrCD,OANqC,CAAA,Y;MAGvCE,YAHuC,GAAA,qBAAA,KAAA,SAAA,GAAA,EAAA,GAAA,qB;2BAMrCF,OANqC,CAAA,S;MAIvCG,SAJuC,GAAA,kBAAA,KAAA,SAAA,GAAA,IAAA,GAAA,kB;wBAMrCH,OANqC,CAAA,M;MAKvCI,MALuC,GAAA,eAAA,KAAA,SAAA,GAAA,KAAA,GAAA,e;;MAQrCC,GAAAA,CAAAA,KAAAA,CAAJ,YAAIA,C,EAAyB;mBACZH,YAAAA,CAAf,OAAeA,E;;;iBAGFI,IAAAA,CAAAA,gBAAAA,CAAf,YAAeA,C;iBACAJ,YAAAA,CAAAA,GAAAA,CAAiBK,IAAAA,CAAhC,gBAAeL,C;MAETM,IAAAA,GAAO;YAAA,OAAA;cAED;cAAA,UAAA;YAAA,EAAA;aAGD,MAAA,CAAA,KAAA,CAAA,SAAA,EAAA,GAAA,CAA4B,UAAA,IAAA,EAAQ;4BACzC,Y,EAAA;kBAAA,OAAA;gBAAA,EAAA;iBAIS,CACL;oBAAA,MAAA;kBAAA,IAAA;mBAGSN;AAHT,WADK;AAJT,S;AADK,OAAA;AAHC;AAFC,G;MAsBPO,GAAAA,GAAML,MAAAA,GAAAA,IAAAA,GAAgBM,KAAAA,CAAAA,QAAAA,CAA5B,IAA4BA,C;SAC5B,G;;;;;;;;;;AAUF,SAAA,SAAA,CAAA,KAAA,EAAwC;MAAdV,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,E;SAC3BW,aAAAA,CAAcC,KAAAA,CAAdD,QAAAA,EAAP,OAAOA,C;;;;;;;;;;AAUT,SAAA,aAAA,CAAA,IAAA,EAA2C;MAAdX,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,E;4BACRA,OADY,CAAA,S;MACjCG,SADiC,GAAA,mBAAA,KAAA,SAAA,GAAA,IAAA,GAAA,mB;;MAIvCU,IAAAA,CAAAA,MAAAA,KAAAA,UAAAA,IACCA,IAAAA,CAAAA,MAAAA,KAAAA,OAAAA,IAA2BC,KAAAA,CAAAA,WAAAA,CAAkBD,IAAAA,CAFhD,KAE8BC,C,EAC5B;WACOD,IAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,aAAAA,EAAAA,IAAAA,CAAP,SAAOA,C;AAJT,G,MAKO;WACEA,IAAAA,CAAP,I;;;;;;;;;;AAUJ,IAAA,KAAA,GAAe;eAAA,WAAA;;AAAA,CAAf","sourcesContent":["import { Block, Mark, Node, Value } from 'slate'\nimport { Set } from 'immutable'\n\n/**\n * Deserialize a plain text `string` to a Slate value.\n *\n * @param {String} string\n * @param {Object} options\n *   @property {Boolean} toJSON\n *   @property {String|Object|Block} defaultBlock\n *   @property {Array|Set} defaultMarks\n * @return {Value}\n */\n\nfunction deserialize(string, options = {}) {\n  let {\n    defaultBlock = 'line',\n    defaultMarks = [],\n    delimiter = '\\n',\n    toJSON = false,\n  } = options\n\n  if (Set.isSet(defaultMarks)) {\n    defaultMarks = defaultMarks.toArray()\n  }\n\n  defaultBlock = Node.createProperties(defaultBlock)\n  defaultMarks = defaultMarks.map(Mark.createProperties)\n\n  const json = {\n    object: 'value',\n    document: {\n      object: 'document',\n      data: {},\n      nodes: string.split(delimiter).map(line => {\n        return {\n          ...defaultBlock,\n          object: 'block',\n          data: {},\n          nodes: [\n            {\n              object: 'text',\n              text: line,\n              marks: defaultMarks,\n            },\n          ],\n        }\n      }),\n    },\n  }\n\n  const ret = toJSON ? json : Value.fromJSON(json)\n  return ret\n}\n\n/**\n * Serialize a Slate `value` to a plain text string.\n *\n * @param {Value} value\n * @return {String}\n */\n\nfunction serialize(value, options = {}) {\n  return serializeNode(value.document, options)\n}\n\n/**\n * Serialize a `node` to plain text.\n *\n * @param {Node} node\n * @return {String}\n */\n\nfunction serializeNode(node, options = {}) {\n  const { delimiter = '\\n' } = options\n\n  if (\n    node.object === 'document' ||\n    (node.object === 'block' && Block.isBlockList(node.nodes))\n  ) {\n    return node.nodes.map(serializeNode).join(delimiter)\n  } else {\n    return node.text\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  deserialize,\n  serialize,\n}\n"]},"metadata":{},"sourceType":"module"}
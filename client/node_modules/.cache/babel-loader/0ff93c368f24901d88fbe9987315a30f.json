{"ast":null,"code":"import { Block, Change, Data, Document, Inline, Leaf, Mark, Node, Range, Selection, Value, Text } from 'slate';\n/**\n * Create a prop type checker for Slate objects with `name` and `validate`.\n *\n * @param {String} name\n * @param {Function} validate\n * @return {Function}\n */\n\nfunction create(name, validate) {\n  function check(isRequired, props, propName, componentName, location) {\n    var value = props[propName];\n\n    if (value == null && !isRequired) {\n      return null;\n    }\n\n    if (value == null && isRequired) {\n      return new Error('The ' + location + ' `' + propName + '` is marked as required in `' + componentName + '`, but it was not supplied.');\n    }\n\n    if (validate(value)) {\n      return null;\n    }\n\n    return new Error('Invalid ' + location + ' `' + propName + '` supplied to `' + componentName + '`, expected a Slate `' + name + '` but received: ' + value);\n  }\n\n  function propType() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return check.apply(undefined, [false].concat(args));\n  }\n\n  propType.isRequired = function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return check.apply(undefined, [true].concat(args));\n  };\n\n  return propType;\n}\n/**\n * Prop type checkers.\n *\n * @type {Object}\n */\n\n\nvar Types = {\n  block: create('Block', function (v) {\n    return Block.isBlock(v);\n  }),\n  blocks: create('List<Block>', function (v) {\n    return Block.isBlockList(v);\n  }),\n  change: create('Change', function (v) {\n    return Change.isChange(v);\n  }),\n  data: create('Data', function (v) {\n    return Data.isData(v);\n  }),\n  document: create('Document', function (v) {\n    return Document.isDocument(v);\n  }),\n  inline: create('Inline', function (v) {\n    return Inline.isInline(v);\n  }),\n  inlines: create('Inline', function (v) {\n    return Inline.isInlineList(v);\n  }),\n  leaf: create('Leaf', function (v) {\n    return Leaf.isLeaf(v);\n  }),\n  leaves: create('List<Leaf>', function (v) {\n    return Leaf.isLeafList(v);\n  }),\n  mark: create('Mark', function (v) {\n    return Mark.isMark(v);\n  }),\n  marks: create('Set<Mark>', function (v) {\n    return Mark.isMarkSet(v);\n  }),\n  node: create('Node', function (v) {\n    return Node.isNode(v);\n  }),\n  nodes: create('List<Node>', function (v) {\n    return Node.isNodeList(v);\n  }),\n  range: create('Range', function (v) {\n    return Range.isRange(v);\n  }),\n  ranges: create('List<Range>', function (v) {\n    return Range.isRangeList(v);\n  }),\n  selection: create('Selection', function (v) {\n    return Selection.isSelection(v);\n  }),\n  value: create('Value', function (v) {\n    return Value.isValue(v);\n  }),\n  text: create('Text', function (v) {\n    return Text.isText(v);\n  }),\n  texts: create('List<Text>', function (v) {\n    return Text.isTextList(v);\n  })\n  /**\n   * Export.\n   *\n   * @type {Object}\n   */\n\n};\nexport default Types;","map":{"version":3,"sources":["../src/index.js"],"names":["value","props","validate","args","check","Types","Block","Change","Data","Document","Inline","Leaf","Mark","Node","Range","Selection","Value","Text"],"mappings":"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","sourcesContent":["import {\n  Block,\n  Change,\n  Data,\n  Document,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Range,\n  Selection,\n  Value,\n  Text,\n} from 'slate'\n\n/**\n * Create a prop type checker for Slate objects with `name` and `validate`.\n *\n * @param {String} name\n * @param {Function} validate\n * @return {Function}\n */\n\nfunction create(name, validate) {\n  function check(isRequired, props, propName, componentName, location) {\n    const value = props[propName]\n\n    if (value == null && !isRequired) {\n      return null\n    }\n\n    if (value == null && isRequired) {\n      return new Error(\n        `The ${location} \\`${propName}\\` is marked as required in \\`${componentName}\\`, but it was not supplied.`\n      )\n    }\n\n    if (validate(value)) {\n      return null\n    }\n\n    return new Error(\n      `Invalid ${location} \\`${propName}\\` supplied to \\`${componentName}\\`, expected a Slate \\`${name}\\` but received: ${value}`\n    )\n  }\n\n  function propType(...args) {\n    return check(false, ...args)\n  }\n\n  propType.isRequired = function(...args) {\n    return check(true, ...args)\n  }\n\n  return propType\n}\n\n/**\n * Prop type checkers.\n *\n * @type {Object}\n */\n\nconst Types = {\n  block: create('Block', v => Block.isBlock(v)),\n  blocks: create('List<Block>', v => Block.isBlockList(v)),\n  change: create('Change', v => Change.isChange(v)),\n  data: create('Data', v => Data.isData(v)),\n  document: create('Document', v => Document.isDocument(v)),\n  inline: create('Inline', v => Inline.isInline(v)),\n  inlines: create('Inline', v => Inline.isInlineList(v)),\n  leaf: create('Leaf', v => Leaf.isLeaf(v)),\n  leaves: create('List<Leaf>', v => Leaf.isLeafList(v)),\n  mark: create('Mark', v => Mark.isMark(v)),\n  marks: create('Set<Mark>', v => Mark.isMarkSet(v)),\n  node: create('Node', v => Node.isNode(v)),\n  nodes: create('List<Node>', v => Node.isNodeList(v)),\n  range: create('Range', v => Range.isRange(v)),\n  ranges: create('List<Range>', v => Range.isRangeList(v)),\n  selection: create('Selection', v => Selection.isSelection(v)),\n  value: create('Value', v => Value.isValue(v)),\n  text: create('Text', v => Text.isText(v)),\n  texts: create('List<Text>', v => Text.isTextList(v)),\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Types\n"]},"metadata":{},"sourceType":"module"}
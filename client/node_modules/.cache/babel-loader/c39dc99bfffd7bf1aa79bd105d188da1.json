{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js\";\nimport React, { useState, useRef } from \"react\";\nimport { Editor } from \"slate-react\";\nimport { Value } from \"slate\";\nimport styles from \"./TextEditor.module.css\";\nimport FormatToolbar from \"./FormatToolbar\";\nimport { isKeyHotkey } from \"is-hotkey\";\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [{\n      object: \"block\",\n      type: \"paragraph\",\n      nodes: [{\n        object: \"text\",\n        leaves: [{\n          text: \"My first paragraph\"\n        }]\n      }]\n    }]\n  }\n});\n\nconst TextEditor = () => {\n  const [value, setValue] = useState(initialValue);\n  const ref = useRef();\n  const DEFAULT_NODE = 'paragraph';\n  const isBoldHotkey = isKeyHotkey(\"mod+b\");\n  const isItalicHotkey = isKeyHotkey(\"mod+i\");\n  const isUnderlinedHotkey = isKeyHotkey(\"mod+u\");\n  const isCodeHotkey = isKeyHotkey(\"mod+`\");\n\n  const hasMark = type => {\n    return value.activeMarks.some(node => node.type === type);\n  };\n\n  const hasBlock = type => {\n    return value.blocks.some(node => node.type === type);\n  };\n\n  const renderMarkButton = (type, icon) => {\n    const isActive = hasMark(type);\n    return /*#__PURE__*/React.createElement(\"button\", {\n      active: isActive,\n      onPointerDown: event => onClickMark(event, type),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  const renderBlockButton = (type, icon) => {\n    let isActive = hasBlock(type);\n\n    if ([\"numbered-list\", \"bulleted-list\"].includes(type)) {\n      const {\n        document,\n        blocks\n      } = value;\n\n      if (blocks.size > 0) {\n        const parent = document.getParent(blocks.first().key);\n        isActive = hasBlock(\"list-item\") && parent && parent.type === type;\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"button\", {\n      active: isActive,\n      onPointerDown: event => onClickBlock(event, type),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  const renderBlock = (props, editor, next) => {\n    const {\n      attributes,\n      children,\n      node\n    } = props;\n\n    switch (node.type) {\n      case \"block-quote\":\n        return /*#__PURE__*/React.createElement(\"blockquote\", Object.assign({}, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 16\n          }\n        }), children);\n\n      case \"bulleted-list\":\n        return /*#__PURE__*/React.createElement(\"ul\", Object.assign({}, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 16\n          }\n        }), children);\n\n      case \"heading-one\":\n        return /*#__PURE__*/React.createElement(\"h1\", Object.assign({}, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 16\n          }\n        }), children);\n\n      case \"heading-two\":\n        return /*#__PURE__*/React.createElement(\"h2\", Object.assign({}, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 16\n          }\n        }), children);\n\n      case \"list-item\":\n        return /*#__PURE__*/React.createElement(\"li\", Object.assign({}, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 16\n          }\n        }), children);\n\n      case \"numbered-list\":\n        return /*#__PURE__*/React.createElement(\"ol\", Object.assign({}, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 16\n          }\n        }), children);\n\n      default:\n        return next();\n    }\n  };\n\n  const renderMark = (props, editor, next) => {\n    const {\n      children,\n      mark,\n      attributes\n    } = props;\n\n    switch (mark.type) {\n      case \"bold\":\n        return /*#__PURE__*/React.createElement(\"strong\", Object.assign({}, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 16\n          }\n        }), children);\n\n      case \"code\":\n        return /*#__PURE__*/React.createElement(\"code\", Object.assign({}, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 16\n          }\n        }), children);\n\n      case \"italic\":\n        return /*#__PURE__*/React.createElement(\"em\", Object.assign({}, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 16\n          }\n        }), children);\n\n      case \"underlined\":\n        return /*#__PURE__*/React.createElement(\"u\", Object.assign({}, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 16\n          }\n        }), children);\n\n      default:\n        return next();\n    }\n  };\n\n  const onKeyDown = (event, editor, next) => {\n    let mark;\n\n    if (isBoldHotkey(event)) {\n      mark = \"bold\";\n    } else if (isItalicHotkey(event)) {\n      mark = \"italic\";\n    } else if (isUnderlinedHotkey(event)) {\n      mark = \"underlined\";\n    } else if (isCodeHotkey(event)) {\n      mark = \"code\";\n    } else {\n      return next();\n    }\n\n    event.preventDefault();\n    editor.toggleMark(mark);\n  };\n\n  const onClickMark = (event, type) => {\n    event.preventDefault();\n    ref.current.toggleMark(type);\n  };\n\n  const onClickBlock = (event, type) => {\n    event.preventDefault();\n    const editor = ref.current;\n    const value = editor.value;\n    const document = value.document; // Handle everything but list buttons.\n\n    if (type !== \"bulleted-list\" && type !== \"numbered-list\") {\n      const isActive = hasBlock(type);\n      const isList = hasBlock(\"list-item\");\n\n      if (isList) {\n        editor.setBlocks(isActive ? DEFAULT_NODE : type).unwrapBlock(\"bulleted-list\").unwrapBlock(\"numbered-list\");\n      } else {\n        editor.setBlocks(isActive ? DEFAULT_NODE : type);\n      }\n    } else {\n      // Handle the extra wrapping required for list buttons.\n      const isList = hasBlock(\"list-item\");\n      const isType = value.blocks.some(block => {\n        return !!document.getClosest(block.key, parent => parent.type === type);\n      });\n\n      if (isList && isType) {\n        editor.setBlocks(DEFAULT_NODE).unwrapBlock(\"bulleted-list\").unwrapBlock(\"numbered-list\");\n      } else if (isList) {\n        editor.unwrapBlock(type === \"bulleted-list\" ? \"numbered-list\" : \"bulleted-list\").wrapBlock(type);\n      } else {\n        editor.setBlocks(\"list-item\").wrapBlock(type);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles[\"overarching\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormatToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, renderMarkButton(\"bold\", \"fas fa-bold\"), renderMarkButton(\"underlined\", \"fas fa-bold\"), renderMarkButton(\"code\", \"fas fa-bold\"), renderBlockButton(\"heading-one\", \"fas fa-bold\"), renderBlockButton(\"heading-two\", \"fas fa-bold\"), renderBlockButton(\"block-quote\", \"fas fa-bold\"), renderBlockButton(\"numbered-list\", \"fas fa-bold\"), renderBlockButton(\"bulleted-list\", \"fas fa-bold\")), /*#__PURE__*/React.createElement(Editor, {\n    ref: ref,\n    className: styles[\"Editor\"],\n    value: value,\n    onChange: opts => setValue(opts.value),\n    onKeyDown: onKeyDown,\n    renderMark: renderMark,\n    renderBlock: renderBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }));\n}; // const BoldMark = (props) => <strong>{props.children}</strong>;\n// const ItalicMark = (props) => <em property=\"italic\">{props.children}</em>;\n\n\nexport default TextEditor; // const onKeyDown = (e, change, next) => {\n//     if (!e.ctrlKey) {\n//       return next();\n//     }\n//     e.preventDefault();\n//     switch (e.key) {\n//       case \"b\": {\n//         change.toggleMark(\"bold\");\n//         return true;\n//       }\n//       case \"i\": {\n//         change.toggleMark(\"italic\");\n//         return true;\n//       }\n//       case \"`\": {\n//         change.toggleMark(\"code\");\n//         return true;\n//       }\n//       case \"u\": {\n//         change.toggleMark(\"underline\");\n//         return true;\n//       }\n//     }\n//   };\n//   const renderMark = (props, editor, next) => {\n//     switch (props.mark.type) {\n//       case \"bold\":\n//         return <BoldMark {...props} />;\n//       case \"italic\":\n//         return <ItalicMark {...props} />;\n//       case \"code\":\n//         return <code {...props.attributes}>{props.children}</code>;\n//       case \"unordered-list\":\n//         return (\n//           <ul {...props.attributes}>\n//             <li>{props.children}</li>\n//           </ul>\n//         );\n//       case \"ordered-list\":\n//         return (\n//           <ol {...props.attributes}>\n//             <li>{props.children}</li>\n//           </ol>\n//         );\n//       case \"underline\":\n//         return <u {...props.attributes}>{props.children}</u>;\n//       default:\n//         return next();\n//     }\n//   };\n//   const onMarkClick = (e, type) => {\n//     e.preventDefault();\n//     console.log(type);\n//     ref.current.toggleMark(type);\n//   };","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js"],"names":["React","useState","useRef","Editor","Value","styles","FormatToolbar","isKeyHotkey","initialValue","fromJSON","document","nodes","object","type","leaves","text","TextEditor","value","setValue","ref","DEFAULT_NODE","isBoldHotkey","isItalicHotkey","isUnderlinedHotkey","isCodeHotkey","hasMark","activeMarks","some","node","hasBlock","blocks","renderMarkButton","icon","isActive","event","onClickMark","renderBlockButton","includes","size","parent","getParent","first","key","onClickBlock","renderBlock","props","editor","next","attributes","children","renderMark","mark","onKeyDown","preventDefault","toggleMark","current","isList","setBlocks","unwrapBlock","isType","block","getClosest","wrapBlock","opts"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Editor } from \"slate-react\";\nimport { Value } from \"slate\";\nimport styles from \"./TextEditor.module.css\";\nimport FormatToolbar from \"./FormatToolbar\";\nimport { isKeyHotkey } from \"is-hotkey\";\n\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [\n      {\n        object: \"block\",\n        type: \"paragraph\",\n        nodes: [\n          {\n            object: \"text\",\n            leaves: [\n              {\n                text: \"My first paragraph\",\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n});\n\nconst TextEditor = () => {\n  const [value, setValue] = useState(initialValue);\n  const ref = useRef();\n  const DEFAULT_NODE = 'paragraph'\n  const isBoldHotkey = isKeyHotkey(\"mod+b\");\n  const isItalicHotkey = isKeyHotkey(\"mod+i\");\n  const isUnderlinedHotkey = isKeyHotkey(\"mod+u\");\n  const isCodeHotkey = isKeyHotkey(\"mod+`\");\n\n  const hasMark = (type) => {\n    return value.activeMarks.some((node) => node.type === type);\n  };\n\n const hasBlock = type => {\n    return value.blocks.some(node => node.type === type)\n  }\n\n\n  const renderMarkButton = (type, icon) => {\n    const isActive = hasMark(type);\n    return (\n      <button\n        active={isActive}\n        onPointerDown={(event) => onClickMark(event, type)}\n      >\n        <i className={icon} />\n      </button>\n    );\n  };\n\n  const renderBlockButton = (type, icon) => {\n    let isActive = hasBlock(type);\n    if ([\"numbered-list\", \"bulleted-list\"].includes(type)) {\n      const { document, blocks } = value;\n\n      if (blocks.size > 0) {\n        const parent = document.getParent(blocks.first().key);\n        isActive = hasBlock(\"list-item\") && parent && parent.type === type;\n      }\n    }\n\n    return (\n      <button\n        active={isActive}\n        onPointerDown={(event) => onClickBlock(event, type)}\n      >\n        <i className={icon}></i>\n      </button>\n    );\n  };\n\n  const renderBlock = (props, editor, next) => {\n    const { attributes, children, node } = props;\n\n    switch (node.type) {\n      case \"block-quote\":\n        return <blockquote {...attributes}>{children}</blockquote>;\n      case \"bulleted-list\":\n        return <ul {...attributes}>{children}</ul>;\n      case \"heading-one\":\n        return <h1 {...attributes}>{children}</h1>;\n      case \"heading-two\":\n        return <h2 {...attributes}>{children}</h2>;\n      case \"list-item\":\n        return <li {...attributes}>{children}</li>;\n      case \"numbered-list\":\n        return <ol {...attributes}>{children}</ol>;\n      default:\n        return next();\n    }\n  };\n\n  const renderMark = (props, editor, next) => {\n    const { children, mark, attributes } = props;\n\n    switch (mark.type) {\n      case \"bold\":\n        return <strong {...attributes}>{children}</strong>;\n      case \"code\":\n        return <code {...attributes}>{children}</code>;\n      case \"italic\":\n        return <em {...attributes}>{children}</em>;\n      case \"underlined\":\n        return <u {...attributes}>{children}</u>;\n      default:\n        return next();\n    }\n  };\n\n  const onKeyDown = (event, editor, next) => {\n    let mark;\n\n    if (isBoldHotkey(event)) {\n      mark = \"bold\";\n    } else if (isItalicHotkey(event)) {\n      mark = \"italic\";\n    } else if (isUnderlinedHotkey(event)) {\n      mark = \"underlined\";\n    } else if (isCodeHotkey(event)) {\n      mark = \"code\";\n    } else {\n      return next();\n    }\n\n    event.preventDefault();\n    editor.toggleMark(mark);\n  };\n\n  const onClickMark = (event, type) => {\n    event.preventDefault();\n    ref.current.toggleMark(type);\n  };\n\n  const onClickBlock = (event, type) => {\n    event.preventDefault();\n\n    const editor = ref.current;\n    const value = editor.value;\n    const document = value.document;\n\n    // Handle everything but list buttons.\n    if (type !== \"bulleted-list\" && type !== \"numbered-list\") {\n      const isActive = hasBlock(type);\n      const isList = hasBlock(\"list-item\");\n\n      if (isList) {\n        editor\n          .setBlocks(isActive ? DEFAULT_NODE : type)\n          .unwrapBlock(\"bulleted-list\")\n          .unwrapBlock(\"numbered-list\");\n      } else {\n        editor.setBlocks(isActive ? DEFAULT_NODE : type);\n      }\n    } else {\n      // Handle the extra wrapping required for list buttons.\n      const isList = hasBlock(\"list-item\");\n      const isType = value.blocks.some((block) => {\n        return !!document.getClosest(\n          block.key,\n          (parent) => parent.type === type\n        );\n      });\n\n      if (isList && isType) {\n        editor\n          .setBlocks(DEFAULT_NODE)\n          .unwrapBlock(\"bulleted-list\")\n          .unwrapBlock(\"numbered-list\");\n      } else if (isList) {\n        editor\n          .unwrapBlock(\n            type === \"bulleted-list\" ? \"numbered-list\" : \"bulleted-list\"\n          )\n          .wrapBlock(type);\n      } else {\n        editor.setBlocks(\"list-item\").wrapBlock(type);\n      }\n    }\n  };\n\n  return (\n    <div className={styles[\"overarching\"]}>\n      <FormatToolbar>\n        {renderMarkButton(\"bold\", \"fas fa-bold\")}\n        {renderMarkButton(\"underlined\", \"fas fa-bold\")}\n        {renderMarkButton(\"code\", \"fas fa-bold\")}\n        {renderBlockButton(\"heading-one\", \"fas fa-bold\")}\n        {renderBlockButton(\"heading-two\", \"fas fa-bold\")}\n        {renderBlockButton(\"block-quote\", \"fas fa-bold\")}\n        {renderBlockButton(\"numbered-list\", \"fas fa-bold\")}\n        {renderBlockButton(\"bulleted-list\", \"fas fa-bold\")}\n      </FormatToolbar>\n      <Editor\n        ref={ref}\n        className={styles[\"Editor\"]}\n        value={value}\n        onChange={(opts) => setValue(opts.value)}\n        onKeyDown={onKeyDown}\n        renderMark={renderMark}\n        renderBlock={renderBlock}\n      />\n    </div>\n  );\n};\n\n// const BoldMark = (props) => <strong>{props.children}</strong>;\n\n// const ItalicMark = (props) => <em property=\"italic\">{props.children}</em>;\n\nexport default TextEditor;\n\n// const onKeyDown = (e, change, next) => {\n//     if (!e.ctrlKey) {\n//       return next();\n//     }\n//     e.preventDefault();\n\n//     switch (e.key) {\n//       case \"b\": {\n//         change.toggleMark(\"bold\");\n//         return true;\n//       }\n//       case \"i\": {\n//         change.toggleMark(\"italic\");\n//         return true;\n//       }\n//       case \"`\": {\n//         change.toggleMark(\"code\");\n//         return true;\n//       }\n//       case \"u\": {\n//         change.toggleMark(\"underline\");\n//         return true;\n//       }\n//     }\n//   };\n\n//   const renderMark = (props, editor, next) => {\n//     switch (props.mark.type) {\n//       case \"bold\":\n//         return <BoldMark {...props} />;\n//       case \"italic\":\n//         return <ItalicMark {...props} />;\n//       case \"code\":\n//         return <code {...props.attributes}>{props.children}</code>;\n//       case \"unordered-list\":\n//         return (\n//           <ul {...props.attributes}>\n//             <li>{props.children}</li>\n//           </ul>\n//         );\n//       case \"ordered-list\":\n//         return (\n//           <ol {...props.attributes}>\n//             <li>{props.children}</li>\n//           </ol>\n//         );\n//       case \"underline\":\n//         return <u {...props.attributes}>{props.children}</u>;\n//       default:\n//         return next();\n//     }\n//   };\n\n//   const onMarkClick = (e, type) => {\n//     e.preventDefault();\n//     console.log(type);\n//     ref.current.toggleMark(type);\n//   };\n"]},"metadata":{},"sourceType":"module"}
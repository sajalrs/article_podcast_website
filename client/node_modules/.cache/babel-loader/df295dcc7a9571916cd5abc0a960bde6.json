{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js\";\nimport React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor, Text } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([{\n    type: \"paragraph\",\n    children: [{\n      text: \"A line of text in a paragraph.\"\n    }]\n  }]);\n  const editor = useMemo(() => withReact(createEditor()), []);\n  const renderElement = useCallback(props => {\n    switch (props.element.type) {\n      case 'code':\n        return /*#__PURE__*/React.createElement(CodeElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 24\n          }\n        }));\n\n      default:\n        return /*#__PURE__*/React.createElement(DefaultElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 24\n          }\n        }));\n    }\n  }, []);\n  const renderLeaf = useCallback(props => {\n    return /*#__PURE__*/React.createElement(Leaf, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 14\n      }\n    }));\n  }, []);\n  const CustomEditor = {\n    isBoldMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.bold === true,\n        universal: true\n      });\n      return !!match;\n    },\n\n    isItalicMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.italic === true,\n        universal: true\n      });\n      return !!match;\n    },\n\n    isCodeBlockActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.type === 'code'\n      });\n      return !!match;\n    },\n\n    toggleBoldMark(editor) {\n      const isActive = CustomEditor.isBoldMarkActive(editor);\n      Transforms.setNodes(editor, {\n        bold: isActive ? null : true\n      }, {\n        match: n => Text.isText(n),\n        split: true\n      });\n    },\n\n    toggleItalicMark(editor) {\n      const isActive = CustomEditor.isItalicMarkActive(editor);\n      Transforms.setNodes(editor, {\n        italic: isActive ? null : true\n      }, {\n        match: n => Text.isText(n),\n        split: true\n      });\n    },\n\n    toggleCodeBlock(editor) {\n      const isActive = CustomEditor.isCodeBlockActive(editor);\n      Transforms.setNodes(editor, {\n        type: isActive ? null : 'code'\n      }, {\n        match: n => Editor.isBlock(editor, n)\n      });\n    }\n\n  };\n  return /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: newValue => setValue(newValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onMouseDown: event => {\n      event.preventDefault();\n      CustomEditor.toggleBoldMark(editor);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Bold\")), /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: event => {\n      if (!event.ctrlKey) {\n        return;\n      }\n\n      switch (event.key) {\n        case '`':\n          {\n            event.preventDefault();\n            CustomEditor.toggleCodeBlock(editor);\n            break;\n          }\n\n        case 'b':\n          {\n            event.preventDefault();\n            CustomEditor.toggleBoldMark(editor);\n            break;\n          }\n\n        case 'i':\n          {\n            event.preventDefault();\n            CustomEditor.toggleItalicMark(editor);\n            break;\n          }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst DefaultElement = props => {\n  return /*#__PURE__*/React.createElement(\"p\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 12\n    }\n  }), props.children);\n};\n\nconst CodeElement = props => {\n  return /*#__PURE__*/React.createElement(\"pre\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, props.children));\n};\n\nconst Leaf = props => {\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, props.attributes, {\n    style: {\n      fontWeight: props.leaf.bold ? 'bold' : 'normal'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }), props.children);\n};\n\nexport default TextEditor;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js"],"names":["React","useState","useMemo","useEffect","useCallback","createEditor","Transforms","Editor","Text","Slate","Editable","withReact","TextEditor","value","setValue","type","children","text","editor","renderElement","props","element","renderLeaf","CustomEditor","isBoldMarkActive","match","nodes","n","bold","universal","isItalicMarkActive","italic","isCodeBlockActive","toggleBoldMark","isActive","setNodes","isText","split","toggleItalicMark","toggleCodeBlock","isBlock","newValue","event","preventDefault","ctrlKey","key","DefaultElement","attributes","CodeElement","Leaf","fontWeight","leaf"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor,  Text } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([\n    {\n      type: \"paragraph\",\n      children: [{ text: \"A line of text in a paragraph.\" }],\n    },\n  ]);\n  const editor = useMemo(() => withReact(createEditor()), []);\n  \n\n  const renderElement= useCallback(\n      (props) => {\n        switch(props.element.type){\n            case 'code':\n                return <CodeElement {... props}/>\n            default:\n                return <DefaultElement {...props}/>\n        }      \n    },\n      [],\n  )\n\n  const renderLeaf = useCallback(props => {\n      return <Leaf {...props}/>\n  }, [])\n\n  const CustomEditor = {\n      isBoldMarkActive(editor){\n          const[match] = Editor.nodes(editor, {\n              match: n => n.bold === true,\n              universal: true,\n          })\n\n          return !!match\n      },\n\n      isItalicMarkActive(editor){\n        const[match] = Editor.nodes(editor, {\n            match: n => n.italic === true,\n            universal: true,\n        })\n\n        return !!match\n    },\n\n      isCodeBlockActive(editor){\n          const[match] = Editor.nodes(editor, {\n              match: n => n.type === 'code',\n          })\n          return !!match\n        },\n\n        toggleBoldMark(editor){\n            const isActive = CustomEditor.isBoldMarkActive(editor)\n            Transforms.setNodes(\n                editor,\n                {bold: isActive? null : true},\n                {match: n => Text.isText(n), split: true}\n            )\n        },\n\n\n        toggleItalicMark(editor){\n            const isActive = CustomEditor.isItalicMarkActive(editor)\n            Transforms.setNodes(\n                editor,\n                {italic: isActive? null : true},\n                {match: n => Text.isText(n), split: true}\n            )\n        },\n\n        toggleCodeBlock(editor){\n            const isActive = CustomEditor.isCodeBlockActive(editor)\n            Transforms.setNodes(\n                editor,\n                {type: isActive ? null : 'code'},\n                {match: n => Editor.isBlock(editor, n)}\n            )\n        },\n\n  }\n\n\n  return (\n    <Slate\n      editor={editor}\n      value={value}\n      onChange={(newValue) => setValue(newValue)}\n    >\n        <div>\n        <button \n            onMouseDown={event => {\n                event.preventDefault();\n                CustomEditor.toggleBoldMark(editor)\n            }}>\n                Bold\n            </button>\n\n        </div>\n       \n\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        onKeyDown={(event) => {\n            if(!event.ctrlKey){\n                return \n            }\n\n            switch(event.key){\n                case '`':{\n                    event.preventDefault();\n                    CustomEditor.toggleCodeBlock(editor);\n                    break;\n                }\n\n                case 'b': {\n                    event.preventDefault(); \n                    CustomEditor.toggleBoldMark(editor);\n                    break;\n                }\n\n                case 'i': {\n                    event.preventDefault();\n                    CustomEditor.toggleItalicMark(editor);\n                    break;\n                }\n\n\n            }\n\n        \n        }}\n      />\n    </Slate>\n  );\n};\n\nconst DefaultElement = props => {\n    return <p {...props.attributes}>{props.children}</p>\n}\n\nconst CodeElement = props => {\n    return( \n        <pre {...props.attributes}>\n            <code>{props.children}</code>\n        </pre>\n    )\n}\n\nconst Leaf = props => {\n    return (\n        <span  \n            {...props.attributes}\n            style={{fontWeight: props.leaf.bold ? 'bold': 'normal'}}\n            >\n                {props.children}\n            </span>\n    )\n}\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}
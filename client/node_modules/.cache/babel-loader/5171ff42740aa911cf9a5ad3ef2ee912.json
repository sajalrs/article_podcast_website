{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/context/PlayerState.js\";\nimport React, { useReducer } from 'react';\nimport playerContext from './playerContext';\nimport playerReducer from './playerReducer';\nimport { songsArr } from './songs';\nimport { SET_CURRENT_SONG, TOGGLE_RANDOM, TOGGLE_REPEAT, TOGGLE_PLAYING } from './types';\n\nconst PlayerState = props => {\n  const initialState = {\n    currentSong: 0,\n    songs: songsArr,\n    repeat: false,\n    random: false,\n    playing: false,\n    audio: null\n  };\n  const [state, dispatch] = useReducer(playerReducer, initialState); // Set playing state\n\n  const togglePlaying = () => dispatch({\n    type: TOGGLE_PLAYING,\n    data: state.playing ? false : true\n  }); // Set current song\n\n\n  const SetCurrent = id => dispatch({\n    type: SET_CURRENT_SONG,\n    data: id\n  }); // Prev song\n\n\n  const prevSong = () => {\n    if (state.currentSong === 0) {\n      SetCurrent(state.songs.length - 1);\n    } else {\n      SetCurrent(state.currentSong - 1);\n    }\n  }; // Next song\n\n\n  const nextSong = () => {\n    if (state.currentSong === state.songs.length - 1) {\n      SetCurrent(0);\n    } else {\n      SetCurrent(state.currentSong + 1);\n    }\n  }; // Repeat and Random\n\n\n  const toggleRepeat = id => dispatch({\n    type: TOGGLE_REPEAT,\n    data: state.repeat ? false : true\n  });\n\n  const toggleRandom = id => dispatch({\n    type: TOGGLE_RANDOM,\n    data: state.random ? false : true\n  }); // End of Song\n\n\n  const handleEnd = () => {\n    // Check for random and repeat options\n    if (state.random) {\n      return dispatch({\n        type: SET_CURRENT_SONG,\n        data: ~~(Math.random() * state.songs.length)\n      });\n    } else {\n      if (state.repeat) {\n        nextSong();\n      } else if (state.currentSong === state.songs.length - 1) {\n        return;\n      } else {\n        nextSong();\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(playerContext.Provider, {\n    value: {\n      currentSong: state.currentSong,\n      songs: state.songs,\n      repeat: state.repeat,\n      random: state.random,\n      playing: state.playing,\n      audio: state.audio,\n      nextSong,\n      prevSong,\n      SetCurrent,\n      toggleRandom,\n      toggleRepeat,\n      togglePlaying,\n      handleEnd\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 10\n    }\n  }, props.children);\n};\n\nexport default PlayerState;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/context/PlayerState.js"],"names":["React","useReducer","playerContext","playerReducer","songsArr","SET_CURRENT_SONG","TOGGLE_RANDOM","TOGGLE_REPEAT","TOGGLE_PLAYING","PlayerState","props","initialState","currentSong","songs","repeat","random","playing","audio","state","dispatch","togglePlaying","type","data","SetCurrent","id","prevSong","length","nextSong","toggleRepeat","toggleRandom","handleEnd","Math","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport playerContext from './playerContext';\nimport playerReducer from './playerReducer';\nimport { songsArr } from './songs';\n\nimport {\n  SET_CURRENT_SONG,\n  TOGGLE_RANDOM,\n  TOGGLE_REPEAT,\n  TOGGLE_PLAYING\n} from './types'\n\nconst PlayerState = props => {\n  const initialState = {\n    currentSong: 0,\n    songs: songsArr,\n    repeat: false,\n    random: false,\n    playing: false,\n    audio: null\n  }\n  const [state, dispatch] = useReducer(playerReducer, initialState);\n\n  // Set playing state\n  const togglePlaying = () => dispatch({ type: TOGGLE_PLAYING, data: state.playing ? false : true })\n  // Set current song\n  const SetCurrent = id => dispatch({ type: SET_CURRENT_SONG, data: id })\n\n  // Prev song\n  const prevSong = () => {\n    if (state.currentSong === 0) {\n      SetCurrent(state.songs.length - 1)\n    } else {\n      SetCurrent(state.currentSong - 1)\n    }\n  }\n  // Next song\n  const nextSong = () => {\n    if (state.currentSong === state.songs.length - 1) {\n      SetCurrent(0)\n    } else {\n      SetCurrent(state.currentSong + 1)\n    }\n  }\n\n  // Repeat and Random\n  const toggleRepeat = (id) => dispatch({ type: TOGGLE_REPEAT, data: state.repeat ? false : true })\n  const toggleRandom = (id) => dispatch({ type: TOGGLE_RANDOM, data: state.random ? false : true })\n\n\n  // End of Song\n  const handleEnd = () => {\n    // Check for random and repeat options\n    if (state.random) {\n      return dispatch({ type: SET_CURRENT_SONG, data: ~~(Math.random() * state.songs.length) })\n    } else {\n      if (state.repeat) {\n        nextSong()\n      } else if ((state.currentSong === state.songs.length - 1)) {\n        return\n      } else {\n        nextSong();\n      }\n    }\n  }\n\n\n  return <playerContext.Provider\n    value={{\n      currentSong: state.currentSong,\n      songs: state.songs,\n      repeat: state.repeat,\n      random: state.random,\n      playing: state.playing,\n      audio: state.audio,\n      nextSong,\n      prevSong,\n      SetCurrent,\n      toggleRandom,\n      toggleRepeat,\n      togglePlaying,\n      handleEnd\n    }}>\n\n    {props.children}\n\n  </playerContext.Provider>\n}\n\nexport default PlayerState;"]},"metadata":{},"sourceType":"module"}
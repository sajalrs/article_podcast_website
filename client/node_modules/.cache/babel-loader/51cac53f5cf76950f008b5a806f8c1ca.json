{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js\";\nimport React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor, Text, Node } from \"slate\";\nimport { Slate, Editable, withReact, useFocused, useSelected, useEditor } from \"slate-react\";\nimport imageExtensions from 'image-extensions';\nimport isUrl from \"is-url\";\nimport { withHistory } from \"slate-history\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([{\n    type: \"paragraph\",\n    children: [{\n      text: \"A line of text in a paragraph.\"\n    }]\n  }]);\n  const editor = useMemo(() => withImages(withHistory(withReact(createEditor()), [])));\n  const renderElement = useCallback(props => {\n    switch (props.element.type) {\n      case \"code\":\n        return /*#__PURE__*/React.createElement(CodeElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 16\n          }\n        }));\n\n      case \"image\":\n        return /*#__PURE__*/React.createElement(ImageElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 18\n          }\n        }));\n\n      default:\n        return /*#__PURE__*/React.createElement(DefaultElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 16\n          }\n        }));\n    }\n  }, []);\n  const renderLeaf = useCallback(props => {\n    return /*#__PURE__*/React.createElement(Leaf, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 12\n      }\n    }));\n  }, []);\n  return /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: newValue => setValue(newValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InsertImageButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onMouseDown: event => {\n      event.preventDefault();\n      CustomEditor.toggleBoldMark(editor);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"Bold\")), /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: event => {\n      if (!event.ctrlKey) {\n        return;\n      }\n\n      switch (event.key) {\n        case \"`\":\n          {\n            event.preventDefault();\n            CustomEditor.toggleCodeBlock(editor);\n            break;\n          }\n\n        case \"b\":\n          {\n            event.preventDefault();\n            CustomEditor.toggleBoldMark(editor);\n            break;\n          }\n\n        case \"i\":\n          {\n            event.preventDefault();\n            CustomEditor.toggleItalicMark(editor);\n            break;\n          }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst withImages = editor => {\n  const {\n    insertData,\n    isVoid\n  } = editor;\n\n  editor.isVoid = element => {\n    return element.type === 'image' ? true : isVoid(element);\n  };\n\n  editor.insertData = data => {\n    const text = data.getData('text/plain');\n    const {\n      files\n    } = data;\n\n    if (files && files.length > 0) {\n      for (const file of files) {\n        const reader = new FileReader();\n        const [mime] = file.type.split('/');\n\n        if (mime === 'image') {\n          reader.addEventListener('load', () => {\n            const url = reader.result;\n            insertImage(editor, url);\n          });\n          reader.readAsDataURL(file);\n        }\n      }\n    } else if (isImageUrl(text)) {\n      insertImage(editor, text);\n    } else {\n      insertData(data);\n    }\n  };\n\n  return editor;\n};\n\nconst insertImage = (editor, url) => {\n  const text = {\n    text: ''\n  };\n  const image = {\n    type: 'image',\n    url,\n    children: [text]\n  };\n  Transforms.insertNodes(editor, image);\n};\n\nconst isImageUrl = url => {\n  if (!url) return false;\n  if (!isUrl(url)) return false;\n  const ext = new URL(url).pathname.split('.').pop();\n  return imageExtensions.includes(ext);\n};\n\nconst InsertImageButton = () => {\n  const editor = useEditor();\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onMouseDown: event => {\n      event.preventDefault();\n      const url = window.prompt('Enter the URL of the image:');\n      if (!url) return;\n      insertImage(editor, url);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  });\n};\n\nconst CustomEditor = {\n  isBoldMarkActive(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: n => n.bold === true,\n      universal: true\n    });\n    return !!match;\n  },\n\n  isItalicMarkActive(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: n => n.italic === true,\n      universal: true\n    });\n    return !!match;\n  },\n\n  isCodeBlockActive(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: n => n.type === \"code\"\n    });\n    return !!match;\n  },\n\n  toggleBoldMark(editor) {\n    const isActive = CustomEditor.isBoldMarkActive(editor);\n    Transforms.setNodes(editor, {\n      bold: isActive ? null : true\n    }, {\n      match: n => Text.isText(n),\n      split: true\n    });\n  },\n\n  toggleItalicMark(editor) {\n    const isActive = CustomEditor.isItalicMarkActive(editor);\n    Transforms.setNodes(editor, {\n      italic: isActive ? null : true\n    }, {\n      match: n => Text.isText(n),\n      split: true\n    });\n  },\n\n  toggleCodeBlock(editor) {\n    const isActive = CustomEditor.isCodeBlockActive(editor);\n    Transforms.setNodes(editor, {\n      type: isActive ? null : \"code\"\n    }, {\n      match: n => Editor.isBlock(editor, n)\n    });\n  }\n\n};\n\nconst DefaultElement = props => {\n  return /*#__PURE__*/React.createElement(\"p\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 10\n    }\n  }), props.children);\n};\n\nconst CodeElement = props => {\n  return /*#__PURE__*/React.createElement(\"pre\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }, props.children));\n};\n\nconst ImageElement = ({\n  attributes,\n  children,\n  element\n}) => {\n  const selected = useSelected();\n  const focused = useFocused();\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    contentEditable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: element.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  })), children);\n};\n\nconst Leaf = props => {\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, props.attributes, {\n    style: {\n      fontWeight: props.leaf.bold ? \"bold\" : \"normal\",\n      fontStyle: props.leaf.italic ? \"italic\" : \"normal\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 5\n    }\n  }), props.children);\n};\n\nexport default TextEditor;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js"],"names":["React","useState","useMemo","useEffect","useCallback","createEditor","Transforms","Editor","Text","Node","Slate","Editable","withReact","useFocused","useSelected","useEditor","imageExtensions","isUrl","withHistory","TextEditor","value","setValue","type","children","text","editor","withImages","renderElement","props","element","renderLeaf","newValue","event","preventDefault","CustomEditor","toggleBoldMark","ctrlKey","key","toggleCodeBlock","toggleItalicMark","insertData","isVoid","data","getData","files","length","file","reader","FileReader","mime","split","addEventListener","url","result","insertImage","readAsDataURL","isImageUrl","image","insertNodes","ext","URL","pathname","pop","includes","InsertImageButton","window","prompt","isBoldMarkActive","match","nodes","n","bold","universal","isItalicMarkActive","italic","isCodeBlockActive","isActive","setNodes","isText","isBlock","DefaultElement","attributes","CodeElement","ImageElement","selected","focused","Leaf","fontWeight","leaf","fontStyle"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor, Text, Node} from \"slate\";\nimport {\n    Slate,\n  Editable,\n  withReact,\n  useFocused,\n  useSelected,\n  useEditor,\n} from \"slate-react\";\nimport imageExtensions from 'image-extensions'\nimport isUrl from \"is-url\";\nimport { withHistory } from \"slate-history\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([\n    {\n      type: \"paragraph\",\n      children: [{ text: \"A line of text in a paragraph.\" }],\n    },\n  ]);\n  const editor = useMemo(() =>\n   withImages(withHistory(withReact(createEditor()), [])));\n   \n   const renderElement = useCallback((props) => {\n    switch (props.element.type) {\n      case \"code\":\n        return <CodeElement {...props} />;\n      case \"image\":\n          return <ImageElement {...props}/>;\n      default:\n        return <DefaultElement {...props} />;\n    }\n  }, []);\n\n  const renderLeaf = useCallback((props) => {\n    return <Leaf {...props} />;\n  }, []);\n\n\n  return (\n    <Slate\n      editor={editor}\n      value={value}\n      onChange={(newValue) => setValue(newValue)}\n    >\n      <div>\n        <InsertImageButton/>\n        <button\n          onMouseDown={(event) => {\n            event.preventDefault();\n            CustomEditor.toggleBoldMark(editor);\n          }}\n        >\n          Bold\n        </button>\n      </div>\n\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        onKeyDown={(event) => {\n          if (!event.ctrlKey) {\n            return;\n          }\n\n          switch (event.key) {\n            case \"`\": {\n              event.preventDefault();\n              CustomEditor.toggleCodeBlock(editor);\n              break;\n            }\n\n            case \"b\": {\n              event.preventDefault();\n              CustomEditor.toggleBoldMark(editor);\n              break;\n            }\n\n            case \"i\": {\n              event.preventDefault();\n              CustomEditor.toggleItalicMark(editor);\n              break;\n            }\n          }\n        }}\n      />\n    </Slate>\n  );\n};\n\nconst withImages = editor => {\n    const { insertData, isVoid } = editor\n  \n    editor.isVoid = element => {\n      return element.type === 'image' ? true : isVoid(element)\n    }\n  \n    editor.insertData = data => {\n      const text = data.getData('text/plain')\n      const { files } = data\n  \n      if (files && files.length > 0) {\n        for (const file of files) {\n          const reader = new FileReader()\n          const [mime] = file.type.split('/')\n  \n          if (mime === 'image') {\n            reader.addEventListener('load', () => {\n              const url = reader.result\n              insertImage(editor, url)\n            })\n  \n            reader.readAsDataURL(file)\n          }\n        }\n      } else if (isImageUrl(text)) {\n        insertImage(editor, text)\n      } else {\n        insertData(data)\n      }\n    }\n  \n    return editor\n  }\n\n  const insertImage = (editor, url) => {\n    const text = { text: '' }\n    const image = { type: 'image', url, children: [text] }\n    Transforms.insertNodes(editor, image)\n  }\n\n  const isImageUrl = url => {\n    if (!url) return false\n    if (!isUrl(url)) return false\n    const ext = new URL(url).pathname.split('.').pop()\n    return imageExtensions.includes(ext)\n  }\n\n  const InsertImageButton = () => {\n    const editor = useEditor()\n    return (\n      <button\n        onMouseDown={event => {\n          event.preventDefault()\n          const url = window.prompt('Enter the URL of the image:')\n          if (!url) return\n          insertImage(editor, url)\n        }}\n      >\n\n      </button>\n    )\n  }\n\n\n\n  const CustomEditor = {\n    isBoldMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: (n) => n.bold === true,\n        universal: true,\n      });\n\n      return !!match;\n    },\n\n    isItalicMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: (n) => n.italic === true,\n        universal: true,\n      });\n\n      return !!match;\n    },\n\n    isCodeBlockActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: (n) => n.type === \"code\",\n      });\n      return !!match;\n    },\n\n    toggleBoldMark(editor) {\n      const isActive = CustomEditor.isBoldMarkActive(editor);\n      Transforms.setNodes(\n        editor,\n        { bold: isActive ? null : true },\n        { match: (n) => Text.isText(n), split: true }\n      );\n    },\n\n    toggleItalicMark(editor) {\n      const isActive = CustomEditor.isItalicMarkActive(editor);\n      Transforms.setNodes(\n        editor,\n        { italic: isActive ? null : true },\n        { match: (n) => Text.isText(n), split: true }\n      );\n    },\n\n    toggleCodeBlock(editor) {\n      const isActive = CustomEditor.isCodeBlockActive(editor);\n      Transforms.setNodes(\n        editor,\n        { type: isActive ? null : \"code\" },\n        { match: (n) => Editor.isBlock(editor, n) }\n      );\n    },\n  };\n\nconst DefaultElement = (props) => {\n  return <p {...props.attributes}>{props.children}</p>;\n};\n\nconst CodeElement = (props) => {\n  return (\n    <pre {...props.attributes}>\n      <code>{props.children}</code>\n    </pre>\n  );\n};\n\nconst ImageElement = ({ attributes, children, element }) => {\n    const selected = useSelected()\n    const focused = useFocused()\n    return (\n      <div {...attributes}>\n        <div contentEditable={false}>\n          <img\n            src={element.url}\n          />\n        </div>\n        {children}\n      </div>\n    )\n  }\n  \n\nconst Leaf = (props) => {\n  return (\n    <span\n      {...props.attributes}\n      style={{\n        fontWeight: props.leaf.bold ? \"bold\" : \"normal\",\n        fontStyle: props.leaf.italic ? \"italic\" : \"normal\",\n      }}\n    >\n      {props.children}\n    </span>\n  );\n};\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js\";\nimport React, { useCallback, useMemo, useState } from 'react';\nimport isHotkey from 'is-hotkey';\nimport { Editable, withReact, useSlate, Slate, useEditor } from 'slate-react';\nimport { Editor, Transforms, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport imageExtensions from 'image-extensions';\nimport isUrl from 'is-url';\nconst HOTKEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline',\n  'mod+`': 'code'\n};\nconst LIST_TYPES = ['numbered-list', 'bulleted-list'];\n\nconst TextEditor = () => {\n  const [value, setValue] = useState(initialValue);\n  const renderElement = useCallback(props => /*#__PURE__*/React.createElement(Element, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 46\n    }\n  })), []);\n  const renderLeaf = useCallback(props => /*#__PURE__*/React.createElement(Leaf, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 43\n    }\n  })), []);\n  const editor = useMemo(() => withImages(withHistory(withReact(createEditor())), []));\n  editor.selection = {\n    anchor: {\n      path: [0, 0],\n      offset: 0\n    },\n    focus: {\n      path: [0, 0],\n      offset: 0\n    }\n  };\n  return /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MarkButton, {\n    format: \"bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(MarkButton, {\n    format: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(MarkButton, {\n    format: \"underline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(MarkButton, {\n    format: \"code\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlockButton, {\n    format: \"heading-one\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlockButton, {\n    format: \"heading-two\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlockButton, {\n    format: \"block-quote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlockButton, {\n    format: \"numbered-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlockButton, {\n    format: \"bulleted-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(InsertImageButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    placeholder: \"Enter some rich text\\u2026\",\n    spellCheck: true,\n    autoFocus: true,\n    onKeyDown: event => {\n      for (const hotkey in HOTKEYS) {\n        if (isHotkey(hotkey, event)) {\n          event.preventDefault();\n          const mark = HOTKEYS[hotkey];\n          toggleMark(editor, mark);\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst toggleBlock = (editor, format) => {\n  const isActive = isBlockActive(editor, format);\n  const isList = LIST_TYPES.includes(format);\n  Transforms.unwrapNodes(editor, {\n    match: n => LIST_TYPES.includes(n.type),\n    split: true\n  });\n  Transforms.setNodes(editor, {\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format\n  });\n\n  if (!isActive && isList) {\n    const block = {\n      type: format,\n      children: []\n    };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\nconst toggleMark = (editor, format) => {\n  const isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nconst isBlockActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n.type === format\n  });\n  return !!match;\n};\n\nconst isMarkActive = (editor, format) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nconst Element = props => {\n  const {\n    attributes,\n    children,\n    element\n  } = props;\n\n  switch (element.type) {\n    case 'block-quote':\n      return /*#__PURE__*/React.createElement(\"blockquote\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'bulleted-list':\n      return /*#__PURE__*/React.createElement(\"ul\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-one':\n      return /*#__PURE__*/React.createElement(\"h1\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-two':\n      return /*#__PURE__*/React.createElement(\"h2\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'list-item':\n      return /*#__PURE__*/React.createElement(\"li\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'numbered-list':\n      return /*#__PURE__*/React.createElement(\"ol\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'image':\n      return /*#__PURE__*/React.createElement(ImageElement, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 16\n        }\n      }));\n\n    default:\n      return /*#__PURE__*/React.createElement(\"p\", Object.assign({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.code) {\n    children = /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.italic) {\n    children = /*#__PURE__*/React.createElement(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.underline) {\n    children = /*#__PURE__*/React.createElement(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 10\n    }\n  }), children);\n};\n\nconst BlockButton = ({\n  format\n}) => {\n  const editor = useSlate();\n  return /*#__PURE__*/React.createElement(\"button\", {\n    active: isBlockActive(editor, format),\n    onMouseDown: event => {\n      event.preventDefault();\n      toggleBlock(editor, format);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, format);\n};\n\nconst MarkButton = ({\n  format\n}) => {\n  const editor = useSlate();\n  return /*#__PURE__*/React.createElement(\"button\", {\n    active: isMarkActive(editor, format),\n    onMouseDown: event => {\n      event.preventDefault();\n      toggleMark(editor, format);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, format);\n};\n\nconst InsertImageButton = () => {\n  const editor = useEditor();\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onMouseDown: event => {\n      event.preventDefault();\n      const url = window.prompt('Enter the URL of the image:');\n      if (!url) return;\n      insertImage(editor, url);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, \"image\");\n};\n\nconst withImages = editor => {\n  const {\n    insertData,\n    isVoid\n  } = editor;\n\n  editor.isVoid = element => {\n    return element.type === 'image' ? true : isVoid(element);\n  };\n\n  editor.insertData = data => {\n    const text = data.getData('text/plain');\n    const {\n      files\n    } = data;\n\n    if (files && files.length > 0) {\n      for (const file of files) {\n        const reader = new FileReader();\n        const [mime] = file.type.split('/');\n\n        if (mime === 'image') {\n          reader.addEventListener('load', () => {\n            const url = reader.result;\n            insertImage(editor, url);\n          });\n          reader.readAsDataURL(file);\n        }\n      }\n    } else if (isImageUrl(text)) {\n      insertImage(editor, text);\n    } else {\n      insertData(data);\n    }\n  };\n\n  return editor;\n};\n\nconst insertImage = (editor, url) => {\n  const text = {\n    text: ''\n  };\n  const image = {\n    type: 'image',\n    url,\n    children: [text]\n  };\n  Transforms.insertNodes(editor, image);\n};\n\nconst ImageElement = ({\n  attributes,\n  children,\n  element\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    contentEditable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: element.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  })), children);\n};\n\nconst isImageUrl = url => {\n  if (!url) return false;\n  if (!isUrl(url)) return false;\n  const ext = new URL(url).pathname.split('.').pop();\n  return imageExtensions.includes(ext);\n};\n\nconst initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'This is editable '\n  }, {\n    text: 'rich',\n    bold: true\n  }, {\n    text: ' text, '\n  }, {\n    text: 'much',\n    italic: true\n  }, {\n    text: ' better than a '\n  }, {\n    text: '<textarea>',\n    code: true\n  }, {\n    text: '!'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: \"Since it's rich text, you can do things like turn a selection of text \"\n  }, {\n    text: 'bold',\n    bold: true\n  }, {\n    text: ', or add a semantically rendered block quote in the middle of the page, like this:'\n  }]\n}, {\n  type: 'block-quote',\n  children: [{\n    text: 'A wise quote.'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}, {\n  type: 'image',\n  url: 'https://source.unsplash.com/kFrdX5IeQzI',\n  children: [{\n    text: ''\n  }]\n}];\nexport default TextEditor;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js"],"names":["React","useCallback","useMemo","useState","isHotkey","Editable","withReact","useSlate","Slate","useEditor","Editor","Transforms","createEditor","withHistory","imageExtensions","isUrl","HOTKEYS","LIST_TYPES","TextEditor","value","setValue","initialValue","renderElement","props","renderLeaf","editor","withImages","selection","anchor","path","offset","focus","event","hotkey","preventDefault","mark","toggleMark","toggleBlock","format","isActive","isBlockActive","isList","includes","unwrapNodes","match","n","type","split","setNodes","block","children","wrapNodes","isMarkActive","removeMark","addMark","nodes","marks","Element","attributes","element","Leaf","leaf","bold","code","italic","underline","BlockButton","MarkButton","InsertImageButton","url","window","prompt","insertImage","insertData","isVoid","data","text","getData","files","length","file","reader","FileReader","mime","addEventListener","result","readAsDataURL","isImageUrl","image","insertNodes","ImageElement","ext","URL","pathname","pop"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\nimport isHotkey from 'is-hotkey'\nimport { Editable, withReact, useSlate, Slate, useEditor } from 'slate-react'\nimport { Editor, Transforms, createEditor} from 'slate'\nimport { withHistory } from 'slate-history'\nimport imageExtensions from 'image-extensions'\nimport isUrl from 'is-url'\n\nconst HOTKEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline',\n  'mod+`': 'code',\n}\n\nconst LIST_TYPES = ['numbered-list', 'bulleted-list']\n\nconst TextEditor = () => {\n  const [value, setValue] = useState(initialValue)\n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(() => withImages(withHistory(withReact(createEditor())), []))\n  editor.selection = { anchor: { path: [0,0], offset:0 }, focus: { path: [0,0], offset: 0 } };\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <div>\n      <MarkButton format=\"bold\" />\n        <MarkButton format=\"italic\"/>\n        <MarkButton format=\"underline\"  />\n        <MarkButton format=\"code\" />\n        <BlockButton format=\"heading-one\"  />\n        <BlockButton format=\"heading-two\"/>\n        <BlockButton format=\"block-quote\" />\n        <BlockButton format=\"numbered-list\" />\n        <BlockButton format=\"bulleted-list\"  />\n        <InsertImageButton />\n      \n      </div>\n      \n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        placeholder=\"Enter some rich text…\"\n        spellCheck\n        autoFocus\n        onKeyDown={event => {\n          for (const hotkey in HOTKEYS) {\n            if (isHotkey(hotkey, event)) {\n              event.preventDefault()\n              const mark = HOTKEYS[hotkey]\n              toggleMark(editor, mark)\n            }\n          }\n        }}\n      />\n    </Slate>\n  )\n}\n\nconst toggleBlock = (editor, format) => {\n  const isActive = isBlockActive(editor, format)\n  const isList = LIST_TYPES.includes(format)\n\n  Transforms.unwrapNodes(editor, {\n    match: n => LIST_TYPES.includes(n.type),\n    split: true,\n  })\n\n  Transforms.setNodes(editor, {\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format,\n  })\n\n  if (!isActive && isList) {\n    const block = { type: format, children: [] }\n    Transforms.wrapNodes(editor, block)\n  }\n}\n\nconst toggleMark = (editor, format) => {\n  const isActive = isMarkActive(editor, format)\n\n  if (isActive) {\n    Editor.removeMark(editor, format)\n  } else {\n    Editor.addMark(editor, format, true)\n  }\n}\n\nconst isBlockActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n.type === format,\n  })\n\n  return !!match\n}\n\nconst isMarkActive = (editor, format) => {\n  const marks = Editor.marks(editor)\n  return marks ? marks[format] === true : false\n}\n\nconst Element = (props) => {\n  const { attributes, children, element } = props\n  switch (element.type) {\n    case 'block-quote':\n      return <blockquote {...attributes}>{children}</blockquote>\n    case 'bulleted-list':\n      return <ul {...attributes}>{children}</ul>\n    case 'heading-one':\n      return <h1 {...attributes}>{children}</h1>\n    case 'heading-two':\n      return <h2 {...attributes}>{children}</h2>\n    case 'list-item':\n      return <li {...attributes}>{children}</li>\n    case 'numbered-list':\n      return <ol {...attributes}>{children}</ol>\n    case 'image':\n        return <ImageElement {...props}/>\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.code) {\n    children = <code>{children}</code>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nconst BlockButton = ({ format}) => {\n  const editor = useSlate()\n  return (\n    <button\n      active={isBlockActive(editor, format)}\n      onMouseDown={event => {\n        event.preventDefault()\n        toggleBlock(editor, format)\n      }}\n    >\n      {format}\n    </button>\n  )\n}\n\nconst MarkButton = ({ format}) => {\n  const editor = useSlate()\n  return (\n    <button\n      active={isMarkActive(editor, format)}\n      onMouseDown={event => {\n        event.preventDefault()\n        toggleMark(editor, format)\n      }}\n    >\n        {format}\n    </button>\n  )\n}\n\nconst InsertImageButton = () => {\n    const editor = useEditor()\n    return (\n      <button\n        onMouseDown={event => {\n          event.preventDefault()\n          const url = window.prompt('Enter the URL of the image:')\n          if (!url) return\n          insertImage(editor, url)\n        }}\n      >\n        image\n      </button>\n    )\n  }\n\nconst withImages = editor => {\n    const { insertData, isVoid } = editor\n  \n    editor.isVoid = element => {\n      return element.type === 'image' ? true : isVoid(element)\n    }\n  \n    editor.insertData = data => {\n      const text = data.getData('text/plain')\n      const { files } = data\n  \n      if (files && files.length > 0) {\n        for (const file of files) {\n          const reader = new FileReader()\n          const [mime] = file.type.split('/')\n  \n          if (mime === 'image') {\n            reader.addEventListener('load', () => {\n              const url = reader.result\n              insertImage(editor, url)\n            })\n  \n            reader.readAsDataURL(file)\n          }\n        }\n      } else if (isImageUrl(text)) {\n        insertImage(editor, text)\n      } else {\n        insertData(data)\n      }\n    }\n  \n    return editor\n  }\n  \n  const insertImage = (editor, url) => {\n    const text = { text: '' }\n    const image = { type: 'image', url, children: [text] }\n    Transforms.insertNodes(editor, image)\n  }\n\n  const ImageElement = ({ attributes, children, element }) => {\n    return (\n      <div {...attributes}>\n        <div contentEditable={false}>\n          <img\n            src={element.url}\n          />\n        </div>\n        {children}\n      </div>\n    )\n  }\n\n\nconst isImageUrl = url => {\n    if (!url) return false\n    if (!isUrl(url)) return false\n    const ext = new URL(url).pathname.split('.').pop()\n    return imageExtensions.includes(ext)\n  }\n  \nconst initialValue = [\n  {\n    type: 'paragraph',\n    children: [\n      { text: 'This is editable ' },\n      { text: 'rich', bold: true },\n      { text: ' text, ' },\n      { text: 'much', italic: true },\n      { text: ' better than a ' },\n      { text: '<textarea>', code: true },\n      { text: '!' },\n    ],\n  },\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text:\n          \"Since it's rich text, you can do things like turn a selection of text \",\n      },\n      { text: 'bold', bold: true },\n      {\n        text:\n          ', or add a semantically rendered block quote in the middle of the page, like this:',\n      },\n    ],\n  },\n  {\n    type: 'block-quote',\n    children: [{ text: 'A wise quote.' }],\n  },\n  {\n    type: 'paragraph',\n    children: [{ text: 'Try it out for yourself!' }],\n  },\n  {\n    type: 'image',\n    url: 'https://source.unsplash.com/kFrdX5IeQzI',\n    children: [{ text: '' }],\n  }\n]\n\nexport default TextEditor"]},"metadata":{},"sourceType":"module"}
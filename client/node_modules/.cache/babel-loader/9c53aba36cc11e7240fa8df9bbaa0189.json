{"ast":null,"code":"var _jsxFileName = \"/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js\";\nimport React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor, Text } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([{\n    type: \"paragraph\",\n    children: [{\n      text: \"A line of text in a paragraph.\"\n    }]\n  }]);\n  const editor = useMemo(() => withReact(createEditor()), []);\n  const renderElement = useCallback(props => {\n    switch (props.element.type) {\n      case 'code':\n        return /*#__PURE__*/React.createElement(CodeElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 24\n          }\n        }));\n\n      default:\n        return /*#__PURE__*/React.createElement(DefaultElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 24\n          }\n        }));\n    }\n  }, []);\n  const renderLeaf = useCallback(props => {\n    return /*#__PURE__*/React.createElement(Leaf, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 14\n      }\n    }));\n  }, []);\n  const CustomEditor = {\n    isBoldMarkActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.bold === true,\n        universal: true\n      });\n      return !!match;\n    },\n\n    isCodeBlockActive(editor) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.type === 'code'\n      });\n      return !!match;\n    },\n\n    toggleBoldMark(editor) {\n      const isActive = CustomEditor.isBoldMarkActive(editor);\n      Transforms.setNodes(editor, {\n        bold: isActive ? null : true\n      }, {\n        match: n => Text.isText(n),\n        split: true\n      });\n    },\n\n    toggleCodeBlock(editor) {\n      const isActive = CustomEditor.isCodeBlockActive(editor);\n      Transforms.setNodes(editor, {\n        type: isActive ? null : 'code'\n      }, {\n        match: n => Editor.isBlock(editor, n)\n      });\n    }\n\n  };\n  return /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: newValue => setValue(newValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: event => {\n      if (!event.ctrlKey) {\n        return;\n      }\n\n      switch (event.key) {\n        case '`':\n          {\n            event.preventDefault();\n            CustomEditor.toggleCodeBlock(editor);\n            break;\n          }\n\n        case 'b':\n          {\n            event.preventDefault();\n            CustomEditor.toggleBoldMark(editor);\n            break;\n          }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst DefaultElement = props => {\n  return /*#__PURE__*/React.createElement(\"p\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 12\n    }\n  }), props.children);\n};\n\nconst CodeElement = props => {\n  return /*#__PURE__*/React.createElement(\"pre\", Object.assign({}, props.attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, props.children));\n};\n\nconst Leaf = props => {\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, props.attributes, {\n    style: {\n      fontWeight: props.leaf.bold ? 'bold' : 'normal'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), props.children);\n};\n\nexport default TextEditor;","map":{"version":3,"sources":["/home/sajalrs/ReactProgramming/article_podcast_website/client/src/components/TextEditor/TextEditor.js"],"names":["React","useState","useMemo","useEffect","useCallback","createEditor","Transforms","Editor","Text","Slate","Editable","withReact","TextEditor","value","setValue","type","children","text","editor","renderElement","props","element","renderLeaf","CustomEditor","isBoldMarkActive","match","nodes","n","bold","universal","isCodeBlockActive","toggleBoldMark","isActive","setNodes","isText","split","toggleCodeBlock","isBlock","newValue","event","ctrlKey","key","preventDefault","DefaultElement","attributes","CodeElement","Leaf","fontWeight","leaf"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor,  Text } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\n\nconst TextEditor = () => {\n  const [value, setValue] = useState([\n    {\n      type: \"paragraph\",\n      children: [{ text: \"A line of text in a paragraph.\" }],\n    },\n  ]);\n  const editor = useMemo(() => withReact(createEditor()), []);\n  \n\n  const renderElement= useCallback(\n      (props) => {\n        switch(props.element.type){\n            case 'code':\n                return <CodeElement {... props}/>\n            default:\n                return <DefaultElement {...props}/>\n        }      \n    },\n      [],\n  )\n\n  const renderLeaf = useCallback(props => {\n      return <Leaf {...props}/>\n  }, [])\n\n  const CustomEditor = {\n      isBoldMarkActive(editor){\n          const[match] = Editor.nodes(editor, {\n              match: n => n.bold === true,\n              universal: true,\n          })\n\n          return !!match\n      },\n\n      isCodeBlockActive(editor){\n          const[match] = Editor.nodes(editor, {\n              match: n => n.type === 'code',\n          })\n          return !!match\n        },\n\n        toggleBoldMark(editor){\n            const isActive = CustomEditor.isBoldMarkActive(editor)\n            Transforms.setNodes(\n                editor,\n                {bold: isActive? null : true},\n                {match: n => Text.isText(n), split: true}\n            )\n        },\n\n        toggleCodeBlock(editor){\n            const isActive = CustomEditor.isCodeBlockActive(editor)\n            Transforms.setNodes(\n                editor,\n                {type: isActive ? null : 'code'},\n                {match: n => Editor.isBlock(editor, n)}\n            )\n        },\n\n  }\n\n\n  return (\n    <Slate\n      editor={editor}\n      value={value}\n      onChange={(newValue) => setValue(newValue)}\n    >\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        onKeyDown={(event) => {\n            if(!event.ctrlKey){\n                return \n            }\n\n            switch(event.key){\n                case '`':{\n                    event.preventDefault();\n                    CustomEditor.toggleCodeBlock(editor);\n                    break;\n                }\n\n                case 'b': {\n                    event.preventDefault(); \n                    CustomEditor.toggleBoldMark(editor);\n                    break;\n                }\n\n\n            }\n\n        \n        }}\n      />\n    </Slate>\n  );\n};\n\nconst DefaultElement = props => {\n    return <p {...props.attributes}>{props.children}</p>\n}\n\nconst CodeElement = props => {\n    return( \n        <pre {...props.attributes}>\n            <code>{props.children}</code>\n        </pre>\n    )\n}\n\nconst Leaf = props => {\n    return (\n        <span  \n            {...props.attributes}\n            style={{fontWeight: props.leaf.bold ? 'bold': 'normal'}}\n            >\n                {props.children}\n            </span>\n    )\n}\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}
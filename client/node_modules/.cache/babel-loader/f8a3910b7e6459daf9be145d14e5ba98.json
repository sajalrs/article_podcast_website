{"ast":null,"code":"import { Node, Value } from 'slate';\nimport { atob, btoa } from 'isomorphic-base64';\n/**\n * Encode a JSON `object` as base-64 `string`.\n *\n * @param {Object} object\n * @return {String}\n */\n\nfunction encode(object) {\n  var string = JSON.stringify(object);\n  var encoded = btoa(encodeURIComponent(string));\n  return encoded;\n}\n/**\n * Decode a base-64 `string` to a JSON `object`.\n *\n * @param {String} string\n * @return {Object}\n */\n\n\nfunction decode(string) {\n  var decoded = decodeURIComponent(atob(string));\n  var object = JSON.parse(decoded);\n  return object;\n}\n/**\n * Deserialize a Value `string`.\n *\n * @param {String} string\n * @return {Value}\n */\n\n\nfunction deserialize(string, options) {\n  var raw = decode(string);\n  var value = Value.fromJSON(raw, options);\n  return value;\n}\n/**\n * Deserialize a Node `string`.\n *\n * @param {String} string\n * @return {Node}\n */\n\n\nfunction deserializeNode(string, options) {\n  var raw = decode(string);\n  var node = Node.fromJSON(raw, options);\n  return node;\n}\n/**\n * Serialize a `value`.\n *\n * @param {Value} value\n * @return {String}\n */\n\n\nfunction serialize(value, options) {\n  var raw = value.toJSON(options);\n  var encoded = encode(raw);\n  return encoded;\n}\n/**\n * Serialize a `node`.\n *\n * @param {Node} node\n * @return {String}\n */\n\n\nfunction serializeNode(node, options) {\n  var raw = node.toJSON(options);\n  var encoded = encode(raw);\n  return encoded;\n}\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nvar index = {\n  deserialize: deserialize,\n  deserializeNode: deserializeNode,\n  serialize: serialize,\n  serializeNode: serializeNode\n};\nexport default index;","map":{"version":3,"sources":["../src/index.js"],"names":["string","JSON","encoded","btoa","encodeURIComponent","decoded","decodeURIComponent","atob","object","raw","decode","value","Value","node","Node","encode"],"mappings":";;AAGA;;;;;;;AAOA,SAAA,MAAA,CAAA,MAAA,EAAwB;MAChBA,MAAAA,GAASC,IAAAA,CAAAA,SAAAA,CAAf,MAAeA,C;MACTC,OAAAA,GAAUC,IAAAA,CAAKC,kBAAAA,CAArB,MAAqBA,CAALD,C;SAChB,O;;;;;;;;;;AAUF,SAAA,MAAA,CAAA,MAAA,EAAwB;MAChBE,OAAAA,GAAUC,kBAAAA,CAAmBC,IAAAA,CAAnC,MAAmCA,CAAnBD,C;MACVE,MAAAA,GAASP,IAAAA,CAAAA,KAAAA,CAAf,OAAeA,C;SACf,M;;;;;;;;;;AAUF,SAAA,WAAA,CAAA,MAAA,EAAA,OAAA,EAAsC;MAC9BQ,GAAAA,GAAMC,MAAAA,CAAZ,MAAYA,C;MACNC,KAAAA,GAAQC,KAAAA,CAAAA,QAAAA,CAAAA,GAAAA,EAAd,OAAcA,C;SACd,K;;;;;;;;;;AAUF,SAAA,eAAA,CAAA,MAAA,EAAA,OAAA,EAA0C;MAClCH,GAAAA,GAAMC,MAAAA,CAAZ,MAAYA,C;MACNG,IAAAA,GAAOC,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,EAAb,OAAaA,C;SACb,I;;;;;;;;;;AAUF,SAAA,SAAA,CAAA,KAAA,EAAA,OAAA,EAAmC;MAC3BL,GAAAA,GAAME,KAAAA,CAAAA,MAAAA,CAAZ,OAAYA,C;MACNT,OAAAA,GAAUa,MAAAA,CAAhB,GAAgBA,C;SAChB,O;;;;;;;;;;AAUF,SAAA,aAAA,CAAA,IAAA,EAAA,OAAA,EAAsC;MAC9BN,GAAAA,GAAMI,IAAAA,CAAAA,MAAAA,CAAZ,OAAYA,C;MACNX,OAAAA,GAAUa,MAAAA,CAAhB,GAAgBA,C;SAChB,O;;;;;;;;;AASF,IAAA,KAAA,GAAe;eAAA,WAAA;mBAAA,eAAA;aAAA,SAAA;;AAAA,CAAf","sourcesContent":["import { Node, Value } from 'slate'\nimport { atob, btoa } from 'isomorphic-base64'\n\n/**\n * Encode a JSON `object` as base-64 `string`.\n *\n * @param {Object} object\n * @return {String}\n */\n\nfunction encode(object) {\n  const string = JSON.stringify(object)\n  const encoded = btoa(encodeURIComponent(string))\n  return encoded\n}\n\n/**\n * Decode a base-64 `string` to a JSON `object`.\n *\n * @param {String} string\n * @return {Object}\n */\n\nfunction decode(string) {\n  const decoded = decodeURIComponent(atob(string))\n  const object = JSON.parse(decoded)\n  return object\n}\n\n/**\n * Deserialize a Value `string`.\n *\n * @param {String} string\n * @return {Value}\n */\n\nfunction deserialize(string, options) {\n  const raw = decode(string)\n  const value = Value.fromJSON(raw, options)\n  return value\n}\n\n/**\n * Deserialize a Node `string`.\n *\n * @param {String} string\n * @return {Node}\n */\n\nfunction deserializeNode(string, options) {\n  const raw = decode(string)\n  const node = Node.fromJSON(raw, options)\n  return node\n}\n\n/**\n * Serialize a `value`.\n *\n * @param {Value} value\n * @return {String}\n */\n\nfunction serialize(value, options) {\n  const raw = value.toJSON(options)\n  const encoded = encode(raw)\n  return encoded\n}\n\n/**\n * Serialize a `node`.\n *\n * @param {Node} node\n * @return {String}\n */\n\nfunction serializeNode(node, options) {\n  const raw = node.toJSON(options)\n  const encoded = encode(raw)\n  return encoded\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  deserialize,\n  deserializeNode,\n  serialize,\n  serializeNode,\n}\n"]},"metadata":{},"sourceType":"module"}